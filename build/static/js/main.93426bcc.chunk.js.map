{"version":3,"sources":["view/components/StartComponents/Title/index.module.css","view/components/DataCollectionComponents/Title/index.module.css","view/components/FinishComponents/Title/index.module.css","view/pages/State.tsx","reportWebVitals.ts","view/components/DeliveryComponents/DownloadButton/index.tsx","view/components/DeliveryComponents/EmailList/index.tsx","view/pages/DeliveryPage/State.tsx","view/pages/DeliveryPage/index.tsx","controller/DeliveryController.tsx","view/pages/VisualizationPage/State.tsx","view/components/VisualizationComponents/FinishButton/index.tsx","view/components/VisualizationComponents/DiagramList/index.tsx","view/pages/VisualizationPage/index.tsx","view/pages/ModelCreationPage/State.tsx","view/components/ModelCreationComponents/Train/index.tsx","view/pages/ModelCreationPage/index.tsx","controller/ModelCreationController.tsx","controller/VisualizationController.tsx","view/components/ReferringComponents/ConstantsText/index.tsx","view/components/ReferringComponents/QRImage/index.tsx","view/components/ReferringComponents/LinkText/index.tsx","view/components/ReferringComponents/ChangeToVisuBtn/index.tsx","view/components/ReferringComponents/NewProjectButton/index.tsx","view/components/ReferringComponents/ModelList/index.tsx","view/components/ReferringComponents/ProjectList/index.tsx","view/components/ReferringComponents/LoadModelButton/index.tsx","view/pages/ReferringPage/State.tsx","view/components/ReferringComponents/LoginWindow/index.tsx","view/pages/ReferringPage/index.tsx","model/DeliveryFormat.tsx","controller/ReferringController.tsx","model/DatabaseConnector.tsx","model/Language.tsx","view/components/StartComponents/Title/index.tsx","view/components/StartComponents/Input/index.tsx","view/pages/StartPage/State.tsx","view/pages/StartPage/index.tsx","view/components/DataCollectionComponents/Title/index.tsx","view/components/DataCollectionComponents/Countdown/index.tsx","view/components/DataCollectionComponents/Diagram/index.tsx","view/pages/DataCollectionPage/State.tsx","view/pages/DataCollectionPage/index.tsx","controller/SensorManager.tsx","view/pages/ResultPage/State.tsx","view/pages/ResultPage/Result.tsx","controller/AIController.tsx","model/DeviceData.tsx","model/AIModel.tsx","model/DataPoint.tsx","model/DataRow.tsx","model/TimeSpan.tsx","model/Label.tsx","model/DataSet.tsx","model/Session.tsx","model/Project.tsx","model/User.tsx","model/AIBuilder.tsx","model/AIDistributor.tsx","model/Facade.tsx","view/components/FinishComponents/Title/index.tsx","view/components/FinishComponents/Diagram/index.tsx","view/components/FinishComponents/Input/Labelling/index.tsx","view/pages/FinishPage/State.tsx","view/pages/FinishPage/index.tsx","controller/FinishController.tsx","controller/DataCollectionController.tsx","controller/StartController.tsx","controller/MainController.tsx","index.tsx"],"names":["module","exports","States","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DownloadButton","props","download","clicked","onClick","className","T_BUTTON_DOWNLOAD","Component","EmailList","delivery","chosenEmails","state","mouse","addButtonClick","inputempty","inputemail","id","address","chosen","emails","handleCreate","setState","inputchange","e","target","value","nanoid","handleKeyUp","keyCode","NotificationManager","error","E_INPUT_EMPTY_DE","map","emailObj","includes","E_INPUT_DUPLICATE_DE","test","addEmail","E_INPUT_INVALID_DE","handleMouse","flag","handleCheck","newEmails","handleDelete","window","confirm","Q_DELETE_ADDRESS_SINGLE_DE","filter","deleteEmail","chooseAllEmail","checked","clearAllChosen","Q_DELETE_ADDRESS_MULTI_DE","emailAddressList","entry","this","chosenCount","reduce","pre","email","total","length","T_ADD_BUTTON_DE","onKeyUp","onChange","type","placeholder","T_ADD_PLACEHOLDER_DE","style","backgroundColor","onMouseEnter","onMouseLeave","display","T_DELETE_BUTTON_DE","T_SELECTION_COUNT_PART_DE","T_SELECTION_COUNT_FULL_DE","disabled","T_DELETE_ALL_BUTTON_DE","T_SEND_BUTTON_DE","State","currentState","NeedMessage","languageCode","messages","DeliveryPage","observers","update","notify","VDOM","T_PAGE_TITLE_DE","bind","document","getElementById","ReactDOM","render","observer","push","index","indexOf","splice","DeliverWeb","NeedDownload","DeliveryController","chosenAiModel","page","attach","getState","chosenAIModel","deliverAsWebApp","MainController","getInstance","getMessage","waitForDB","getFacade","sendAIModel","dataSetMetas","currentDataSets","FinishButton","pageChangeToCreation","DiagramList","diagrammData","datavalue","showDiagramIndex","diagramList","lineLabels","sensorRow","time","color","csscolor","handleClick","diagram","dataSet","datavalues","i","rows","sensorType","dataCoordinate","j","datapoint","relativeTime","newDatasets","coordinate","sensor","sensorName","T_ACCELEROMETER_DE","T_GYROSCOPE_DE","T_MAGNETOMETER_DE","label","strokeColor","borderWidth","data","labels","datasets","options","datasetFill","pointDotRadius","pointHitDetectionRadius","offsetGridLines","pointDot","newList","dataSetID","undefined","LineChart","require","Line","index2","console","log","updateDiagramm","datasetname","forEach","dataset","dataSetName","toString","width","documentElement","clientWidth","height","VisualizationPage","PAGE_TITLE","changetoCreation","ChangeToCreation","trainingParameter","dataSets","imputator","classifier","scaler","features","Train","train","changeToReferring","imputators","name","T_IMPUTER_MEAN_DE","tag","scalers","T_SCALER_STANDARD_DE","T_SCALER_ROBUST_DE","T_SCALER_MIN_MAX_DE","T_SCALER_NORMALIZER_DE","myfeatures","T_FEATURE_MIN_DE","T_FEATURE_MAX_DE","T_FEATURE_VARIANCE_DE","T_FEATURE_ENERGY_DE","T_FEATURE_FOURIER_TRANSFORM_DE","T_FEATURE_MEAN_DE","T_FEATURE_AUTOREGRESSIVE_DE","T_FEATURE_SKEWNESS_DE","T_FEATURE_KURTOSIS_DE","T_FEATURE_IQR_DE","classifiers","T_CLASSIFIER_MLP_DE","T_CLASSIFIER_RANDOM_FOREST_DE","T_CLASSIFIER_K_NEIGHBORS_DE","T_CLASSIFIER_SVM_DE","chosenScaler","chosenclassifier","chosenImputator","chooseDataSetsFlag","chooseFeatureFlag","handleDataset","chosenAllDatasets","newflag","handleImputation","newChosen","E_IMPUTER_MULTI_SELECTION_DE","handleScaler","E_SCALER_MULTI_SELECTION_DE","handleExtraction","chosenAllExtraction","myfeature","handleClassifier","E_CLASSIFIER_MULTI_SELECTION_DE","handleTrain","imputatorsflag","classifiersflag","scalersflag","featuresflag","nochoice","imputatorObj","classifierObj","scalerObj","featureObj","E_DATASET_NO_SELECTION_DE","E_IMPUTER_NO_SELECTION_DE","E_CLASSIFIER_NO_SELECTION_DE","E_SCALER_NO_SELECTION_DE","E_FEATURE_NO_SELECTION_DE","T_DATASET_TITLE_DE","htmlFor","T_DATASET_CHOOSEALL_DE","T_IMPUTER_TITLE_DE","T_SCALER_TITLE_DE","T_CLASSIFIER_TITLE_DE","T_FEATURE_TITLE_DE","extraction","T_FEATURE_CHOOSEALL_DE","T_BUTTON_START_DE","handleChangePage","T_BUTTON_HOME_DE","ModelCreationPage","NeedKiTraining","ChangeToRefferring","ModelCreationController","getDataSetMetas","startTraining","changeTo","RefferingController","params","slidingWindowStep","slidingWindowSize","trainingDataPercentage","applyModel","VisualizationController","currentProject","SetDataRows","loadProject","projectID","getDataRows","dataRows","intervalId","setInterval","clearInterval","ConstantsText","getText","title","React","QRImage","qr","src","alt","LinkText","link","T_LINK_DESCRIPTION_DE","href","ChangeToVisuBtn","pageChangeToVisu","T_BUTTON_NEXT_DE","NewProjectButton","pageNewProject","projectName","click","changeProjectName","ModelList","AIModelID","pageLoadModel","chosenmodelID","handleChange","modelObj","handleChoose","ProjectList","projectData","pageSetCurrentprojekt","pageLoadProjekt","loadclick","projectObj","Number","handleLoad","LoadModelButton","T_BUTTON_OPEN_LOAD_DE","adminData","aiUserData","sessionID","wait","islogedIn","LoginWindow","pageRegister","username","password","pageLogin","openNewWindow","changeUsername","changeEmail","changePassword","register","login","T_BUTTON_LOGIN_DE","T_ATTR_FORM_SECTION","T_POPUP_LABEL_NAME_DE","T_POPUP_LABEL_EMAIL_DE","T_POPUP_LABEL_PASSWORD_DE","T_POPUP_BUTTON_LOGIN_DE","T_POPUP_BUTTON_REGISTER_DE","ReferringPage","createNewProject","changetovisu","setCurrentProjekt","loadmodel","loadproject","NewProjekt","Register","LoginFail","success","T_WELCOME_DE","E_REG_ERROR_DE","E_MAIL_INVALID_DE","Login","E_LOGIN_ERROR_DE","LoadProject","ChangeToVisual","LoadModel","DeliveryFormat","isloggedIn","getProjectMetas","getAdminMail","loadModel","SetLanguage","setLanguage","ChangeToDelivery","loginSucess","loginAdmin","catch","registerAdmin","url","URL","searchParams","append","getSessionID","QRCode","setTypeNumber","setErrorCorrectLevel","ErrorCorrectLevel","L","addData","make","toDataURL","SetQRC","sucess","createProject","createQR","LoadError","projectId","deliveryConroller","DatabaseConnector","a","sendRequest","result","requestData","Date","getMilliseconds","lastProjectUpdate","labelID","action","headers","fetch","databasePHPURL","method","body","JSON","stringify","response","json","obj","Language","language","code","Title","Input","pageChangeSettings","recordingSettings","availableSensorTypes","usedSensorTypes","leadTime","collectionTime","changeLeadtime","changeCollectionTime","changeName","handleCheckBoxChange","newAvailableSensorTypes","sensorTypID","submit","parseInt","isNaN","newDataSetName","waitTime","readTime","messageIDs","StartPage","admin","changeSettings","ChangeToDataCollection","T_TITLE_DE","Countdown","countdownNumber","chosenSensors","countdown","sensornames","x","Diagram","pageChangeToFinish","showDiagram","diagramLineLabels","diagramData","diagramOptions","z","text","scales","xAxes","ticks","beginAtZero","callback","isInteger","stepSize","dd","redraw","usedSensorNames","dataPoints","DataCollectionPage","changeToFinish","ChangeToFinish","SensorManager","checkList","currentSensors","facade","startTime","saving","sensorTypes","accSensor","Accelerometer","frequency","addEventListener","getData","event","message","gyroSensor","Gyroscope","magSensor","Magnetometer","createDataSet","intervalId1","getTime","start","intervalId2","newDataPoint","shift","sendDataPoint","rowId","stop","checkForErrors","element","dataPoint","y","point","saveDatapointinRow","sensors","accelerometer","accelerometerExist","existSensor","gyroscope","gyroscopeExist","finish","ms","Promise","resolve","setTimeout","ResultPage","CLASSIFY","reloadPage","RELOAD","location","reload","AIController","modelID","sensorManager","urlParams","queryString","search","URLSearchParams","registerDataminer","AI_MODEL_USER_NAME","setUpSensorShown","get","split","ClassifyResult","classifyResult","setUpDataRead","detach","getWaitTime","readData","getCurrentDataRows","classify","prediction","DeviceData","deviceID","MACADRESS","deviceName","firmware","generation","MACADDRESS","deviceType","device","Smartphone","Desktop","AIModel","DataPoint","DataRow","dataRowID","dataRow","getValue","getRelativeTime","SensorTypeID","TimeSpan","span","end","Label","timeSpan","setTimeSpan","getStart","getEnd","DataSet","generateDate","getID","addDatapoint","getDataRow","labelName","setLabel","labelList","getLabel","Session","connectedUser","user","userID","users","userName","getName","Project","session","aiModel","currentDataSet","aiModelID","createLabel","deleteLabel","getLabels","User","getCurrentDataSetID","newID","setCurrentDataSetID","deleteDataSet","Admin","adminID","adminName","loadDevice","project","existProject","newProject","newproject","Dataminer","AIModelUser","AIBuilder","modelId","modelData","buildModel","dataSetId","callBack","successAction","plainText","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","responseJSON","parse","responseText","Error","send","setRequestHeader","AIDistributor","format","Object","keys","statusText","EXE","WEB_APP","emailList","recipients","reject","onerror","entries","header","content","Facade","dbCon","loadLanguage","sensorTypeID","datarowNames","getCurrentProjectID","sensorID","datarowName","getEmail","sendDataPointsAgain","datapoints","adminEmail","getAdminEmail","getLanguageCode","getLanguageMetas","sensorInformation","IDs","dataminerName","dataminer","dataminerID","aiModelUserName","registerAIModelUser","aiModelUser","aiModelUserID","datasetID","aiId","getAIModel","model","aiBuilder","Labelling","newStart","newEnd","newName","newLabel","pagedeleteLabel","IDcounter","handleChangeLabel","handleChangeStart","handleChangeEnd","labelObj","addLabel","replace","formatFloatInString","NaN","newLabels","E_TIME_INVALID_DE","E_NAME_MISSING_DE","E_MISSING_DE","stringNumber","parseFloat","T_TIME_FROM_DE","T_TIME_TO_DE","T_BUTTON_DELETE_DE","T_LABEL_START_DE","T_LABEL_END_DE","T_LABEL_NAME_DE","T_BUTTON_ADD_DE","currentLabel","FinishPage","T_BUTTON_RELOAD_DE","NewLabel","DeleteLabel","FinishController","ChangeLabel","changeDataLabel","newDataLabel","deleteDataLabel","promise","DataCollectionController","StartDataRead","NeedInstantDiagram","StartController","getAvailableSensors","availableSensor","dataCollectionController","currentPageController","destinationPageController","dataDE","mainController","startApp"],"mappings":"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","file":"static/js/main.93426bcc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__16vB9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1WB_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__3LAYU\"};","export interface IState {\r\n  currentState: States;\r\n  languageCode: string;\r\n  messages: { text: string, id: number; }[];\r\n\r\n  //Anzeige aller Projekte eines nutzers\r\n  //ReferringPage\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[];\r\n  // Das Projekt welches in der view ausgewählt wurde\r\n  currentProject?: { projectID: number, projectName: string, AIModelID: number[]; };\r\n  chosenAIModel?: number;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  aiUserData?: { name: string, result: string; };\r\n  currentLabel?: { labelID: number, start: number, end: number; name: string; };\r\n  sessionID?: string;\r\n  dataPoints?: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[];\r\n  dataRows?: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[];\r\n  //DataSet?: {dataSetID: number, rows: {sensorType: number, value: number[]; relativeTime: number; }[] }[]\r\n  dataSetMetas?: { dataSetID: number; dataSetName: string; }[];\r\n  currentDataSets?: { dataSetID: number, rows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; }[];\r\n  qr?: string;\r\n  diagramSvg?: string;\r\n  recordingSettings?: { newDataSetName: string, usedSensorTypes: number[], readTime: number, waitTime: number, availableSensorTypes: { sensorTypID: number; sensorType: string; chosen: boolean; }[]; };\r\n  leadTime?: number;\r\n  usedSensorNames?: string[];\r\n  trainingParameter?: {\r\n    dataSets: number[],\r\n    imputator: string,\r\n    classifier: string,\r\n    scaler: string,\r\n    features: string[];\r\n    trainingDataPercentage?: number, // optional\r\n    slidingWindowSize?: number,      // optional\r\n    slidingWindowStep?: number;        // optional\r\n  };\r\n  islogedIn?: boolean;\r\n  chosenEmails?: string[];\r\n  wait?: Promise<any>;\r\n  link?: string;\r\n  //Beispiel fuer Visu\r\n  //testDataSet?: { dataSetID: number; rows: { sensorType: number; datapoint: { value: number[]; relativeTime: number; }[]; }[]; }[];\r\n}\r\n\r\n\r\nexport enum States {\r\n\r\n  setUpSensorManager = \"setUpSensorManager\",\r\n\r\n  waitForDB = \"waitForDB\",\r\n  /**\r\n   * Seite benötigt texte\r\n   */\r\n  NeedMessage = \"NeedMessage\",\r\n  /**\r\n   * Seite kann nun aus dem status die texte laden\r\n   */\r\n  SetMessage = \"SetMessage\",\r\n  /**\r\n   * Seite benötigt ein QRC\r\n   */\r\n  NeedQRC = \"NeedQRC\",\r\n  /**\r\n   * QRC kann angezeigt werden\r\n   */\r\n  SetQRC = \"SetQRC\",\r\n  /**\r\n   * Projektdaten können benutzt werden\r\n   */\r\n  SetProjects = \"SetProjects\",\r\n  /**\r\n   * Sprache der Anwendung soll geändert werden\r\n   */\r\n  SetLanguage = \"SetLanguage\",\r\n  /**\r\n   * Fehler für alle zu ladenen sachen\r\n   */\r\n  LoadError = \"LoadError\",\r\n  /**\r\n   * Ein Login Versuch soll durchgeführt werden\r\n   */\r\n  Login = \"Login\",\r\n  /**\r\n   * Ein Registrierungsversuch soll durchgeführt werden\r\n   */\r\n  Register = \"Register\",\r\n  /**\r\n     * Update aller Daten welche auf der Seite angezeigt werden, zum Beispiel Projekt Daten für die Projekt liste.\r\n     */\r\n  updateData = \"updateData\",\r\n  /**\r\n   * Ein neues Projekt soll erstellt werden\r\n   */\r\n  NewProjekt = \"NewProjekt\",\r\n  /**\r\n   * Projekts soll geladen werden\r\n   */\r\n  LoadProject = \"LoadProject\",\r\n  /**\r\n   * Model eines Projekts soll geladen werden\r\n   */\r\n  LoadModel = \"LoadModel\",\r\n  /**\r\n   * Login ist gescheitert\r\n   */\r\n  LoginFail = \"LoginFail\",\r\n  /**\r\n   * Beginne Datenerfassung\r\n   */\r\n  StartDataRead = \"StartDataRead\",\r\n  /**\r\n   * Klassifiziere Daten\r\n   */\r\n  ClassifyResult = \"ClassifyResult\",\r\n  /**\r\n   * Die Seite benötigt die neusten Datenreihen\r\n   */\r\n  NeedDataRows = \"NeedDataRows\",\r\n  /**\r\n   * Ein Label soll geändert werden\r\n   */\r\n  ChangeLabel = \"ChangeLabel\",\r\n  /**\r\n   * Ein Label soll gelöscht werden\r\n   */\r\n  DeleteLabel = \"DeleteLabel\",\r\n  /**\r\n   * Ein neues Label los erstellt werden\r\n   */\r\n  NewLabel = \"NewLabel\",\r\n  /**\r\n   * Wechsel zur Startseite\r\n   */\r\n  ChangeToStart = \"ChangeToStart\",\r\n  /**\r\n   * Wechsel zur Fertigungsseite\r\n   */\r\n  ChangeToFinish = \"ChangeToFinish\",\r\n  /**\r\n   * Wechsel zur Verweisseite\r\n   */\r\n  ChangeToDataCollection = \"ChangeToDataCollection\",\r\n\r\n  ChangeToRefferring = \"ChangeToRefferring\",\r\n\r\n  ChangeToVisual = \"ChangeToVisual\",\r\n\r\n  ChangeToCreation = \"ChangeToCreation\",\r\n\r\n  NeedInstantDiagram = \"NeedInstantDiagram\",\r\n\r\n  /**\r\n   * Zeige neue wartezeit\r\n   */\r\n  SetWaitTime = \"SetWaitTime\",\r\n  /**\r\n   * Zeige neue lesezeit\r\n   */\r\n  SetReadTime = \"SetReadTime\",\r\n\r\n  //Visu\r\n  NeedRows = \"NeedRows\",\r\n\r\n  //Delivery\r\n  /**\r\n   * Liefert an die auf der Seite angegebenen Email-Adressen die WebApp für ein Modell\r\n   */\r\n  DeliverWeb = \"DeliverWeb\",\r\n  //Download\r\n  NeedDownload = \"NeedDownload\",\r\n\r\n  //Modelcreation\r\n  NeedDatabaseList = \"NeedDatabaseList\",\r\n\r\n  /**\r\n   * Neue Datenreihen sind im Status hinterlegt\r\n   */\r\n  SetDataRows = \"SetDataRows\",\r\n  /**\r\n   * Der Nutzer möchte mit dem KI Training beginnen\r\n   */\r\n  NeedKiTraining = \"NeedKiTraining\",\r\n  /**\r\n   * Eine Veränderung des Labels war erfolgreich\r\n   */\r\n  setLabel = \"setLabel\",\r\n\r\n  NeedLeadTime = \"NeedLeadTime\",\r\n\r\n  ChangeToDelivery = \"ChangeToDelivery\"\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { Component } from 'react'\r\n\r\n/**\r\n * Herunterladen-Knopf\r\n */\r\nexport default class DownloadButton extends Component {\r\n    private static readonly T_BUTTON_DOWNLOAD: string = \"Herunterladen!\";\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        download: function () { }\r\n    }\r\n\r\n    /**\r\n     * Klicken-Methode\r\n     */\r\n    clicked = () => {\r\n        this.props.download()\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.clicked()} className=\"download-btn\" >{DownloadButton.T_BUTTON_DOWNLOAD}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n/**\r\n * Behandeln Emailliste mit Hinzufügen und Löschen, wählen Eamils auszuliefern\r\n */\r\nexport default class EmailList extends Component {\r\n\tprivate static readonly E_INPUT_EMPTY_DE: string = \"Die Eingabe darf nicht leer sein!\";\r\n\tprivate static readonly E_INPUT_DUPLICATE_DE: string = \"Diese E-Mail-Adresse ist schon in der Liste!\";\r\n\tprivate static readonly E_INPUT_INVALID_DE: string = \"Der eingebene Wert kann keine gültige E-Mail-Adresse sein!\";\r\n\tprivate static readonly Q_DELETE_ADDRESS_SINGLE_DE: string = \"Sind Sie sich sicher, die gewählte Emailadresse löschen zu wollen?\";\r\n\tprivate static readonly Q_DELETE_ADDRESS_MULTI_DE: string = \"Sind Sie sich sicher, die gewählten Emailadressen löschen zu wollen?\";\r\n\tprivate static readonly T_ADD_BUTTON_DE: string = \"Neue Emailadresse hinzufügen\";\r\n\tprivate static readonly T_ADD_PLACEHOLDER_DE: string = \"Eingabe mit Eingabetaste abschließen\";\r\n\tprivate static readonly T_SELECTION_COUNT_PART_DE: string = \"Gewählt\";\r\n\tprivate static readonly T_SELECTION_COUNT_FULL_DE: string = \"Insgesamt\";\r\n\tprivate static readonly T_SEND_BUTTON_DE: string = \"Ausliefern\";\r\n\tprivate static readonly T_DELETE_BUTTON_DE: string = \"Löschen\";\r\n\tprivate static readonly T_DELETE_ALL_BUTTON_DE: string = \"Alle ausgewählten Emailadressen löschen\";\r\n\r\n\t/**\r\n\t * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n\t */\r\n\tprops = {\r\n\t\tdelivery: function (chosenEmails: string[]) { }\r\n\t};\r\n\r\n\t/**\r\n\t * Status für diese Komponente\r\n\t */\r\n\tstate = {\r\n\t\tmouse: false,\r\n\t\taddButtonClick: false,\r\n\t\tinputempty: true,\r\n\t\tinputemail: {\r\n\t\t\tid: '',\r\n\t\t\taddress: '',\r\n\t\t\tchosen: false\r\n\t\t},\r\n\t\temails: [] as { id: string, address: string, chosen: boolean }[]\r\n\t};\r\n\r\n\t/**\r\n\t * Erstellen Eingabefeld\r\n\t */\r\n\thandleCreate = () => {\r\n\t\tthis.setState({ addButtonClick: true });\r\n\t};\r\n\r\n\t/**\r\n\t * Eingabe Methode\r\n\t * @param e ChangeEventInput\r\n\t */\r\n\tinputchange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n\t\tif (e.target.value === '') {\r\n\t\t\tthis.setState({ inputempty: true });\r\n\t\t} else {\r\n\t\t\tthis.setState({ inputemail: { id: nanoid(), address: e.target.value, chosen: false }, inputempty: false });\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode verarbeitet eingegebene E-Mail-Adressen.\r\n\t * \r\n\t * @param e KeyboardEvent - über dieses Event wird die Methode ausgelöst. Es enthält ein paar Werte, die im weiteren Verlauf noch benötigt werden.\r\n\t */\r\n\thandleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n\t\tconst { keyCode } = e;\r\n\t\t// check ENTER-key\r\n\t\tif (keyCode !== 13) return;\r\n\t\t// cant add empty email\r\n\t\tconst { inputemail, inputempty, emails } = this.state;\r\n\t\tif (inputempty) {\r\n\t\t\tNotificationManager.error(EmailList.E_INPUT_EMPTY_DE, \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst exists = emails.map(emailObj => emailObj.address === inputemail.address).includes(true);\r\n\t\tif (exists) {\r\n\t\t\tNotificationManager.error(EmailList.E_INPUT_DUPLICATE_DE, \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar pattern = /^([A-Za-z0-9_\\-.])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z])+$/;\r\n\t\tif (pattern.test(inputemail.address)) {\r\n\t\t\tthis.addEmail(inputemail);\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(EmailList.E_INPUT_INVALID_DE, \"\", 3000);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// hide inputbox\r\n\t\tthis.setState({ addButtonClick: false });\r\n\t};\r\n\r\n\t/**\r\n\t * Behandeln Mausstatus\r\n\t * \r\n\t * @param flag Mausstatus\r\n\t * @returns Ein vorbereiteter Funktionsaufruf zur Statusaktualisierung.\r\n\t */\r\n\thandleMouse = (flag: boolean) => {\r\n\t\treturn () => this.setState({ mouse: flag });\r\n\t};\r\n\r\n\t/**\r\n\t * Wählen Email Methode\r\n\t * \r\n\t * @param id gewählt EmailID\r\n\t * @param chosen gewählt oder nicht\r\n\t */\r\n\thandleCheck = (id: string, chosen: boolean) => {\r\n\t\tconst { emails } = this.state;\r\n\t\tconst newEmails = emails.map((emailObj) => {\r\n\t\t\tif (emailObj.id === id) return { ...emailObj, chosen };\r\n\t\t\telse return emailObj;\r\n\t\t});\r\n\t\tthis.setState({ emails: newEmails });\r\n\t};\r\n\r\n\t/**\r\n\t * Löschen Methode\r\n\t * \r\n\t * @param id EmailID zu löschen\r\n\t */\r\n\thandleDelete = (id: string): void => {\r\n\t\tif (window.confirm(EmailList.Q_DELETE_ADDRESS_SINGLE_DE)) {\r\n\t\t\tconst { emails } = this.state;\r\n\t\t\tconst newEmails = emails.filter((emailObj) => {\r\n\t\t\t\treturn emailObj.id !== id;\r\n\t\t\t});\r\n\t\t\t// update emailList\r\n\t\t\tthis.setState({ emails: newEmails });\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode fügt eine E-Mail-Adresse zur Liste der E-Mail-Adressen hinzu und aktualisiert die Ansicht.\r\n\t * \r\n\t * @param emailObj Ein klassenloses Objekt, das die benötigten Daten einer E-Mail-Adresse enthält.\r\n\t */\r\n\taddEmail = (emailObj: { id: string, address: string, chosen: boolean; }): void => {\r\n\t\tconst { emails } = this.state;\r\n\t\tconst newEmails = [emailObj, ...emails];\r\n\t\t// update emailList\r\n\t\tthis.setState({ emails: newEmails });\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode löscht eine E-Mail-Adresse aus der Liste der E-Mail-Adressen und aktualisiert die Ansicht.\r\n\t * \r\n\t * @param emailObj Die ID der zu löschenden Adresse.\r\n\t */\r\n\tdeleteEmail = (id: string): void => {\r\n\t\t// get orignal emailList\r\n\t\t// delete emailObj with id\r\n\t\tconst { emails } = this.state;\r\n\t\tconst newEmails = emails.filter(emailObj => emailObj.id !== id);\r\n\t\t// update emailList\r\n\t\tthis.setState({ emails: newEmails });\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode wählt alle E-Mail-Adressen in der Liste aus und aktualisiert die Ansicht.\r\n\t * \r\n\t * @param emailObj Das auslösende Event\r\n\t */\r\n\tchooseAllEmail = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n\t\t// get orignal emailList\r\n\t\tconst chosen = e.target.checked;\r\n\t\tconst { emails } = this.state;\r\n\t\tconst newEmails = emails.map(emailObj => {return { ...emailObj, chosen };});\r\n\t\t// update emailList\r\n\t\tthis.setState({ emails: newEmails });\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode löscht alle ausgewählten E-Mail-Adresse \r\n\t * aus der Liste der E-Mail-Adressen und aktualisiert die Ansicht.\r\n\t */\r\n\tclearAllChosen = (): void => {\r\n\t\tif (window.confirm(EmailList.Q_DELETE_ADDRESS_MULTI_DE)) {\r\n\t\t\t// get orignal emailList\r\n\t\t\tconst { emails } = this.state;\t\r\n\t\t\tconst newEmails = emails.filter(emailObj => !emailObj.chosen);\r\n\t\t\t// update emaillist\r\n\t\t\tthis.setState({ emails: newEmails });\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Ausliefern-Methode\r\n\t */\r\n\tdelivery = (): void => {\r\n\t\tconst { emails } = this.state;\r\n\t\tconst emailAddressList: string[] = emails.filter(entry => entry.chosen).map(entry => entry.address);\r\n\t\tthis.props.delivery(emailAddressList);\r\n\t};\r\n\r\n\t/**\r\n\t * Render Methode der Komponente\r\n\t * \r\n\t * @returns Aufbau der Komponente\r\n\t */\r\n\trender() {\r\n\t\tconst { mouse, emails } = this.state;\r\n\t\tconst chosenCount = emails.reduce((pre, email) => pre + (email.chosen ? 1 : 0), 0);\r\n\t\t//total amount\r\n\t\tconst total = emails.length;\r\n\t\treturn (\r\n\t\t\t<div className=\"email-main\">\r\n\t\t\t\t<div className=\"view-section\">\r\n\t\t\t\t\t<button onClick={() => this.handleCreate()} className=\"addemail-btn\" >{EmailList.T_ADD_BUTTON_DE}</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.state.addButtonClick ?\r\n\t\t\t\t<div className=\"inputbox view-section\">\r\n\t\t\t\t\t<input value={this.state.inputemail.address} onKeyUp={this.handleKeyUp} onChange={this.inputchange} type=\"text\" placeholder={EmailList.T_ADD_PLACEHOLDER_DE} className=\"emailinput\" />\r\n\t\t\t\t</div> : null}\r\n\t\t\t\t<div className=\"view-section\">\r\n\t\t\t\t\t{emails.map(emailObj => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li  className=\"list\" style={{ backgroundColor: mouse ? '#ddd' : '#fff' }} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)}>\r\n\t\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\t\t<input className='emailitemcheck' type=\"checkbox\" checked={emailObj.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheck(emailObj.id, e.target.checked)} />\r\n\t\t\t\t\t\t\t\t\t<span>{emailObj.address}</span>\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(emailObj.id)} className=\"btn-item\" style={{ display: mouse ? 'block' : 'none' }}>{EmailList.T_DELETE_BUTTON_DE}</button>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"view-section\">\r\n\t\t\t\t\t<input className='chooseall' type=\"checkbox\" onChange={this.chooseAllEmail} checked={chosenCount === total && total !== 0 ? true : false} />\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<span>{EmailList.T_SELECTION_COUNT_PART_DE}: {chosenCount}</span> / {EmailList.T_SELECTION_COUNT_FULL_DE}: {total}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<button onClick={() => this.clearAllChosen()} disabled className=\"btn-clear\">{EmailList.T_DELETE_ALL_BUTTON_DE}</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"view-section\">\r\n\t\t\t\t\t<button onClick={() => this.delivery()} className=\"delivery-btn\" >{EmailList.T_SEND_BUTTON_DE}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n\r\n  chosenEmails?: string[];\r\n}\r\n","import React from 'react';\r\nimport DownloadButton from '../../components/DeliveryComponents/DownloadButton';\r\nimport EmailList from '../../components/DeliveryComponents/EmailList';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n//Auslieferungsseite\r\nexport class DeliveryPage implements Page {\r\n\r\n\tprivate state: State;\r\n\tprivate observers: PageController[] = [];\r\n\r\n\tprivate static readonly T_PAGE_TITLE_DE = \"Modellauslieferung\";\r\n\r\n\t/**\r\n\t* Konstruktor der Auslieferungsseite.\r\n\t*/\r\n\tconstructor() {\r\n\t\tthis.state = new State();\r\n\t\tthis.update()\r\n\t}\r\n\r\n\t/**\r\n\t* Update Methode der Auslieferungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n\t* Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n\t* Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n\t*/\r\n\tupdate() {\r\n\t\tthis.notify();\r\n\t\tconst VDOM = (\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className='title'>{DeliveryPage.T_PAGE_TITLE_DE}</h2>\r\n\t\t\t\t<EmailList delivery={this.delivery.bind(this)} />\r\n\t\t\t\t<DownloadButton download={this.download.bind(this)} />\r\n\t\t\t\t<NotificationContainer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tif (document.getElementById('root') !== null) {\r\n\t\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n\t* @param oberver neuer Beobachter\r\n\t*/\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\t/**\r\n\t* Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n\t* @param oberver Beobachter der zu entfernen ist\r\n\t*/\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n\t*/\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Gibt den Status der Seite zurück\r\n\t*/\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t/**\r\n\t * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n\t * @param state neuer Zustand für die Seite\r\n\t */\r\n\tsetState(state: any) {\r\n\t\tthis.state = state;\r\n\t\tthis.update();\r\n\t}\r\n\r\n\t/**\r\n\t * Liefern zu Emails aus\r\n\t * @param chosenEmails gewählte Emails\r\n\t */\r\n\tprivate delivery(chosenEmails: string[]) {\r\n\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.currentState = States.DeliverWeb;\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.chosenEmails = chosenEmails;\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\t/**\r\n\t * Herunterladen App\r\n\t */\r\n\tprivate download() {\r\n\r\n\t\t// eslint-disable-next-line\r\n\t\tthis.state.currentState = States.NeedDownload;\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { DeliveryPage } from \"../view/pages/DeliveryPage/index\";\r\n//import { DeliveryFormat } from \"../model/DeliveryFormat\"\r\n\r\n/**\r\n* Controller der die Auslieferungsseite verwaltet\r\n*/\r\nexport class DeliveryController implements PageController {\r\n    /**\r\n    * Seite welche gerade von dem Controller verwaltet wird\r\n    */\r\n    private page: Page;\r\n    /**\r\n    * Status der Seite\r\n    */\r\n    private state: IState;\r\n\r\n    /**\r\n    * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n    * @param currentProject Die momentanen Projectdaten für welches man ein Model ausliefern möchte. \r\n    */\r\n    constructor(chosenAiModel: number) {\r\n        this.page = new DeliveryPage();\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.state.chosenAIModel = chosenAiModel\r\n        this.page.setState(this.state)\r\n        this.update()\r\n    }\r\n\r\n    /**\r\n    * Die Update Methode des Seitenverwalters.\r\n    */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.DeliverWeb:\r\n                this.deliverAsWebApp();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage(this.state.messages)!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState(this.state);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    //TODO Die Auslieferung des Modells ist noch nicht fertig\r\n\r\n    /**\r\n    * Holt sich aus dem Status alle angegebene Email-Adressen und gibt diese mit Daten zum Projekt an die Fassade welche eine Email an alle Adressen sendet.\r\n    * Der Inhalt der Email gibt zugriff auf das Modell zur klassifizierung.\r\n    */\r\n    private deliverAsWebApp() {\r\n        MainController.getInstance().getFacade().sendAIModel(this.state.chosenAIModel!, this.state.chosenEmails!)\r\n    }\r\n\r\n    private deliverAsExe() {\r\n        //todo\r\n    }\r\n}","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n\r\n  dataSetMetas?: { dataSetID: number; dataSetName: string; }[] = [];\r\n  currentDataSets?: { dataSetID: number; rows: { sensorType: number; datapoint: { value: number[]; relativeTime: number; }[]; }[]; }[] = [];\r\n  //testDataSet?: { dataSetID: number; rows: { sensorType: number; datapoint: { value: number[]; relativeTime: number; }[]; }[]; }[] = [];\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n/**\r\n * Wechsel zu Modellerstellungsseite\r\n */\r\nexport default class FinishButton extends Component {\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        pageChangeToCreation: function () { }\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <div className=\"view-section\">\r\n                <button onClick={() => this.props.pageChangeToCreation()} className=\"finish-btn\" >Zur Modellerstellungsseite</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Chart from 'chart.js';\r\nimport React, { Component, CSSProperties } from 'react';\r\nimport \"./DiagramList.css\";\r\n\r\n\r\nexport default class DiagramList extends Component {\r\n    private static readonly T_ACCELEROMETER_DE: string = \"Beschleunigungssensor\";\r\n    private static readonly T_GYROSCOPE_DE: string = \"Gyroskop\";\r\n    private static readonly T_MAGNETOMETER_DE: string = \"Magnetometer\";\r\n    private diagrammData: {\r\n\r\n        datavalue: number,\r\n    }[] = [{\r\n        datavalue: 0,\r\n    }]\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        currentDataSets: [] as { dataSetID: number, rows: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[]; }[],\r\n        dataSetMetas: [] as { dataSetID: number, dataSetName: string; }[]\r\n        //testDataSet: [] as { dataSetID: number, rows: { sensorType: number, datapoint: { value: number[], relativeTime: number }[] }[] }[],\r\n    };\r\n\r\n    /**\r\n     * Status für diese Komponente\r\n     */\r\n    state = {\r\n        showDiagramIndex: 0,\r\n        diagramList: [] as any[],\r\n        diagrammData: {\r\n            lineLabels: [] as any[],\r\n            sensorRow: [] as any[],\r\n            datavalue: [] as any[],\r\n            time: [] as any[],\r\n\r\n        },\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)']\r\n    };\r\n\r\n    /**\r\n     * Nach Klicken auf Diagram das Zeigendiagram wechseln\r\n     * @param diagram gewählte Diagram\r\n     * @param index Diagramindex\r\n     */\r\n    handleClick = (diagram: any, index: any) => {\r\n        this.setState({ showDiagramIndex: index });\r\n    };\r\n\r\n    /**\r\n     * Diagram erstellen\r\n     * @param dataSet Datensätze für Diagram\r\n     */\r\n    updateDiagramm(dataSet: { dataSetID: number; rows: any[]; }, index: number) {\r\n        let diagrammData = this.state.diagrammData;\r\n        diagrammData.sensorRow = [];\r\n        diagrammData.datavalue = [];\r\n        diagrammData.time = [];\r\n        this.state.diagrammData = diagrammData;\r\n        var datavalues = [];\r\n        for (var i = 0; i < dataSet.rows.length; i++) {\r\n            this.state.diagrammData.sensorRow.push(dataSet.rows[i].sensorType);\r\n            for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                for (var j = 0; j < dataSet.rows[i].datapoint.length; j++) {\r\n                    datavalues.push(dataSet.rows[i].datapoint[j].value[dataCoordinate]);\r\n                }\r\n                this.state.diagrammData.datavalue.push(datavalues);\r\n                datavalues = [];\r\n            }\r\n        }\r\n        for (var j = 0; j < dataSet.rows[0].datapoint.length; j++) {\r\n            this.state.diagrammData.time.push(dataSet.rows[0].datapoint[j].relativeTime);\r\n        }\r\n\r\n        var newDatasets = [];\r\n        var lineLabels = [];\r\n        for (var i = 0; i < this.state.diagrammData.sensorRow.length * 3; i++) {\r\n            var coordinate = \".X\";\r\n            var sensor = this.state.diagrammData.sensorRow[(i / 3) | 0];\r\n            var sensorName = '';\r\n            switch (sensor) {\r\n                case 2:\r\n                    sensorName = DiagramList.T_ACCELEROMETER_DE;\r\n                    break;\r\n                case 3:\r\n                    sensorName = DiagramList.T_GYROSCOPE_DE;\r\n                    break;\r\n                case 4:\r\n                    sensorName = DiagramList.T_MAGNETOMETER_DE;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            // eslint-disable-next-line\r\n            if (i % 3 == 1) {\r\n                coordinate = \".Y\";\r\n            }\r\n            // eslint-disable-next-line\r\n            if (i % 3 == 2) {\r\n                coordinate = \".Z\";\r\n            }\r\n\r\n            let color: CSSProperties = { \"color\": this.state.csscolor[i] };\r\n            lineLabels.push(<span style={color}>■{sensorName + coordinate}<br /></span>);\r\n            //this.setState({ lineLabels: lineLabels })\r\n            newDatasets.push(\r\n                {\r\n                    label: sensor + coordinate,\r\n                    strokeColor: this.state.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.diagrammData.datavalue[i],\r\n                }\r\n            );\r\n        }\r\n        const data = {\r\n            labels: this.state.diagrammData.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: true,\r\n            pointDot: false,\r\n        };\r\n        const newList = this.state.diagramList;\r\n        const id = dataSet.dataSetID;\r\n        if(newList[index] !== undefined) {\r\n        newList[index] = { dataSetID: id, lineLabels: lineLabels, data: data, options: options };\r\n        } else {\r\n            newList.push({ dataSetID: id, lineLabels: lineLabels, data: data, options: options })\r\n        }\r\n        this.state.diagramList = newList;\r\n        this.diagrammData[index].datavalue = this.props.currentDataSets[index].rows[0].datapoint.length\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n\r\n        //jede Diagram nur einmal zeigen,und nur erneut mit neue Data\r\n        // eslint-disable-next-line\r\n        this.props.currentDataSets?.map((dataSet, index) => {\r\n            var flag = false;\r\n            // eslint-disable-next-line\r\n            this.state.diagramList.map((diagram, index2) => {\r\n                console.log(this.props.currentDataSets[index2].rows.length)\r\n                if (diagram.dataSetID === dataSet.dataSetID) {\r\n                    if (this.diagrammData[index2] !== undefined && this.diagrammData[index2].datavalue != this.props.currentDataSets[index2].rows[0].datapoint.length) {\r\n                        this.updateDiagramm(dataSet, index2);\r\n                        this.diagrammData[index2].datavalue = this.props.currentDataSets[index].rows[0].datapoint.length\r\n                    }\r\n                        flag = true;\r\n                        return diagram;\r\n                }\r\n            });\r\n            if (flag) { return dataSet; }\r\n            else { \r\n                this.diagrammData.push({datavalue: 0})\r\n                this.updateDiagramm(dataSet, index); \r\n            }\r\n        });\r\n        return (\r\n            <div className=\"view-section\">\r\n                {this.state.diagramList.map((diagram, index) => {\r\n                    let datasetname = \"Null\";\r\n                    this.props.dataSetMetas.forEach(dataset => {\r\n                        if (dataset.dataSetID === diagram.dataSetID) {\r\n                            datasetname = dataset.dataSetName;\r\n                        }\r\n                    });\r\n                    return (\r\n                        <div key={index} className=\"view-section\">\r\n                            <div className=\"diagramTop\" id={index.toString()}>\r\n                                <h5 className=\"datasetName\">{datasetname}</h5>\r\n                                {diagram.lineLabels}\r\n                            </div>\r\n                            <div className=\"diagramList\">\r\n                                <LineChart data={diagram.data} options={diagram.options} width={document.documentElement.clientWidth * 0.98} height={320} />\r\n                            </div>\r\n                        </div>\r\n                        );\r\n                    })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { IState, States } from '../State';\r\nimport FinishButton from '../../components/VisualizationComponents/FinishButton';\r\nimport DiagramList from '../../components/VisualizationComponents/DiagramList';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n//Visualisierungsseite\r\nexport class VisualizationPage implements Page {\r\n    private state: IState\r\n    private observers: PageController[] = [];\r\n\r\n    private static readonly PAGE_TITLE = \"Projektvisualisierung\"\r\n\r\n    /**\r\n    * Konstruktor der Visualisierungsseite.\r\n    */\r\n    constructor() {\r\n        this.state = new State()\r\n        this.update()\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Visualisierungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    update(): void {\r\n        this.notify()\r\n        const VDOM = (\r\n            <div className=\"visualizationpage\">\r\n                <h2 className='title'>{VisualizationPage.PAGE_TITLE}</h2>\r\n                <FinishButton pageChangeToCreation={this.changetoCreation.bind(this)} />\r\n                <DiagramList currentDataSets={this.state.currentDataSets! }\r\n                dataSetMetas = {this.state.dataSetMetas!}\r\n                //   testDataSet={this.state.testDataSet!}\r\n                />\r\n                <NotificationContainer />\r\n            </div>\r\n        );\r\n        if (document.getElementById('root') !== null) {\r\n            ReactDOM.render(VDOM, document.getElementById('root'));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach(observer: PageController): void {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach(observer: PageController): void {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify(): void {\r\n        for (const observer of this.observers) {\r\n            observer.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    getState(): IState {\r\n        return this.state;\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    setState(state: IState): void {\r\n        this.state = state;\r\n        this.update()\r\n    }\r\n\r\n    /**\r\n     * Wechsel der Seite zur Modellerstellungsseite.\r\n     */\r\n    private changetoCreation(): void {\r\n        this.state.currentState = States.ChangeToCreation\r\n        this.notify()\r\n    }\r\n}\r\n","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n\r\n  dataSetMetas?: { dataSetID: number; dataSetName: string; }[] = [];\r\n  trainingParameter?: {\r\n    dataSets: number[],\r\n    imputator: string,\r\n    classifier: string,\r\n    scaler: string,\r\n    features: string[]\r\n    trainingDataPercentage?: number, // optional\r\n    slidingWindowSize?: number,      // optional\r\n    slidingWindowStep?: number;        // optional\r\n  } = { dataSets: [], imputator: \"\", classifier: '', scaler: '', features: [] };\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport NewWindow from 'react-new-window';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport './Train.css';\r\nexport default class Train extends Component {\r\n\tprivate static readonly T_IMPUTER_MEAN_DE: string = \"Arithmetischer Mittelwert\";\r\n\tprivate static readonly T_SCALER_STANDARD_DE: string = \"Standard Scaler\";\r\n\tprivate static readonly T_SCALER_ROBUST_DE: string = \"Robust Scaler\";\r\n\tprivate static readonly T_SCALER_MIN_MAX_DE: string = \"Min-Max Scaler\";\r\n\tprivate static readonly T_SCALER_NORMALIZER_DE: string = \"Normalizer\";\r\n\tprivate static readonly T_FEATURE_MIN_DE: string = \"Minimum\";\r\n\tprivate static readonly T_FEATURE_MAX_DE: string = \"Maximum\";\r\n\tprivate static readonly T_FEATURE_VARIANCE_DE: string = \"Varianz\";\r\n\tprivate static readonly T_FEATURE_ENERGY_DE: string = \"Energie\";\r\n\tprivate static readonly T_FEATURE_FOURIER_TRANSFORM_DE: string = \"Fourier-Transformation\";\r\n\tprivate static readonly T_FEATURE_MEAN_DE: string = \"Mittelwert\";\r\n\tprivate static readonly T_FEATURE_AUTOREGRESSIVE_DE: string = \"Autoregression\";\r\n\tprivate static readonly T_FEATURE_SKEWNESS_DE: string = \"Abweichung\";\r\n\tprivate static readonly T_FEATURE_KURTOSIS_DE: string = \"Wölbung\";\r\n\tprivate static readonly T_FEATURE_IQR_DE: string = \"Quantil-Regression\";\r\n\tprivate static readonly T_CLASSIFIER_MLP_DE: string = \"Multi-Level-Perceptron (Neurales Netz)\";\r\n\tprivate static readonly T_CLASSIFIER_RANDOM_FOREST_DE: string = \"Random-Forest-Klassifizierer\";\r\n\tprivate static readonly T_CLASSIFIER_K_NEIGHBORS_DE: string = \"K-nächster-Nachbar-Methode\";\r\n\tprivate static readonly T_CLASSIFIER_SVM_DE: string = \"Stützvektor-Maschine\";\r\n\tprivate static readonly E_IMPUTER_MULTI_SELECTION_DE: string = \"Es darf nur ein Imputer ausgewählt werden.\";\r\n\tprivate static readonly E_SCALER_MULTI_SELECTION_DE: string = \"Es darf nur ein Scaler ausgewählt werden.\";\r\n\tprivate static readonly E_CLASSIFIER_MULTI_SELECTION_DE: string = \"Es darf nur ein Klassifizierer ausgewählt werden.\";\r\n\tprivate static readonly E_DATASET_NO_SELECTION_DE: string = \"Kein Datensatz ausgewählt!\";\r\n\tprivate static readonly E_IMPUTER_NO_SELECTION_DE: string = \"Kein Imputer ausgewählt!\";\r\n\tprivate static readonly E_SCALER_NO_SELECTION_DE: string = \"Kein Scaler ausgewählt!\";\r\n\tprivate static readonly E_FEATURE_NO_SELECTION_DE: string = \"Keine Merkmale zur Extraktion ausgewählt!\";\r\n\tprivate static readonly E_CLASSIFIER_NO_SELECTION_DE: string = \"Kein Klassifizierer ausgewählt!\";\r\n\tprivate static readonly T_DATASET_TITLE_DE: string = \"Verwendete Datensätze\";\r\n\tprivate static readonly T_IMPUTER_TITLE_DE: string = \"Imputation\";\r\n\tprivate static readonly T_SCALER_TITLE_DE: string = \"Normalisierung (Scaling)\";\r\n\tprivate static readonly T_FEATURE_TITLE_DE: string = \"Merkmalsextraktion\";\r\n\tprivate static readonly T_CLASSIFIER_TITLE_DE: string = \"Klassifizierer\";\r\n\tprivate static readonly T_BUTTON_START_DE: string = \"KI-Modell trainieren\";\r\n\tprivate static readonly T_BUTTON_HOME_DE: string = \"Zurück zur Verweisseite\";\r\n\tprivate static readonly T_DATASET_CHOOSEALL_DE: string = \"Alle Datensätze wählen\";\r\n\tprivate static readonly T_FEATURE_CHOOSEALL_DE: string = \"Alle Merkmale wählen\";\r\n\r\n\r\n\t/**\r\n\t * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n\t */\r\n\tprops = {\r\n\t\tdataSetMetas: [] as { dataSetID: number, dataSetName: string; }[],\r\n\t\ttrain: function (dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[]) { },\r\n\t\tchangeToReferring: function () { }\r\n\t};\r\n\r\n\t/**\r\n\t * Status für diese Komponente\r\n\t */\r\n\tstate = {\r\n\t\tvalue: '' as string,\r\n\t\tdataSets: [] as number[],\r\n\t\timputators: [\r\n\t\t\t{ name: Train.T_IMPUTER_MEAN_DE, checked: true, tag: 'MEAN' },\r\n\t\t\t/*\t\t\tNOT IMPLEMENTED\r\n\t\t\t{ name: \"Letze Werte fortführen\", checked: false, tag: 'FORWARD' },\r\n\t\t\t{ name: \"Bewegter Durchschnitt\",  checked: false, tag: 'MOVING'  },\r\n\t\t\t{ name: \"Lineare Interpolation\",  checked: false, tag: 'LINEAR'  },\r\n\t\t\t{ name: \"Spline Interpolation\",   checked: false, tag: 'SPLINE'  }*/\r\n\t\t],\r\n\t\tscalers: [\r\n\t\t\t{ name: Train.T_SCALER_STANDARD_DE, checked: false, tag: 'STANDARD' },\r\n\t\t\t{ name: Train.T_SCALER_ROBUST_DE, checked: false, tag: 'ROBUST' },\r\n\t\t\t{ name: Train.T_SCALER_MIN_MAX_DE, checked: false, tag: 'MIN_MAX' },\r\n\t\t\t{ name: Train.T_SCALER_NORMALIZER_DE, checked: false, tag: 'NORMALIZER' },\r\n\t\t\t/*\t{ name: \"Anteilstransformator\",       checked: false, tag: 'SHARE'      }\tNOT IMPLEMENTED */\r\n\t\t],\r\n\t\tmyfeatures: [\r\n\t\t\t{ name: Train.T_FEATURE_MIN_DE, checked: false, tag: 'MIN' },\r\n\t\t\t{ name: Train.T_FEATURE_MAX_DE, checked: false, tag: 'MAX' },\r\n\t\t\t{ name: Train.T_FEATURE_VARIANCE_DE, checked: false, tag: 'VARIANCE' },\r\n\t\t\t{ name: Train.T_FEATURE_ENERGY_DE, checked: false, tag: 'ENERGY' },\r\n\t\t\t{ name: Train.T_FEATURE_FOURIER_TRANSFORM_DE, checked: false, tag: 'FOURIER_TRANSFORM' },\r\n\t\t\t{ name: Train.T_FEATURE_MEAN_DE, checked: false, tag: 'MEAN' },\r\n\t\t\t{ name: Train.T_FEATURE_AUTOREGRESSIVE_DE, checked: false, tag: 'AUTOREGRESSIVE' },\r\n\t\t\t{ name: Train.T_FEATURE_SKEWNESS_DE, checked: false, tag: 'SKEWNESS' },\r\n\t\t\t{ name: Train.T_FEATURE_KURTOSIS_DE, checked: false, tag: \"KURTOSIS\" },\r\n\t\t\t{ name: Train.T_FEATURE_IQR_DE, checked: false, tag: \"IQR\" }\r\n\t\t],\r\n\t\tclassifiers: [\r\n\t\t\t{ name: Train.T_CLASSIFIER_MLP_DE, checked: false, tag: 'MLP' },\r\n\t\t\t{ name: Train.T_CLASSIFIER_RANDOM_FOREST_DE, checked: false, tag: 'RANDOM_FOREST' },\r\n\t\t\t{ name: Train.T_CLASSIFIER_K_NEIGHBORS_DE, checked: false, tag: 'K_NEIGHOBORS' },\r\n\t\t\t{ name: Train.T_CLASSIFIER_SVM_DE, checked: false, tag: 'SVM' }\r\n\t\t],\r\n\t\tchosenScaler: 0,\r\n\t\tchosenclassifier: 0,\r\n\t\tchosenImputator: 0,\r\n\t\tchooseDataSetsFlag: false,\r\n\t\tchooseFeatureFlag: false\r\n\t};\r\n\r\n\t/**\r\n\t * Diese Methode fertigt das Ereignis ab, das ausgelöst wird, wenn eine der Datensatz-Checkboxen angeklickt wird.\r\n\t * @param id Datasetindex\r\n\t */\r\n\thandleDataset = (id: number): void => {\r\n\t\tlet dataSets = this.state.dataSets;\r\n\t\tif (dataSets.includes(id)) {\r\n\t\t\tthis.setState({ dataSets: dataSets.filter(value => value != id) });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataSets.push(id)\r\n\t\t\tthis.setState({ dataSets: dataSets});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Choose all Dataset\r\n\t * @param e InputEvent\r\n\t */\r\n\tchosenAllDatasets = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n\t\tconst chosen = e.target.checked;\r\n\t\tconst newflag = !(this.state.chooseDataSetsFlag);\r\n\t\tif(chosen) {\r\n\t\t\tthis.setState({ dataSets: this.props.dataSetMetas.map(dataSet => dataSet.dataSetID), chooseDataSetsFlag: newflag });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setState({dataSets: [], chooseDataSetsFlag: newflag})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check Imputation\r\n\t * @param index Imputationindex\r\n\t * @returns \r\n\t */\r\n\thandleImputation = (index: number): void => {\r\n\t\tlet newList = [...this.state.imputators];\r\n\t\tlet newChosen = this.state.chosenImputator;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenImputator: newChosen, imputators: newList });\r\n\t\t} else {\r\n\t\t\tNotificationManager.error(Train.E_IMPUTER_MULTI_SELECTION_DE, \"\", 3000);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Check Scaler\r\n\t * @param index Scalerindex \r\n\t * @returns \r\n\t */\r\n\thandleScaler = (index: number): void => {\r\n\t\tlet newList = [...this.state.scalers];\r\n\t\tlet newChosen = this.state.chosenScaler;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenScaler: newChosen, scalers: newList });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNotificationManager.error(Train.E_SCALER_MULTI_SELECTION_DE, \"\", 3000);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Check Extraction\r\n\t * @param index Extractionindex\r\n\t */\r\n\thandleExtraction = (index: number): void => {\r\n\t\tlet newList = [...this.state.myfeatures];\r\n\t\tnewList[index].checked = !newList[index].checked;\r\n\t\tthis.setState({ features: newList });\r\n\t};\r\n\r\n\t/**\r\n\t * Choose all Extraction\r\n\t * @param e InputEvent\r\n\t */\r\n\tchosenAllExtraction = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n\t\tconst checked = e.target.checked;\r\n\t\tconst { myfeatures, chooseFeatureFlag } = this.state;\r\n\t\tconst newflag = !chooseFeatureFlag\r\n\t\tconst newList = myfeatures.map(myfeature => { return { ...myfeature, checked }; });\r\n\t\tthis.setState({ myfeatures: newList, chooseFeatureFlag: newflag })\r\n\t}\r\n\r\n\t/**\r\n\t * Check Classifier\r\n\t * @param index Classifierindex\r\n\t * @returns \r\n\t */\r\n\thandleClassifier = (index: number): void => {\r\n\t\tlet newList = [...this.state.classifiers];\r\n\t\tlet newChosen = this.state.chosenclassifier;\r\n\t\tif (newList[index].checked) { newChosen--; }\r\n\t\telse { newChosen++; }\r\n\t\tif (newChosen <= 1) {\r\n\t\t\tnewList[index].checked = !newList[index].checked;\r\n\t\t\tthis.setState({ chosenclassifier: newChosen, classifiers: newList });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNotificationManager.error(Train.E_CLASSIFIER_MULTI_SELECTION_DE, \"\", 3000);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Trainieren Methode\r\n\t * @returns \r\n\t */\r\n\thandleTrain = (): void => {\r\n\t\tlet imputator = \"\", classifier = '', scaler = '', features: string[] = [];\r\n\t\tconst { dataSets, imputators, classifiers, scalers, myfeatures } = this.state;\r\n\t\tlet imputatorsflag = true, classifiersflag = true, scalersflag = true, featuresflag = true, nochoice = false;\r\n\t\timputators.map((imputatorObj) => {\r\n\t\t\tif (imputatorObj.checked) {\r\n\t\t\t\timputatorsflag = false;\r\n\t\t\t\timputator = imputatorObj.tag;\r\n\t\t\t}\r\n\t\t\treturn imputatorObj;\r\n\t\t});\r\n\t\tclassifiers.map((classifierObj) => {\r\n\t\t\tif (classifierObj.checked) {\r\n\t\t\t\tclassifiersflag = false;\r\n\t\t\t\tclassifier = classifierObj.tag;\r\n\t\t\t}\r\n\t\t\treturn classifierObj;\r\n\t\t});\r\n\t\tscalers.map((scalerObj) => {\r\n\t\t\tif (scalerObj.checked) {\r\n\t\t\t\tscalersflag = false;\r\n\t\t\t\tscaler = scalerObj.tag;\r\n\t\t\t}\r\n\t\t\treturn scalerObj;\r\n\t\t});\r\n\t\tmyfeatures.map((featureObj) => {\r\n\t\t\tif (featureObj.checked) {\r\n\t\t\t\tfeaturesflag = false;\r\n\t\t\t\tfeatures.push(featureObj.tag);\r\n\t\t\t}\r\n\t\t\treturn featureObj;\r\n\t\t});\r\n\t\tif (dataSets.length == 0) {\r\n\t\t\tNotificationManager.error(Train.E_DATASET_NO_SELECTION_DE, \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (imputatorsflag) {\r\n\t\t\tNotificationManager.error(Train.E_IMPUTER_NO_SELECTION_DE, \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (classifiersflag) {\r\n\t\t\tNotificationManager.error(Train.E_CLASSIFIER_NO_SELECTION_DE, \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (scalersflag) {\r\n\t\t\tNotificationManager.error(Train.E_SCALER_NO_SELECTION_DE, \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (featuresflag) {\r\n\t\t\tNotificationManager.error(Train.E_FEATURE_NO_SELECTION_DE, \"\", 3000);\r\n\t\t\tnochoice = true;\r\n\t\t}\r\n\t\tif (nochoice) return;\r\n\t\tthis.props.train(dataSets, imputator, classifier, scaler, features);\r\n\t};\r\n\r\n\t/**\r\n\t * Wechseln zu Darstellungsseite\r\n\t */\r\n\thandleChangePage() {\r\n\t\tthis.props.changeToReferring();\r\n\t}\r\n\r\n\t/**\r\n\t * Render Methode des Komponenten\r\n\t * @returns Aufbau des Komponenten\r\n\t */\r\n\trender(): JSX.Element {\r\n\t\tconst { imputators, scalers, myfeatures, classifiers, chooseDataSetsFlag, chooseFeatureFlag } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"train view-section\">\r\n\t\t\t\t<div className=\"view-section\">\r\n\t\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t\t<h3 className=\"text\">{Train.T_DATASET_TITLE_DE}</h3>\r\n\t\t\t\t\t\t{this.props.dataSetMetas.map((dataSet, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t<input className='datasetscheck' type=\"checkbox\" id={\"D\" + index.toString()} value={index} checked={this.state.dataSets.includes(dataSet.dataSetID)} onChange={() => this.handleDataset(dataSet.dataSetID)} />\r\n\t\t\t\t\t\t\t\t\t<label htmlFor={\"D\" + index.toString()}>{dataSet.dataSetName}</label>\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t<input className='chooseall' type=\"checkbox\" id={\"D\"} onChange={this.chosenAllDatasets} checked={chooseDataSetsFlag} />\r\n\t\t\t\t\t\t<label htmlFor={\"D\"}>{Train.T_DATASET_CHOOSEALL_DE}</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t\t<div className=\"imputationlist\">\r\n\t\t\t\t\t\t\t<h3 className=\"text\">{Train.T_IMPUTER_TITLE_DE}</h3>\r\n\t\t\t\t\t\t\t{imputators.map((imputator, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t\t<input className='imputationcheck' type=\"checkbox\" id={\"I\" + index.toString()} value={index} checked={imputator.checked} onChange={() => this.handleImputation(index)} />\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={\"I\" + index.toString()}>{imputator.name}</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"scalerlist\">\r\n\t\t\t\t\t\t\t<h3 className=\"text\">{Train.T_SCALER_TITLE_DE}</h3>\r\n\t\t\t\t\t\t\t{scalers.map((scaler, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t\t<input className='scalercheck' type=\"checkbox\" id={\"S\" + index.toString()} value={index} checked={scaler.checked} onChange={() => this.handleScaler(index)} />\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={\"S\" + index.toString()}>{scaler.name}</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"classifierlist\">\r\n\t\t\t\t\t\t\t<h3 className=\"text\">{Train.T_CLASSIFIER_TITLE_DE}</h3>\r\n\t\t\t\t\t\t\t{classifiers.map((classifier, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t\t<input className='classifiercheck' type=\"checkbox\" id={\"C\" + index.toString()} value={index} checked={classifier.checked} onChange={() => this.handleClassifier(index)} />\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={\"C\" + index.toString()}>{classifier.name}</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t\t<div className=\"extractionlist\">\r\n\t\t\t\t\t\t\t<h3 className=\"text\">{Train.T_FEATURE_TITLE_DE}</h3>\r\n\t\t\t\t\t\t\t{myfeatures.map((extraction, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t\t\t\t<input className='featurecheck' type=\"checkbox\" id={\"F\" + index.toString()} value={index} checked={extraction.checked} onChange={() => this.handleExtraction(index)} />\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor={\"F\" + index.toString()}>{extraction.name}</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<input className='chooseall' type=\"checkbox\" id={\"F\"} onChange={this.chosenAllExtraction} checked={chooseFeatureFlag} />\r\n\t\t\t\t\t\t\t<label htmlFor={\"F\"}>{Train.T_FEATURE_CHOOSEALL_DE}</label>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"clearfloat\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"view-section\">\r\n\t\t\t\t\t<button onClick={() => this.handleTrain()} className=\"train-btn\" type='button' >{Train.T_BUTTON_START_DE}</button>\r\n\t\t\t\t\t<button onClick={() => this.handleChangePage()} className=\"changepage-btn\" type='button' >{Train.T_BUTTON_HOME_DE}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport './ModelCreationPage.css';\r\nimport { States } from '../State';\r\nimport Train from '../../components/ModelCreationComponents/Train';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n//Modellerstellungsseite\r\nexport class ModelCreationPage implements Page {\r\n\tprivate state: State;\r\n\tprivate observers: PageController[] = [];\r\n\r\n\tprivate static readonly T_PAGE_TITLE_DE = \"Modellerstellung\"\r\n\r\n\t/**\r\n\t* Konstruktor der Modellerstellungsseite.\r\n\t*/\r\n\tconstructor() {\r\n\t\tthis.state = new State();\r\n\t\tthis.update()\r\n\t}\r\n\r\n\t/**\r\n\t* Update Methode der Modellerstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n\t* Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n\t* Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n\t*/\r\n\tupdate() {\r\n\t\tthis.notify();\r\n\t\tconst VDOM = (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"title\">{ModelCreationPage.T_PAGE_TITLE_DE}</h1>\r\n\t\t\t\t<Train\r\n\t\t\t\t\tdataSetMetas={this.state.dataSetMetas!}\r\n\t\t\t\t\ttrain={this.train.bind(this)}\r\n\t\t\t\t\tchangeToReferring={this.changeToReferring.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<NotificationContainer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t\tif (document.getElementById('root') !== null) {\r\n\t\t\tReactDOM.render(VDOM, document.getElementById('root'));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t* Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n\t* @param oberver neuer Beobachter\r\n\t*/\r\n\tattach(observer: PageController) {\r\n\t\tthis.observers.push(observer);\r\n\t}\r\n\r\n\t/**\r\n\t* Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n\t* @param oberver Beobachter der zu entfernen ist\r\n\t*/\r\n\tdetach(observer: PageController) {\r\n\t\tconst index = this.observers.indexOf(observer, 0);\r\n\t\tif (index > -1) {\r\n\t\t\tthis.observers.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n\t*/\r\n\tnotify() {\r\n\t\tfor (let index = 0; index < this.observers.length; index++) {\r\n\t\t\tconst element = this.observers[index];\r\n\t\t\telement.update();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Gibt den Status der Seite zurück\r\n\t*/\r\n\tgetState() {\r\n\t\treturn this.state;\r\n\t}\r\n\r\n\t/**\r\n\t * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n\t * @param state neuer Zustand für die Seite\r\n\t */\r\n\tsetState(state: any) {\r\n\t\tthis.state = state;\r\n\t\tthis.update();\r\n\t}\r\n\r\n\t/**\r\n\t * Trainierung\r\n\t * @param dataSets               - Die zum Training zu verwendenden Datensätze.\r\n\t * @param imputator              - Der zur Vervollständigung der Daten zu verwendende Imputer.\r\n\t * @param classifier             - Der Klassifizierer, der das Herzstück des zu erstellenden KI-Modells darstellt.\r\n\t * @param scaler                 - Der Scaler, der die Daten für den Klassifizierer aufbereitet.\r\n\t * @param features               - Die Merkmale, die aus den gegebenen Datensätzen herausgearbeitet werden sollen.\r\n\t */\r\n\tprivate train(dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[]) {\r\n\t\tthis.state.currentState = States.NeedKiTraining;\r\n\t\tthis.state.trainingParameter!.dataSets = dataSets;\r\n\t\tthis.state.trainingParameter!.imputator = imputator;\r\n\t\tthis.state.trainingParameter!.classifier = classifier;\r\n\t\tthis.state.trainingParameter!.scaler = scaler;\r\n\t\tthis.state.trainingParameter!.features = features;\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\t/**\r\n\t * Wechsel der Seite zur Darstellungsseite.\r\n\t */\r\n\tprivate changeToReferring() {\r\n\t\tthis.state.currentState = States.ChangeToRefferring\r\n\t\tthis.notify()\r\n\t}\r\n}\r\n","import { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { ModelCreationPage } from \"../view/pages/ModelCreationPage/index\";\r\nimport { RefferingController } from './ReferringController';\r\n/**\r\n* Controller welcher die Modellerstellung behandelt\r\n*/\r\nexport class ModelCreationController implements PageController {\r\n    /**\r\n    * Seite welche gerade von dem Controller verwaltet wird\r\n    */\r\n    private page: Page;\r\n    /**\r\n    * Status der Seite\r\n    */\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor () {\r\n        this.page = new ModelCreationPage();\r\n        this.page.attach( this );\r\n        this.state = this.page.getState();\r\n        this.state.dataSetMetas! = MainController.getInstance().getFacade().getDataSetMetas();\r\n        this.page.setState( this.state );\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update () {\r\n        this.state = this.page.getState();\r\n        switch ( this.state.currentState ) {\r\n            case States.NeedKiTraining:\r\n                this.startTraining();\r\n                break;\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage( this.state.messages )!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState( this.state );\r\n                break;\r\n            case States.ChangeToRefferring:\r\n                MainController.getInstance().changeTo( new RefferingController( true ) );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Startet das Training mit den ausgewählten Einstellungen in der View. \r\n    * Holt sich aus den ausgewählten Datensätzen die benutzten Sensoren.\r\n    */\r\n    private startTraining () {\r\n        const params = this.state.trainingParameter!;\r\n        if ( params.slidingWindowStep === undefined && params.slidingWindowSize === undefined && params.trainingDataPercentage === undefined ) {\r\n            MainController.getInstance().getFacade().applyModel( params.dataSets, params.imputator, params.classifier, params.scaler, params.features );\r\n        }\r\n        else if ( params.slidingWindowStep === undefined && params.slidingWindowSize === undefined ) {\r\n            MainController.getInstance().getFacade().applyModel( params.dataSets, params.imputator, params.classifier, params.scaler, params.features, params.trainingDataPercentage );\r\n        }\r\n        else if ( params.slidingWindowStep === undefined ) {\r\n            MainController.getInstance().getFacade().applyModel( params.dataSets, params.imputator, params.classifier, params.scaler, params.features, params.trainingDataPercentage, params.slidingWindowSize );\r\n        }\r\n        else {\r\n            MainController.getInstance().getFacade().applyModel( params.dataSets, params.imputator, params.classifier, params.scaler, params.features, params.trainingDataPercentage, params.slidingWindowSize, params.slidingWindowStep );\r\n        }\r\n    }\r\n}","import { PageController } from \"./PageController\";\r\nimport { VisualizationPage } from \"../view/pages/VisualizationPage/index\";\r\nimport { MainController } from \"./MainController\";\r\nimport { ModelCreationController } from \"./ModelCreationController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\n\r\nexport class VisualizationController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor(currentProject: { projectID: number, projectName: string, AIModelID: number[]; }) {\r\n        this.page = new VisualizationPage();\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.state.currentProject = currentProject;\r\n        this.SetDataRows();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage(this.state.messages)!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState(this.state);\r\n                break;\r\n            case States.ChangeToCreation:\r\n                MainController.getInstance().changeTo(new ModelCreationController());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Übergibt der Seite alle Datenreihen die verfügbar sind. Dies wird Alle drei Sekunden wiederholt bis der Seitenzustand auf\r\n    * ChangeToCreation wechselt.\r\n    */\r\n    private SetDataRows() {\r\n        this.state.dataSetMetas = MainController.getInstance().getFacade().getDataSetMetas();\r\n        MainController.getInstance().getFacade().loadProject(this.state.currentProject!.projectID);\r\n        var dataSets = MainController.getInstance().getFacade().getDataSetMetas();\r\n        this.state.currentDataSets! = [];\r\n        for (let index = 0; index < dataSets.length; index++) {\r\n            let data = MainController.getInstance().getFacade().getDataRows(dataSets[index].dataSetID).dataRows;\r\n            this.state.currentDataSets!.push({ dataSetID: dataSets[index].dataSetID, rows: data });\r\n            this.page.setState(this.state);\r\n        }\r\n        this.state.currentState = States.SetDataRows;\r\n        this.page.setState(this.state);\r\n        this.state = this.page.getState();\r\n\r\n        let intervalId = setInterval(() => {\r\n\r\n            if (this.state.currentState === States.ChangeToCreation) {\r\n                clearInterval(intervalId);\r\n                return;\r\n            }\r\n            this.state.dataSetMetas = MainController.getInstance().getFacade().getDataSetMetas();\r\n            MainController.getInstance().getFacade().loadProject(this.state.currentProject!.projectID);\r\n            var dataSets = MainController.getInstance().getFacade().getDataSetMetas();\r\n            this.state.currentDataSets! = [];\r\n            for (let index = 0; index < dataSets.length; index++) {\r\n                let data = MainController.getInstance().getFacade().getDataRows(dataSets[index].dataSetID).dataRows;\r\n                this.state.currentDataSets!.push({ dataSetID: dataSets[index].dataSetID, rows: data });\r\n            }\r\n            this.state.currentState = States.SetDataRows;\r\n            this.page.setState(this.state);\r\n            this.state = this.page.getState();\r\n        }, 2021);\r\n    }\r\n}","import React from 'react';\r\nimport { MainController } from '../../../../controller/MainController';\r\nimport './ConstantsText.css';\r\n\r\n/**\r\n * Überschrift\r\n */\r\nexport default class ConstantsText extends React.Component {\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        console.log(MainController.getInstance().getText()!.title);\r\n        return (\r\n            <div>\r\n                <h1 className='explorerTitle'>{MainController.getInstance().getText().title}</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n/**\r\n * QR-Code\r\n */\r\nexport default class QRImage extends Component {\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        qr: ''\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <div className=\"qr-code\">\r\n                <img src={this.props.qr} alt=\"qrcode\" style={{ width: 'auto' }} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"./linkText.css\"\r\n\r\n/**\r\n * Linktext für Verbindung\r\n */\r\nexport default class LinkText extends Component {\r\n    private static readonly T_LINK_DESCRIPTION_DE: string = \"Bitte scannen Sie den QR-Code oder folgen Sie dem Link, um Daten zu erfassen\";\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        link: ''\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <div className=\"linktext\">\r\n                <p className=\"text\">\r\n                    {LinkText.T_LINK_DESCRIPTION_DE}\r\n                    <br />\r\n                    <a className=\"text\" href={this.props.link} type='link'>{this.props.link}</a>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { Component } from 'react';\r\n\r\n/**\r\n * Stellt die funktion eines Knopfes zum wechsel auf die Visualisierungsseite dar\r\n */\r\nexport default class ChangeToVisuBtn extends Component {\r\n    private static readonly T_BUTTON_NEXT_DE: string = \"Zur Visualisierungsseite\"\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        pageChangeToVisu: function () { }\r\n    };\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <div className=\"view-section\">\r\n                <button onClick={() => this.props.pageChangeToVisu()} className=\"ctv-btn\" type=\"button\" >{ChangeToVisuBtn.T_BUTTON_NEXT_DE}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport QRImage from '../QRImage';\r\nimport LinkText from '../LinkText';\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\n\r\n/**\r\n * Knopf für neues Projekt\r\n */\r\nexport default class NewProjectButton extends Component {\r\n\r\n  /**\r\n  * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n  */\r\n  props = {\r\n    pageNewProject: function (projectName: string) { },\r\n    pageChangeToVisu: function () { },\r\n    disabled: true,\r\n    qr: '',\r\n    link: ''\r\n  }\r\n\r\n  /**\r\n   * Status für diese Komponente\r\n   */\r\n  state = {\r\n    click: false,\r\n    projectName: '',\r\n  };\r\n\r\n  /**\r\n   * Eingabefeld Methode\r\n   * @param e ChangeEventInput\r\n   */\r\n  changeProjectName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      projectName: e.target.value\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Methode für Erstellung neues Projekts\r\n   */\r\n  handleCreate = () => {\r\n    this.setState({ click: true });\r\n    this.props.pageNewProject(this.state.projectName)\r\n  };\r\n\r\n  /**\r\n  * Render Methode des Komponenten\r\n  * @returns Aufbau des Komponenten\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"newProject\">\r\n        <input type=\"text\" value={this.state.projectName} onChange={this.changeProjectName} placeholder='Neuen Projektnamen eingeben' disabled={this.props.disabled} />\r\n        <button onClick={() => this.handleCreate()} id=\"new\" disabled={this.props.disabled}>Neues Projekt</button>\r\n        {this.state.click ? <div> <QRImage qr={this.props.qr} /><ChangeToVisuBtn pageChangeToVisu={this.props.pageChangeToVisu} /><LinkText link={this.props.link} /></div> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\n/**\r\n * Modelliste von gewähltes Projekt\r\n */\r\nexport default class ModelList extends Component {\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        currentProject: { projectID: -1, projectName: \"null\", AIModelID: [-1] },\r\n        pageLoadModel: function (chosenmodelID: number) { }\r\n    };\r\n\r\n    /**\r\n     * Status für diese Komponente\r\n     */\r\n    state = {\r\n        chosenmodelID: -1\r\n    };\r\n\r\n    /**\r\n     * Selektieren in Modelliste\r\n     * @param e ChangeEvent\r\n     */\r\n    handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            chosenmodelID: e.target.value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Methode für Bestätigung Knopf\r\n     */\r\n    handleChoose() {\r\n        /* wait to change load model*/\r\n        if (this.state.chosenmodelID === -1) {\r\n            NotificationManager.error('Sie haben noch kein Modell gewählt!', \"\", 3000);\r\n        } else {\r\n            this.props.pageLoadModel(this.state.chosenmodelID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <section>\r\n                <label>Modell-Liste</label>\r\n                <select onChange={this.handleChange}>\r\n                    <option>Modell auswählen</option>\r\n                    {this.props.currentProject.AIModelID.map((modelObj) => {\r\n                        return <option value={modelObj} key={modelObj} >Modell{modelObj}</option>;\r\n                    })}\r\n                </select>\r\n                <button onClick={() => this.handleChoose()} className=\"btn\" >Gewähltes Modell laden (zur Auslieferungsseite)</button>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport ChangeToVisuBtn from '../ChangeToVisuBtn';\r\nimport LinkText from '../LinkText';\r\nimport ModelList from '../ModelList';\r\nimport QRImage from '../QRImage';\r\n\r\n/**\r\n * Projektliste\r\n */\r\nexport default class ProjectList extends Component {\r\n\r\n    /**\r\n     * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n     */\r\n    props = {\r\n        projectData: [{ projectID: -1, projectName: \"null\", AIModelID: [-1], }],\r\n        pageSetCurrentprojekt: function (currentProject: { projectID: number; projectName: string; AIModelID: number[]; }) { },\r\n        pageLoadModel: function (chosenmodelID: number) { },\r\n        pageLoadProjekt: function (currentProject: { projectID: number; projectName: string; AIModelID: number[]; }) { },\r\n        pageChangeToVisu: function () { },\r\n        qr: '',\r\n        link: ''\r\n    };\r\n\r\n    /**\r\n     * Status für diese Komponente\r\n     */\r\n    state = {\r\n        value: null,\r\n        click: false,\r\n        loadclick: false,\r\n        currentProject: { projectID: -1, projectName: \"\", AIModelID: [] }\r\n    };\r\n\r\n    /**\r\n     * Selektieren in Modelliste\r\n     * @param e ChangeEvent\r\n     */\r\n    private handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            value: e.target.value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Wenn es gibt, erstellt Modelliste nach Klicken\r\n     */\r\n    private handleChoose() {\r\n        if (this.state.value === null) {\r\n            NotificationManager.error(\"Sie haben noch kein Projekt gewählt\", \"\", 3000);\r\n        } else {\r\n            this.props.projectData.map((projectObj) => {\r\n                if (Number(this.state.value) === projectObj.projectID) {\r\n                    console.log(projectObj)\r\n                    if (projectObj.AIModelID.length !== 0) {\r\n                        for (let index = 0; index < this.props.projectData!.length; index++) {\r\n                            if (projectObj.projectID === this.props.projectData![index].projectID) {\r\n                                ;\r\n                                this.setState({ currentProject: projectObj });\r\n                                this.props.pageSetCurrentprojekt(projectObj);\r\n                                break;\r\n                            }\r\n                        }\r\n                        this.setState({ click: true });\r\n                    } else {\r\n                        this.setState({ click: false });\r\n                        NotificationManager.error('Es gibt noch kein KI-Modell in diesem Projekt!', \"\", 3000);\r\n                    }\r\n                }\r\n                return projectObj;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methode für Projekt laden\r\n     */\r\n    private handleLoad() {\r\n        if (this.state.value === null) {\r\n            NotificationManager.error(\"Sie haben noch kein Projekt ausgewählt\", \"\", 3000);\r\n        } else {\r\n            this.props.projectData.map((projectObj) => {\r\n                if (Number(this.state.value) === projectObj.projectID) {\r\n                    //let id: number = projectObj.projectID;\r\n                    this.props.pageLoadProjekt(projectObj);\r\n                    this.setState({ loadclick: true });\r\n                }\r\n                return projectObj;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render Methode des Komponenten\r\n     * @returns Aufbau des Komponenten\r\n     */\r\n    render() {\r\n        return (\r\n            <section className='projectlist'>\r\n                <div className=\"view-section\">\r\n                    <label>Projektliste</label>\r\n                    <select onChange={this.handleChange}>\r\n                        <option>Projekt wählen</option>\r\n                        {this.props.projectData.map(projectObj => <option value={projectObj.projectID} key={projectObj.projectID}>{projectObj.projectName}</option>)}\r\n                    </select>\r\n                    <button onClick={() => this.handleChoose()} className=\"pl-btn\" type=\"button\" >Modellliste laden</button>\r\n                    <button onClick={() => this.handleLoad()} className=\"pl-btn\" type=\"button\" >Projekt laden</button>\r\n                </div>\r\n                {this.state.loadclick ?\r\n                <div className=\"view-section\">\r\n                    <div className=\"view-section\">\r\n                        <QRImage qr={this.props.qr} />\r\n                        <LinkText link={this.props.link}/>\r\n                    </div>\r\n                    <ChangeToVisuBtn pageChangeToVisu={this.props.pageChangeToVisu} /> \r\n                </div>\r\n                 : null}\r\n                \r\n                {this.state.click ? <div className=\"view-section\"> <ModelList pageLoadModel={this.props.pageLoadModel} currentProject={this.state.currentProject} /></div> : null}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ProjectList from '../ProjectList'\r\n\r\n/**\r\n * Erstellen PrjektList Knopf\r\n */\r\nexport default class LoadModelButton extends Component {\r\n    private static readonly T_BUTTON_OPEN_LOAD_DE: string = \"Projekt und Modell wählen\";\r\n\r\n    /**\r\n    * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n    */\r\n    props = {\r\n        disabled: true,\r\n        projectData: [] as { projectID: number, projectName: string, AIModelID: number[], }[],\r\n        pageSetCurrentprojekt: function (currentProject: { projectID: number; projectName: string; AIModelID: number[]; }) { },\r\n        pageLoadModel: function (chosenmodelID: number) { },\r\n        pageLoadProjekt: function (currentProject: { projectID: number; projectName: string; AIModelID: number[]; }) { },\r\n        pageChangeToVisu: function () { },\r\n        qr: '',\r\n        link: ''\r\n    }\r\n\r\n    /**\r\n     * Status für diese Komponente\r\n     */\r\n    state = { click: false }\r\n\r\n    /**\r\n     * Erstellung von Projektliste Methode\r\n     */\r\n    handleCreate = () => {\r\n        this.setState({ click: true })\r\n    }\r\n\r\n    /**\r\n    * Render Methode des Komponenten\r\n    * @returns Aufbau des Komponenten\r\n    */\r\n    render() {\r\n        return (\r\n            <div className=\"loadProject\">\r\n                <div className=\"view-section\">\r\n                    <button onClick={() => this.handleCreate()} className=\"lp-btn\" disabled={this.props.disabled} type='button'>{LoadModelButton.T_BUTTON_OPEN_LOAD_DE}</button>\r\n                </div>\r\n                {this.state.click ? <div><ProjectList\r\n                    link={this.props.link}\r\n                    pageChangeToVisu={this.props.pageChangeToVisu}\r\n                    pageLoadProjekt={this.props.pageLoadProjekt}\r\n                    qr={this.props.qr}\r\n                    pageLoadModel={this.props.pageLoadModel}\r\n                    projectData={this.props.projectData}\r\n                    pageSetCurrentprojekt={this.props.pageSetCurrentprojekt} />\r\n                </div> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  languageCode: string = \"de\";\r\n  messages: { text: string, id: number; }[] = [];\r\n  projectData?: { projectID: number; projectName: string; AIModelID: number[]; }[] = [];\r\n  currentProject?: { projectID: number, projectName: string, AIModelID: number[]; } = { projectID: -1, projectName: \"null\", AIModelID: [] };\r\n  chosenAIModel?: number;\r\n  adminData?: { name: string, email: string, password: string; };\r\n  //minerData?:\r\n  aiUserData?: { name: string, result: string; };\r\n  labels?: { labelID: number, start: number, end: number; }[];\r\n  sessionID?: string;\r\n  //aiParameter?: \r\n  qr?: string = '';\r\n  wait?: Promise<any>;\r\n  islogedIn: boolean = false;\r\n  link?: string = '';\r\n}\r\n","import React, { Component } from 'react';\r\nimport NewWindow from \"react-new-window\";\r\nimport \"./LoginWindow.css\"\r\n\r\n/**\r\n * LoginFenster\r\n */\r\nexport default class LoginWindow extends Component {\r\n    private static readonly T_BUTTON_LOGIN_DE: string = \"Anmelden/Registrieren\";\r\n    private static readonly T_POPUP_LABEL_NAME_DE: string = \"Benutzername\";\r\n    private static readonly T_POPUP_LABEL_EMAIL_DE: string = \"E-Mail-Adresse\";\r\n    private static readonly T_POPUP_LABEL_PASSWORD_DE: string = \"Passwort\";\r\n    private static readonly T_POPUP_BUTTON_LOGIN_DE: string = \"Anmelden\";\r\n    private static readonly T_POPUP_BUTTON_REGISTER_DE: string = \"Registrieren\";\r\n    private static readonly T_ATTR_FORM_SECTION: string = \"form-section\";\r\n\r\n    /**\r\n    * Variablen und Methoden welche der Klasse zur verfügung gestellt werden müssen\r\n    */\r\n    props = {\r\n        pageRegister: function (username: string, email: string, password: string) { },\r\n        pageLogin: function (email: string, password: string) { }\r\n    }\r\n\r\n    /**\r\n     * Status für diese Komponente\r\n     */\r\n    state = {\r\n        openNewWindow: false,\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n    };\r\n\r\n    /**\r\n     * Erstellung LoginFenster\r\n     */\r\n    openNewWindow = () => {\r\n        this.setState({ openNewWindow: true });\r\n    };\r\n\r\n    /**\r\n     * Eingabe von Benutzename\r\n     * @param e ChangeEventInput\r\n     */\r\n    changeUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Eingabe von Emailadresse\r\n     * @param e ChangeEventInput\r\n     */\r\n    changeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            email: e.target.value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Eingabe von Passwort\r\n     * @param e ChangeEventInput\r\n     */\r\n    changePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Registieren Methode\r\n     */\r\n    register = () => {\r\n        this.setState({ openNewWindow: false });\r\n        this.props.pageRegister(this.state.username, this.state.email, this.state.password)\r\n    }\r\n\r\n    /**\r\n     * Login Methode\r\n     */\r\n    login = () => {\r\n        /** nach submit newFenster schliessen */\r\n        this.setState({ openNewWindow: false });\r\n        this.props.pageLogin(this.state.email, this.state.password)\r\n    };\r\n\r\n    /**\r\n    * Render Methode des Komponenten\r\n    * @returns Aufbau des Komponenten\r\n    */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"left\">\r\n                    <button onClick={this.openNewWindow} type='button'>{LoginWindow.T_BUTTON_LOGIN_DE}</button>\r\n                </div>\r\n                {this.state.openNewWindow && (\r\n                    <NewWindow title=\"Login\">\r\n                        <div className=\"login-window\">\r\n                            <form>\r\n                                <div className={LoginWindow.T_ATTR_FORM_SECTION}>\r\n                                    <label>\r\n                                        {LoginWindow.T_POPUP_LABEL_NAME_DE}\r\n                                    </label>\r\n                                    <input type=\"text\" value={this.state.username} onChange={this.changeUsername} />\r\n                                </div>\r\n                                <div className={LoginWindow.T_ATTR_FORM_SECTION}>\r\n                                    <label>\r\n                                        {LoginWindow.T_POPUP_LABEL_EMAIL_DE}\r\n                                    </label>\r\n                                    <input type=\"text\" value={this.state.email} onChange={this.changeEmail} />\r\n                                </div>\r\n                                <div className={LoginWindow.T_ATTR_FORM_SECTION}>\r\n                                    <label>\r\n                                        {LoginWindow.T_POPUP_LABEL_PASSWORD_DE}\r\n                                    </label>\r\n                                    <input type=\"password\" value={this.state.password} onChange={this.changePassword} />\r\n                                </div>\r\n                                <div className={LoginWindow.T_ATTR_FORM_SECTION}>\r\n                                    <button onClick={this.login} type='button'>{LoginWindow.T_POPUP_BUTTON_LOGIN_DE}</button>\r\n                                    <button onClick={this.register} type='button'>{LoginWindow.T_POPUP_BUTTON_REGISTER_DE}</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </NewWindow>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport ConstantsText from '../../components/ReferringComponents/ConstantsText';\r\nimport NewProjectButton from '../../components/ReferringComponents/NewProjectButton';\r\nimport LoadModelButton from '../../components/ReferringComponents/LoadModelButton';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport { States } from '../State';\r\nimport LoginWindow from '../../components/ReferringComponents/LoginWindow';\r\n\r\n/*\r\n*Darstellungsseite der Verweisseite.\r\n*/\r\nexport class ReferringPage implements Page {\r\n    private state: State;\r\n    private observers: PageController[] = [];\r\n\r\n    private static readonly T_WELCOME_DE = \"Wilkommen \";\r\n    private static readonly E_REG_ERROR_DE = \"Registrieren fehlgeschlagen!\";\r\n    private static readonly E_MAIL_INVALID_DE = \"Email-Adresse nicht gültig\";\r\n    private static readonly E_LOGIN_ERROR_DE = \"Login fehlgeschlagen!\";\r\n\r\n    /**\r\n    * Konstruktor der Darstellungsseite.\r\n    */\r\n    constructor() {\r\n        this.state = new State();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    update() {\r\n        this.notify();\r\n        const VDOM = (\r\n            <div>\r\n                <ConstantsText />\r\n                <LoginWindow pageRegister={this.register.bind(this)} pageLogin={this.login.bind(this)} />\r\n                <NewProjectButton disabled={!this.state.islogedIn!}\r\n                    pageNewProject={this.createNewProject.bind(this)}\r\n                    qr={this.state.qr!}\r\n                    link={this.state.link!}\r\n                    pageChangeToVisu={this.changetovisu.bind(this)}\r\n                />\r\n                <br />\r\n                <LoadModelButton disabled={!this.state.islogedIn!}\r\n                    projectData={this.state.projectData!}\r\n                    pageSetCurrentprojekt={this.setCurrentProjekt.bind(this)}\r\n                    pageLoadModel={this.loadmodel.bind(this)}\r\n                    pageLoadProjekt={this.loadproject.bind(this)}\r\n                    pageChangeToVisu={this.changetovisu.bind(this)}\r\n                    qr={this.state.qr!}\r\n                    link={this.state.link!}\r\n                />\r\n\r\n                <NotificationContainer />\r\n            </div>\r\n        );\r\n        if (document.getElementById('root') !== null) {\r\n            ReactDOM.render(VDOM, document.getElementById('root'));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /**\r\n    * Der Benutzer möchte ein neues Projekt erstellen\r\n    * @param projectName Name des neuen Projekts\r\n    */\r\n    private createNewProject(projectName: string) {\r\n        this.state.currentProject!.projectName = projectName;\r\n        this.state.currentState = States.NewProjekt;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Ein Benutzer möchte sich registrieren\r\n     * @param username Name des Benutzers\r\n     * @param email Email des Benutzers\r\n     * @param password Passwort des Benutzers\r\n     */\r\n    private register(username: string, email: string, password: string) {\r\n        var pattern = /^([A-Za-z0-9_\\-.])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z])+$/;\r\n        if (!pattern.test(email)) {\r\n            NotificationManager.error(ReferringPage.E_MAIL_INVALID_DE, \"\", 3000);\r\n        } else {\r\n            this.state.adminData! = { name: username, email: email, password: password };\r\n            this.state.currentState = States.Register;\r\n            this.update();\r\n            this.state.wait!.then(() => {\r\n                if (this.state.currentState as States === States.LoginFail as States) {\r\n                    NotificationManager.error(ReferringPage.E_REG_ERROR_DE, \"\", 3000);\r\n                    return;\r\n                }\r\n                NotificationManager.success(ReferringPage.T_WELCOME_DE + this.state.adminData?.email);\r\n                this.update();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ein Benutzer möchte sich Anmelden\r\n     * @param email Email des Benutzers\r\n     * @param password Passwort des Benutzers\r\n     */\r\n    private login(email: string, password: string) {\r\n        this.state.adminData! = { name: \"\", email: email, password: password };\r\n        this.state.currentState = States.Login;\r\n        this.update();\r\n        this.state.wait!.then(() => {\r\n            if (this.state.currentState as States === States.LoginFail as States) {\r\n                NotificationManager.error(ReferringPage.E_LOGIN_ERROR_DE, \"\", 3000);\r\n                return;\r\n            }\r\n            NotificationManager.success(ReferringPage.T_WELCOME_DE + this.state.adminData?.email);\r\n            this.update();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ein Projekt soll geladen werden\r\n     * @param data Infomationen über das zu ladene Projekt\r\n     */\r\n    private loadproject(data: { projectID: number, projectName: string, AIModelID: number[]; }) {\r\n        this.state.currentProject = data;\r\n        this.state.currentState = States.LoadProject;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Ein Projekt als momentanes Projekt setzen\r\n     * @param currentProject Infomationene über das momentane projekt\r\n     */\r\n    private setCurrentProjekt(currentProject: { projectID: number, projectName: string, AIModelID: number[]; }) {\r\n        this.state.currentProject = currentProject;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Wechsel der Seite zur Visualisierungseite.\r\n     */\r\n    private changetovisu() {\r\n        this.state.currentState = States.ChangeToVisual;\r\n        this.notify(); // Kein Update, da sonst die Seite neu rendert und der Seitenwechsel fehlschlägt\r\n    }\r\n\r\n    /**\r\n     * Lade ein KI-Model\r\n     * @param chosenmodelID ID des Models\r\n     */\r\n    private loadmodel(chosenmodelID: number) {\r\n        this.state.chosenAIModel = chosenmodelID;\r\n        this.state.currentState = States.LoadModel;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    setState(state: any) {\r\n        this.state = state;\r\n        this.update();\r\n    }\r\n}\r\n","/**\r\n * In diesem Enum befinden sich Konstanten, die mögliche Ausprägungen \r\n * für die Auslieferung eines fertig trainierten KI-Modells darstellen.\r\n */\r\nexport enum DeliveryFormat {\r\n    EXE,\r\n    WEB_APP\r\n}\r\n","import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\nimport { VisualizationController } from \"./VisualizationController\";\r\nimport { ReferringPage } from \"../view/pages/ReferringPage/index\";\r\nimport { QRCode, ErrorCorrectLevel } from 'qrcode-generator-ts/js';\r\n\r\n/**\r\n* Controller für die Verweisseite\r\n*/\r\nexport class RefferingController implements PageController {\r\n    private page: Page;\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den Start Status.\r\n     * @param isloggedIn Wurde sich zuvor erfolgreich Eingeloggt und wird nun zurück auf die ReferringPage geleitet muss dies true sein. Ohne richtigen Login entstehen fehler.\r\n     */\r\n    constructor ( isloggedIn?: boolean ) {\r\n        this.page = new ReferringPage();\r\n        //this.page = new StartPage({});\r\n        //this.page = new ModelCreationPage({});\r\n        // this.page = new VisualizationPage({});\r\n        this.page.attach( this );\r\n        this.state = this.page.getState();\r\n        this.update();\r\n\r\n        if ( isloggedIn ) {\r\n            this.state.projectData! = [];\r\n            let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n            projectData.then( ( data: { projectID: number; projectName: string; AIModelID: number[]; }[] ) => {\r\n                this.state.projectData! = data;\r\n                this.page.setState( this.state );\r\n            } );\r\n            this.state.islogedIn! = true;\r\n            this.state.adminData = {\r\n                name: \"null\",\r\n                email: MainController.getInstance().getFacade().getAdminMail(),\r\n                password: \"null\"\r\n            }\r\n            this.page.setState( this.state );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update () {\r\n        this.state = this.page.getState();\r\n        switch ( this.state.currentState ) {\r\n            case States.LoadProject:\r\n                this.loadProject();\r\n                break;\r\n            case States.Register:\r\n                this.register();\r\n                break;\r\n            case States.Login:\r\n                this.login();\r\n                break;\r\n            case States.NewProjekt:\r\n                this.createNewProject();\r\n                break;\r\n            case States.LoadModel:\r\n                this.loadModel();\r\n                break;\r\n            case States.SetLanguage:\r\n                console.log( MainController.getInstance().setLanguage( this.state.languageCode ) );\r\n                break;\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage( this.state.messages )!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState( this.state );\r\n                break;\r\n            case States.ChangeToVisual:\r\n                MainController.getInstance().changeTo( new VisualizationController( this.state.currentProject! ) );\r\n                break;\r\n            //nur für testdeliveryPage\r\n            case States.ChangeToDelivery:\r\n                this.loadModel();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logt den Benutzer ein\r\n     */\r\n    private login () {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().loginAdmin( adminData.email, adminData.password );\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState( this.state );\r\n        loginSucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                this.state.projectData! = [];\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then( ( data: { projectID: number; projectName: string; AIModelID: number[]; }[] ) => {\r\n                    console.log(data)\r\n                    this.state.projectData! = data;\r\n                    this.page.setState( this.state );\r\n                } );\r\n                this.state.islogedIn! = true;\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n            this.page.setState( this.state );\r\n        } );\r\n        loginSucess.catch( ( value: boolean ) => {\r\n            console.log( value );\r\n        } );\r\n        //this.state.projectData! = [{ projectID: 1, projectName: \"string\", AIModelID: [1,2] }]\r\n        //this.page.setState(this.state)\r\n    }\r\n\r\n    /**\r\n     * Registriert den Benutzer\r\n     */\r\n    private register () {\r\n        let adminData: { name: string, email: string, password: string; } = this.state.adminData!;\r\n        let loginSucess: Promise<boolean> = MainController.getInstance().getFacade().registerAdmin( adminData.name, adminData.email, adminData.password );\r\n        this.state.wait! = loginSucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState( this.state );\r\n        loginSucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                this.state.projectData! = [];\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then( ( data: { projectID: number; projectName: string; AIModelID: number[]; }[] ) => {\r\n                    this.state.projectData! = data;\r\n                    this.page.setState( this.state );\r\n                } );\r\n                this.state.islogedIn! = true;\r\n            } else {\r\n                this.state.currentState = States.LoginFail;\r\n            }\r\n            this.page.setState( this.state );\r\n        } );\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein QRCode und übergibt in an die Seite\r\n     */\r\n    private createQR () {\r\n        const url = new URL( document.URL );\r\n        url.searchParams.append( \"SessionID\", MainController.getInstance().getFacade().getSessionID().toString() );\r\n        url.searchParams.append( \"isMiner\", \"true\" );\r\n        url.searchParams.append( \"Admin\", this.state.adminData?.email! );\r\n        let link: string = url.toString();\r\n        var qr = new QRCode();\r\n        qr.setTypeNumber( 5 );\r\n        qr.setErrorCorrectLevel( ErrorCorrectLevel.L );\r\n        qr.addData( link );\r\n        qr.make();\r\n        this.state.qr = qr.toDataURL();\r\n        this.state.link = link;\r\n        this.state.currentState = States.SetQRC;\r\n    }\r\n\r\n    /**\r\n     * Erstelle ein neues Projekt, welches auch als momentanes Projekt gesetzt wird.\r\n     */\r\n    private createNewProject () {\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().createProject( this.state.currentProject!.projectName );\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState( this.state );\r\n        sucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                this.createQR();\r\n                let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                projectData.then( ( data: { projectID: number; projectName: string; AIModelID: number[]; }[] ) => {\r\n                    this.state.projectData! = data;\r\n                    this.page.setState( this.state );\r\n                } );\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n            this.page.setState( this.state );\r\n        } );\r\n\r\n    }\r\n\r\n    /**\r\n     * Setzt ein Projekt als momentanes Projekt\r\n     */\r\n    private loadProject () {\r\n        let projectId: number = this.state.currentProject!.projectID!;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject( projectId );\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState( this.state );\r\n        sucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                this.createQR();\r\n                //Kann das unere Weg? Schon durch login geladen\r\n                //let projectData: Promise<{ projectID: number; projectName: string; AIModelID: number[]; }[]> = MainController.getInstance().getFacade().getProjectMetas();\r\n                //projectData.then( ( data: { projectID: number; projectName: string; AIModelID: number[]; }[] ) => {\r\n                //    this.state.projectData! = data;\r\n                //} );\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n            this.page.setState( this.state );\r\n        } );\r\n    }\r\n\r\n    /**\r\n     * Läde ein Modell und wechselt zur delivery Seite\r\n     */\r\n    private loadModel () {\r\n        let projectId: number = this.state.currentProject!.projectID;\r\n        let sucess: Promise<boolean> = MainController.getInstance().getFacade().loadProject( projectId );\r\n        this.state.wait! = sucess;\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState( this.state );\r\n        sucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                let deliveryConroller: DeliveryController = new DeliveryController( this.state.chosenAIModel! );\r\n                MainController.getInstance().changeTo( deliveryConroller );\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n            }\r\n        } );\r\n        this.page.setState( this.state );\r\n    }\r\n}","import { IDataPoint } from \"./DataPoint\";\r\nimport { IDevice } from \"./DeviceData\";\r\nimport { ILabel } from \"./Label\";\r\nimport { LanguageMessages } from \"./Language\";\r\nimport { ISpan } from \"./TimeSpan\";\r\nimport { IProject } from \"./User\";\r\n\r\n//Die Schnittstelle zur Datenbank.\r\nexport class DatabaseConnector {\r\n  private static readonly databasePHPURL: string = \"/src/database/index.php\";\r\n  private static lastProjectUpdate: number = 0;\r\n\r\n  /**\r\n   * Gibt Name und Code jeder verfügbaren Sprache zurück\r\n   */\r\n  async getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\r\n    const result: { languageCode: number, languageName: string; }[] = await this.sendRequest(\"get_language_metas\");\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Läd die Sprache mit dem gegebenen Sprachcode, falls dieser in der Datenbank verfügbar ist\r\n   * @param languageCode Sprachcode\r\n   * @returns die Sprache\r\n   */\r\n  async loadLanguage(requestData: { languageCode: string; }): Promise<LanguageMessages> {\r\n    const result: LanguageMessages = await this.sendRequest(\"load_language\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Erzeugt ein neues Projekt in der Datenbank\r\n   * @param userID von dem Admin, der das Projekt erstellt\r\n   * @param adminEmail zur Sicherheit, muss zur ID übereinstimmen\r\n   * @param projectName der Name des neuen Projekts (Projekte dürfen nicht gleich heißen wie ein bestehendes Projekt)\r\n   * @returns ProjektID und die SessionID, falls das Projekt nicht erstellt werden konnte beides -1\r\n   */\r\n  async createProject(requestData: { userID: number, adminEmail: string, projectName: string; })\r\n    : Promise<{ projectID: number, sessionID: number; }> {\r\n    const result: { projectID: number, sessionID: number; } = await this.sendRequest(\"create_project\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Erzeugt einen leeren Datensatz in der Datenbank\r\n   * @param sessionID die SessionID des Projekts (Implizit die AdminID)\r\n   * @param projektID zur Sicherheit, muss zur SessionID übereinstimmen\r\n   * @param userID die UserID, der Daten anlegen möchte\r\n   * @param dataSetName der Name des Datensatzes\r\n   * @param dataRow die zu erzeugenden Datenreihen, die sensorID muss schon existieren\r\n   * @returns dataSetID (dataRowID ist implizit, da es die ID der Position im Array von dataRow ist (beginnend mit 1)), bei Fehler -1\r\n   */\r\n  async createDataSet(requestData:\r\n    { sessionID: number, projectID: number, userID: number, dataSetName: string, dataRow: { sensorID: number, datarowName?: string; }[]; })\r\n    : Promise<number> {\r\n    const dataSetID: number = (await this.sendRequest(\"create_data_set\", requestData)).dataSetID;\r\n    return dataSetID;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt mit den übergebenen Parametern\r\n   * @param sessionID die Session ID\r\n   * @param userID zur Sicherheit, muss zur SessionID und zur DatensatzID übereinstimmen\r\n   * @param datSetID \r\n   * @param dataRowID \r\n   * @param datapoint \r\n   */\r\n  async sendDataPoint(requestData: { sessionID: number, userID: number, dataSetID: number, dataRowID: number, datapoint: IDataPoint; })\r\n    : Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"send_data_point\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Sendet die Datenpunkte mit den übergebenen Parametern, falls die Verbindung abgebrochen ist um alle Datenpunkte auf einmal zu senden\r\n   * @param sessionID die Session ID\r\n   * @param userID zur Sicherheit, muss zur SessionID und zur DatensatzID übereinstimmen\r\n   * @param datSetID \r\n   * @param dataRowID \r\n   * @param datapoints alle zu sendenden Datenpunkten \r\n   */\r\n  async sendDataPointsAgain(requestData: { sessionID: number, userID: number, dataSetID: number, dataRowID: number, datapoints: IDataPoint[]; })\r\n    : Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"send_data_points_again\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Lädt das Projekt mit der ensprechenden userID und ProjektID.\r\n   * @param userID \r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   * @param projectID \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async loadProject(requestData: { userID: number, adminEmail: string, projectID: number; }): Promise<IProject> {\r\n    let time: number = new Date().getMilliseconds();\r\n    const result: IProject = await this.sendRequest(\"load_project\", requestData);\r\n    if (result.projectID != null) {\r\n      DatabaseConnector.lastProjectUpdate = time;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /* Methode die noch nicht benutzt wird aber eventuell das laufgeschehen verbessern\r\n  /**\r\n   * Lädt das Projekt mit der ensprechenden userID und ProjektID.\r\n   * @param userID \r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   * @param projectID \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   \r\n  async updateProject(requestData1: { userID: number, adminEmail: string, projectID: number; }): Promise<{\r\n    projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number, recordingStart: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    };\r\n  }> {\r\n    const requestData: { userID: number, adminEmail: string, projectID: number, lastUpdate?: number; } = requestData1;\r\n    requestData.lastUpdate = DatabaseConnector.lastProjectUpdate;\r\n    let time: number = new Date().getMilliseconds();\r\n    const result: {\r\n      projectID: number, sessionID: number, projectName: string, projectData?: {\r\n        aiModelID?: number[],\r\n        dataSet: {\r\n          dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n          dataRows: {\r\n            dataRowID: number, recordingStart: number,\r\n            dataRow: { value: number[], relativeTime: number; }[];\r\n          }[],\r\n          label: { name: string, labelID: number, start: number, end: number; }[];\r\n        }[];\r\n      };\r\n    } = await this.sendRequest(\"update_project\", requestData);\r\n    if (result.projectID != null) {\r\n      DatabaseConnector.lastProjectUpdate = time;\r\n    }\r\n    return result;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Gibt von allen Projekten des angemeldeten Admins, mit der Email adminEmail, die Projekt ID und den Projekt Namen zurück\r\n   * @param userID\r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   */\r\n  async getProjectMetas(requestData: { userID: number, adminEmail: string; })\r\n    : Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\r\n    const result: { projectID: number, projectName: string, AIModelID: number[]; }[]\r\n      = await this.sendRequest(\"get_project_metas\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz im Projekt welcher die angegebene ID besitzt\r\n   * @param userID\r\n   * @param adminEmail zur Sicherheit, muss zur UserID übereinstimmen\r\n   * @param projectID \r\n   * @param dataSetID \r\n   * @returns ob der Datenset erfolgreich gelöscht wurde\r\n   */\r\n  async deleteDataSet(requestData: { userID: number, adminEmail: string, projectID: number, dataSetID: number; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"delete_data_set\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n     * Registriert einen neuen Projektleiter. \r\n     * @param adminName \r\n     * @param adminEmail \r\n     * @param password \r\n     * @param device \r\n     * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n     */\r\n  async registerAdmin(requestData: { adminName: string, adminEmail: string, password: string, device: IDevice; })\r\n    : Promise<{ adminID: number, device: { deviceID: number, sensorID: number[]; }; }> {\r\n    const result: { adminID: number, device: { deviceID: number, sensorID: number[]; }; } = await this.sendRequest(\"register_admin\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registriert einen Datenerfasser.\r\n   * @param dataminerName \r\n   * @param sessionID die SessionID, mit der der Datenerfasser verknüpft ist, diese bestimmt in welchem Projekt die Daten abgelegt werden\r\n   * @param device \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async registerDataminer(requestData: { dataminerName: string, sessionID: number, device: IDevice; })\r\n    : Promise<{\r\n      dataminerID: number,\r\n      device: { deviceID: number, sensorID: number[]; },\r\n      project: { projectID: number, projectName: string, sessionID: number; };\r\n    }> {\r\n    const result: {\r\n      dataminerID: number,\r\n      device: { deviceID: number, sensorID: number[]; },\r\n      project: { projectID: number, projectName: string, sessionID: number; };\r\n    }\r\n      = await this.sendRequest(\"register_dataminer\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registriert einen KI-Anwender\r\n   * @param aiModelUserName \r\n   * @param modelID \r\n   * @param device \r\n   * @returns Gibt die Daten zurück, als Fehler werden alle IDs auf -1 gesetzt\r\n   */\r\n  async registerAIModelUser(requestData: { aiModelUserName: string, modelID: number, device: IDevice; })\r\n    : Promise<{\r\n      aiModelUserID: number,\r\n      device: { deviceID: number, sensorID: number[]; },\r\n      project: { projectID: number, projectName: string, sessionID: number; };\r\n    }> {\r\n    const result: {\r\n      aiModelUserID: number,\r\n      device: { deviceID: number, sensorID: number[]; },\r\n      project: { projectID: number, projectName: string, sessionID: number; };\r\n    }\r\n      = await this.sendRequest(\"register_ai_model_user\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Meldet den Admin an. \r\n   * @param email \r\n   * @param password \r\n   */\r\n  async loginAdmin(requestData: { adminEmail: string, password: string; })\r\n    : Promise<{ admin: { adminID: number, deviceID: number, adminName: string, email: string, device: IDevice; }; }> {\r\n    const result: { admin: { adminID: number, deviceID: number, adminName: string, email: string, device: IDevice; }; }\r\n      = await this.sendRequest(\"login_admin\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Label\r\n   * @param sessionID \r\n   * @param userID \r\n   * @param datasetID \r\n   * @param label \r\n   * @returns labelID\r\n   */\r\n  async createLabel(requestData: { sessionID: number, userID: number, datasetID: number, label: { span: ISpan, labelName: string; }; }): Promise<number> {\r\n    const result: number = (await this.sendRequest(\"create_label\", requestData)).labelID;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Setzt dem bestehenden Label neue Werte\r\n   * @param sessionID \r\n   * @param userID \r\n   * @param datasetID \r\n   * @param label \r\n   */\r\n  async setLabel(requestData: { sessionID: number, userID: number, datasetID: number, label: { labelID: number, span: ISpan, labelName?: string; }; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"set_label\", requestData);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Löscht das Label\r\n   * @param sessionID \r\n   * @param userID \r\n   * @param datasetID \r\n   * @param labelID \r\n   */\r\n  async deleteLabel(requestData: { sessionID: number, userID: number, dataSetID: number, labelID: number; }): Promise<boolean> {\r\n    const result: boolean = await this.sendRequest(\"delete_label\", requestData);\r\n    return result;\r\n  }\r\n\r\n  private async sendRequest(action: string, requestData?: object): Promise<any> {\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    var obj;\r\n    await fetch(DatabaseConnector.databasePHPURL + \"?action=\" + action, { method: 'POST', headers, body: JSON.stringify(requestData) })\r\n      .then(response => response.json()).then(data => { obj = data; }).catch(function () {\r\n        obj = false;\r\n      });\r\n    return obj;\r\n  }\r\n}","/**\r\n * In dieser Klasse wird die aktuell geladene Sprache sowie alle Nachrichten auf dieser Sprache gespeichert.\r\n */\r\nexport class Language {\r\n  private language: LanguageMessages; //Alle Nachrichten auf der geladenen Sprache\r\n\r\n  constructor(language: LanguageMessages) {\r\n    this.language = language;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Sprachen Code zurück\r\n   */\r\n  getLanguageCode(): string {\r\n    return this.language.code;\r\n  }\r\n\r\n  /**\r\n   * Gibt die geladene Sprache zurück\r\n   * @returns id mit der Nachricht in der gleichen Reihenfolge, wie angefordert.\r\n   */\r\n  getMessage(): LanguageMessages {\r\n    return this.language;\r\n  }\r\n\r\n  /**\r\n   * Setzt eine neue Sprache\r\n   * @param languagePromise die neue Sprache die geladen werden soll\r\n   */\r\n  setLanguage(language: LanguageMessages): boolean {\r\n    this.language = language;\r\n    return true;\r\n  }\r\n\r\n}\r\nexport interface LanguageMessages {\r\n  code: string;\r\n  name: string;\r\n}","import { Component } from 'react';\r\nimport title from './index.module.css';\r\n\r\nexport default class Title extends Component {\r\n\r\n    /**\r\n     * Enthält den Titel \"Datenerfassungsanwendung\"\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className={title.title}>Datenerfassung</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\n\r\n/**\r\n * Stellt die Funktion für Input der Einstellungen\r\n */\r\nexport default class Input extends Component {\r\n\r\n  props = {\r\n    /**\r\n     * Die Methode um die Einstellungen zu ändern\r\n     * @param recordingSettings die eingegebene Einstellungen\r\n     */\r\n    pageChangeSettings: function (recordingSettings: {\r\n      newDataSetName: string, usedSensorTypes: number[], waitTime: number, readTime: number,\r\n      availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n    }) { },\r\n\r\n    /**\r\n     * Die verfügbare Sensoren zu wählen\r\n     */\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  };\r\n\r\n  state = {\r\n    name: \"\", //Datenname\r\n    usedSensorTypes: [] as number[], //gewählte Sensoren\r\n    leadTime: \"\", //Vorlaufzeit\r\n    collectionTime: \"\", //Erfassungsdauer\r\n  };\r\n\r\n  /**\r\n   * Erneut den Inhalt des Eingabefelds der Vorlaufzeit\r\n   * @param e Die Eingebenaktion\r\n   */\r\n  changeLeadtime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      leadTime: e.target.value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Erneut den Inhalt des Eingabefelds der Erfassungsdauer\r\n   * @param e Die Eingebenaktion\r\n   */\r\n  changeCollectionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      collectionTime: e.target.value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Erneut den Inhalt des Eingabefelds des Datennamen\r\n   * @param e Die Eingebenaktion\r\n   */\r\n  changeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      name: e.target.value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Aktualisiert den gewählten Sensor\r\n   * @param e Die Klickaktion\r\n   */\r\n  handleCheckBoxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newAvailableSensorTypes = this.props.availableSensorTypes;\r\n    for (var i = 0; i < newAvailableSensorTypes.length; i++) {\r\n      // eslint-disable-next-line\r\n      if (newAvailableSensorTypes[i].sensorTypID == +e.target.value) {\r\n        newAvailableSensorTypes[i].chosen = !newAvailableSensorTypes[i].chosen;\r\n        this.setState({ availableSensorTypes: newAvailableSensorTypes, });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sende die festgestellte Einstellungen\r\n   * @returns wenn die Eingabe ungültig ist\r\n   */\r\n  submit = () => {\r\n    if (\r\n      parseInt(this.state.leadTime) >= 0 &&\r\n      parseInt(this.state.collectionTime) >= 0\r\n    ) {\r\n      let availableSensorTypes = this.props.availableSensorTypes;\r\n      var usedSensorTypes: number[] = [];\r\n      for (var i = 0; i < availableSensorTypes.length; i++) {\r\n        // eslint-disable-next-line\r\n        if (availableSensorTypes[i].chosen == true) {\r\n          usedSensorTypes.push(availableSensorTypes[i].sensorTypID);\r\n        }\r\n      }\r\n      this.setState({ usedSensorTypes: usedSensorTypes });\r\n\r\n      /**\r\n       * Die eingegebene Zeit ist ungültig.\r\n       */\r\n      if (isNaN(+this.state.leadTime) || isNaN(+this.state.collectionTime)) {\r\n        NotificationManager.error(\"Die Eingabe der Zeit ist ungültig. Es sind nur ganze Zahlen erlaubt\");\r\n        return;\r\n      }\r\n\r\n      const newDataSetName = this.state.name;\r\n      const waitTime = +this.state.leadTime;\r\n      const readTime = +this.state.collectionTime;\r\n      this.props.pageChangeSettings({\r\n        newDataSetName: newDataSetName, usedSensorTypes: usedSensorTypes, waitTime: waitTime, readTime: readTime,\r\n        availableSensorTypes: availableSensorTypes\r\n      });\r\n    } else {\r\n      NotificationManager.error(\"Die Eingabe ist ungültig\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input\">\r\n        <form>\r\n          Aufnahmeparameter einstellen\r\n          <br />\r\n          Vorlaufzeit:\r\n          <input\r\n            type=\"leadTime\"\r\n            value={this.state.leadTime}\r\n            onChange={this.changeLeadtime.bind(this)}\r\n          />\r\n          s<br />\r\n          Aufnahmedauer:\r\n          <input\r\n            type=\"collectionTime\"\r\n            value={this.state.collectionTime}\r\n            onChange={this.changeCollectionTime.bind(this)}\r\n          />\r\n          s<br />\r\n          Datenname:\r\n          <input\r\n            type=\"datenname\"\r\n            value={this.state.name}\r\n            onChange={this.changeName.bind(this)}\r\n          /><br />\r\n          Sensoren:\r\n          {\r\n            this.props.availableSensorTypes.map((type: { sensorTypID: number, sensorType: string, chosen: boolean; }) => {\r\n              return (<div>\r\n                <input className='checkbox' type=\"checkbox\" id={type.sensorType} value={type.sensorTypID} checked={type.chosen} onChange={(e: React.ChangeEvent<HTMLInputElement>): void => this.handleCheckBoxChange(e)} />\r\n                <label htmlFor={type.sensorType}>{type.sensorType}</label>\r\n              </div>);\r\n            })\r\n          }\r\n          <br />\r\n          <button type=\"button\" onClick={this.submit} className=\"submit-btn\">\r\n            Start\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  messageIDs: number[] = [];\r\n  messages: { text: string, id: number; }[] = [];\r\n  languageCode: string = \"de\";\r\n  recordingSettings = {\r\n    newDataSetName: \"\", usedSensorTypes: [ 0, ], waitTime: -1, readTime: -1,\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  };\r\n  leadTime: number = 3;\r\n  collectionTime: number = 5;\r\n  name: string = \"\";\r\n  wait?: Promise<any>;\r\n}\r\n\r\n","import Title from '../../components/StartComponents/Title';\r\nimport Input from '../../components/StartComponents/Input';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n\r\n/**\r\n * Die Darstellungsseite für die Startseite der Datenerfasser\r\n */\r\nexport class StartPage implements Page {\r\n    state: State;\r\n    observers: PageController[] = [];\r\n\r\n    /**\r\n     * Konstruktor der Darstellungseite\r\n     * @param admin Name der Person für den aufgenommen wird\r\n     */\r\n    constructor ( admin: string ) {\r\n        this.state = new State();\r\n        this.update();\r\n        NotificationManager.success( admin );\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    private update () {\r\n        this.notify();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Input availableSensorTypes={ this.state.recordingSettings.availableSensorTypes } pageChangeSettings={ this.changeSettings.bind( this ) } />\r\n                <NotificationContainer />\r\n            </div>\r\n\r\n        );\r\n        if (document.getElementById( 'root' ) !== null) {\r\n            ReactDOM.render( VDOM, document.getElementById( 'root' ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Prüft ob der Nutzer \"Start\" druckt und ändert den Zustand.\r\n    */\r\n    private changeSettings ( recordingSettings: {\r\n        newDataSetName: string,\r\n        usedSensorTypes: number[],\r\n        waitTime: number,\r\n        readTime: number,\r\n        availableSensorTypes: { sensorTypID: number, sensorType: string, chosen: boolean; }[];\r\n    } ) {\r\n        this.state.recordingSettings = recordingSettings;\r\n        this.state.currentState = States.ChangeToDataCollection;\r\n        this.notify();\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach ( observer: PageController ) {\r\n        this.observers.push( observer );\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach ( observer: PageController ) {\r\n        const index = this.observers.indexOf( observer, 0 );\r\n        if ( index > -1 ) {\r\n            this.observers.splice( index, 1 );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify () {\r\n        for ( let index = 0; index < this.observers.length; index++ ) {\r\n            const element = this.observers[ index ];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    getState () {\r\n        return this.state;\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    setState ( state: any ) {\r\n        this.state = state;\r\n        this.update();\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport title from './index.module.css';\r\n\r\nexport default class Title extends Component {\r\n    private static readonly T_TITLE_DE: string = \"Datenerfassung\";\r\n\r\n    /**\r\n     * Enthält den Titel \"Datenerfassungsanwendung\"\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className={title.title}>{Title.T_TITLE_DE}</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\r\n//import { NotificationManager } from 'react-notifications';\r\n\r\nexport default class Countdown extends Component {\r\n    \r\n    /**\r\n     * die Vorlaufzeit und die gewählte Sensoren, durch props übermittelt\r\n     */\r\n    props = {\r\n        countdownNumber: 5, chosenSensors: [1]\r\n    };\r\n\r\n    render() {\r\n        /**\r\n         * unterscheidet, ob die Erfassung schon begonnen hat.\r\n         */\r\n        let countdown;\r\n        if (this.props.countdownNumber > 0) {\r\n            countdown = this.props.countdownNumber;\r\n        } else {\r\n            countdown = \"Aufnahme läuft!\";\r\n        }\r\n\r\n        /**\r\n         * unterscheidet, welche Sensoren gewählt wurden\r\n         */\r\n        let sensornames: string[] = [];\r\n        for (let sensor in this.props.chosenSensors) {\r\n            switch (sensor) {\r\n                case \"0\":\r\n                    sensornames.push(\"Beschleunigungssensor\");\r\n                    break;\r\n                case \"1\":\r\n                    sensornames.push(\"Gyroskop\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Rendert die Countdown-Komponente\r\n         */\r\n        return (\r\n            <div>\r\n                <h2>Bereit machen zur Aufnahme!</h2>\r\n                <h2>{countdown}</h2>\r\n                <h2>Verwendete Sensoren:</h2>\r\n                {\r\n                    sensornames.map((x) => {\r\n                        return <h4>{x}</h4>;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { Component, CSSProperties } from 'react';\r\nimport './diagram.css'\r\n\r\nexport default class Diagram extends Component {\r\n    private static readonly T_ACCELEROMETER_DE: string = \"Beschleunigungssensor\";\r\n    private static readonly T_GYROSCOPE_DE: string = \"Gyroskop\";\r\n    private static readonly T_MAGNETOMETER_DE: string = \"Magnetometer\";\r\n    private static readonly T_BUTTON_NEXT_DE: string = \"Zur Abschlussseite\"\r\n\r\n    /**\r\n     * der Datensatz für Linie-Diagramm und die Funktion für Seitewechsel, durch props übermittelt\r\n     */\r\n    props = {\r\n        dataRows: [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }],\r\n        pageChangeToFinish: function () { }\r\n    };\r\n\r\n    /**\r\n     * der Datensatz in chart-js form\r\n     */\r\n    state = {\r\n        diagrammData: {\r\n            lineLabels: [] as any[],\r\n            sensorRow: [] as any[],\r\n            datavalue: [] as any[],\r\n            time: [] as any[],\r\n            showDiagram: false,\r\n            diagram: {},\r\n            diagramLineLabels: {},\r\n            diagramData: {},\r\n            diagramOptions: {},\r\n            color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n                'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n            csscolor: ['#2EBE57', '#CC00FF', '#EEAD0E', '#B22222', '#EE82EE', '#000000',\r\n                '#6A5ACD', '#EE7600', '#696969'],\r\n        }\r\n    };\r\n\r\n    /**\r\n     * aktualisiert das Diagramm mit dem neuen Datensatz\r\n     */\r\n    updateDiagramm() {\r\n        let diagrammData = this.state.diagrammData;\r\n        diagrammData.lineLabels = [];\r\n        diagrammData.sensorRow = [];\r\n        diagrammData.datavalue = [];\r\n        diagrammData.time = [];\r\n        diagrammData.showDiagram = true;\r\n\r\n        var datavalues = [];\r\n        for (var z = 0; z < this.props.dataRows.length; z++) {\r\n            this.state.diagrammData.sensorRow.push(this.props.dataRows[z].sensorType);\r\n            for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                for (var j = 0; j < this.props.dataRows[z].datapoint.length; j++) {\r\n                    datavalues.push(this.props.dataRows[z].datapoint[j].value[dataCoordinate]);\r\n                }\r\n                this.state.diagrammData.datavalue.push(datavalues);\r\n                datavalues = [];\r\n            }\r\n        }\r\n        for (var j = 0; j < this.props.dataRows[0].datapoint.length; j++) {\r\n            this.state.diagrammData.time.push(this.props.dataRows[0].datapoint[j].relativeTime);\r\n        }\r\n\r\n        var newDatasets = [];\r\n        var lineLabels = [];\r\n        for (var i = 0; i < this.state.diagrammData.sensorRow.length * 3; i++) {\r\n            var coordinate = \".X\";\r\n            var sensor = this.state.diagrammData.sensorRow[(i / 3) | 0];\r\n            var sensorName = '';\r\n            /**\r\n                 * unterscheidet, welche Sensor es ist\r\n                 */\r\n             switch (sensor) {\r\n                case 2:\r\n                    sensorName = Diagram.T_ACCELEROMETER_DE;\r\n                    break;\r\n                case 3:\r\n                    sensorName = Diagram.T_GYROSCOPE_DE;\r\n                    break;\r\n                case 4:\r\n                    sensorName = Diagram.T_MAGNETOMETER_DE;\r\n                    break;\r\n            }\r\n            /**\r\n                 * unterscheidet, von welchem Koordinate dieser Datenpunkt ist\r\n                 */\r\n            if (i % 3 === 1) {\r\n                coordinate = \".Y\";\r\n            }\r\n            if (i % 3 === 2) {\r\n                coordinate = \".Z\";\r\n            }\r\n\r\n            let color: CSSProperties = { \"color\": this.state.diagrammData.csscolor[i] };\r\n            lineLabels.push(<span style={color}>■{sensorName + coordinate}<br /></span>);\r\n            newDatasets.push(\r\n                {\r\n                    label: sensor + coordinate,\r\n                    strokeColor: this.state.diagrammData.color[i],\r\n                    borderWidth: 1,\r\n                    data: this.state.diagrammData.datavalue[i],\r\n                }\r\n            );\r\n        }\r\n        const data = {\r\n            labels: this.state.diagrammData.time,\r\n            datasets: newDatasets\r\n        };\r\n        const options = {\r\n            datasetFill: false,\r\n            pointDotRadius: 2,\r\n            pointHitDetectionRadius: 1,\r\n            offsetGridLines: false,\r\n            pointDot: false,\r\n            title: {\r\n                display: true,\r\n                text: 'Chart.js bar Chart'\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        callback: function (value: number) { if (Number.isInteger(value)) { return value; } },\r\n                        stepSize: 1\r\n                    }\r\n                }]\r\n            }\r\n        };\r\n        diagrammData = this.state.diagrammData;\r\n        diagrammData.diagramData = data;\r\n        diagrammData.lineLabels = lineLabels;\r\n        diagrammData.diagramOptions = options;\r\n    }\r\n\r\n    submit = () => {\r\n        this.props.pageChangeToFinish();\r\n    };\r\n\r\n    /**\r\n     * Rendert diese Diagram-Komponente\r\n     * @returns Diagramm-Teil\r\n     */\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        this.updateDiagramm();\r\n        let dd = this.state.diagrammData;\r\n        return (\r\n            <div>\r\n                <div>\r\n                <div className=\"view-section\">\r\n                    <div className=\"view-section\">\r\n                        <span>\r\n                            {dd.lineLabels}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"view-section\">\r\n                        <LineChart data={dd.diagramData} options={dd.diagramOptions} width={document.documentElement.clientWidth} height={200} redraw />\r\n                    </div>\r\n                </div>\r\n                <div id = 'divWithSpace'></div>\r\n                </div>\r\n                <div className=\"view-section\">\r\n                    <button className='specialButton' type=\"button\" onClick={this.submit}>{Diagram.T_BUTTON_NEXT_DE}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  messageIDs: number[] = [];\r\n  messages: { text: string, id: number; }[] = [];\r\n  languageCode: string = \"de\";\r\n  leadTime: number = -1;\r\n  usedSensorNames: string[] = [];\r\n  dataRows?: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[] = [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }];\r\n  dataPoints?: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[] = [];\r\n  recordingSettings?: { newDataSetName: string, usedSensorTypes: number[], readTime: number, waitTime: number, availableSensorTypes: { sensorTypID: number; sensorType: string; chosen: boolean; }[]; } \r\n  = { newDataSetName: \"null\", usedSensorTypes: [-1], readTime: -1, waitTime: -1, availableSensorTypes: [{ sensorTypID: -1, sensorType: \"null\", chosen: false }]}\r\n}","import Title from '../../components/DataCollectionComponents/Title';\r\nimport Countdown from '../../components/DataCollectionComponents/Countdown';\r\nimport Diagram from '../../components/DataCollectionComponents/Diagram';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { States } from '../State';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\n/**\r\n * Darstellungsseite der Datenerfassungsseite\r\n */\r\nexport class DataCollectionPage implements Page {\r\n    state: State;\r\n    observers: PageController[] = [];\r\n\r\n    /**\r\n    * Konstruktor der Darstellungsseite.\r\n    */\r\n    constructor () {\r\n        this.state = new State();\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    private update () {\r\n        this.notify();\r\n        const VDOM = (\r\n            <div>\r\n                <Title />\r\n                <Countdown countdownNumber={ this.state.recordingSettings?.waitTime! } chosenSensors={ this.state.recordingSettings?.usedSensorTypes! } />\r\n                <Diagram dataRows={ this.state.dataRows! } pageChangeToFinish={ this.changeToFinish.bind( this ) } />\r\n                <NotificationContainer />\r\n            </div>\r\n        );\r\n        if ( document.getElementById( 'root' ) !== null ) {\r\n            ReactDOM.render( VDOM, document.getElementById( 'root' ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wechsel der Seite zur Fertigungsseite.\r\n     */\r\n    private changeToFinish () {\r\n        this.state.currentState = States.ChangeToFinish;\r\n        this.notify(); // Kein Update, da sonst die Seite neu rendert und der Seitenwechsel fehlschlägt\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach ( observer: PageController ) {\r\n        this.observers.push( observer );\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach ( observer: PageController ) {\r\n        const index = this.observers.indexOf( observer, 0 );\r\n        if ( index > -1 ) {\r\n            this.observers.splice( index, 1 );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify () {\r\n        for ( let index = 0; index < this.observers.length; index++ ) {\r\n            const element = this.observers[ index ];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    setState ( state: any ) {\r\n        this.state = state;\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    getState () {\r\n        return this.state;\r\n    }\r\n}","import { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { Facade } from \"../model/Facade\";\r\nimport { State } from \"../view/pages/ModelCreationPage/State\";\r\n\r\nexport class SensorManager {\r\n    private checkList: Promise<boolean>[] = [];\r\n    private currentSensors: Sensor[] = [];\r\n    //private currentSensorIDs: number[] = [];\r\n    private facade: Facade = MainController.getInstance().getFacade();\r\n    private waitTime: number = 5;\r\n    private readTime: number = 10;\r\n    private startTime: number = 10;\r\n    private saving: boolean = true;\r\n    private page: Page | undefined = undefined;\r\n    private sensorTypes: number[] = [];\r\n    private dataPoints: { rowId: number, sensorType: number, value: number[]; relativeTime: number; }[] = [];\r\n    private dataRows: { sensorType: number, datapoint: { value: number[]; relativeTime: number; }[]; }[] = [];\r\n\r\n    /**\r\n    * Erzeugt eine neue Datenreihe und setzt diese damit als momentan benutzte Datenreihe. \r\n    * @param sensorTypes Die Angabe der zu benutzenden Sensoren. Die position im Array bestimmt die DataRow ID jedes Sensors.\r\n    * @returns Gibt true für ein erfolgreiches Erstellen eines Dataensatzes zurück, gibt sonst false zurück.\r\n    */\r\n    setUpDataRead ( sensorTypes: number[], dataSetName: string, waitTime: number, readTime: number, saving: boolean ) {\r\n        //this.currentSensorIDs = sensorTypes;\r\n        // this.waitTime = waitTime * this.TO_SECOND;\r\n        //this.readTime = readTime * this.TO_SECOND;\r\n        //this.startTime = readTime * this.TO_SECOND;\r\n        this.waitTime = waitTime;\r\n        this.readTime = readTime;\r\n        this.saving = saving;\r\n        this.sensorTypes = sensorTypes;\r\n        for ( let index = 0; index < sensorTypes.length; index++ ) {\r\n            switch ( sensorTypes[ index ] ) {\r\n                case 2:\r\n                    let accSensor = new Accelerometer( { frequency: 60 } );\r\n                    this.currentSensors.push( accSensor );\r\n                    accSensor.addEventListener( 'reading', e => {\r\n                        this.getData( accSensor, index, sensorTypes[ index ] );\r\n                    } );\r\n                    accSensor.addEventListener( 'error', event => {\r\n                        console.log( event.error.name, event.error.message );\r\n                    } );\r\n                    break;\r\n                case 3:\r\n                    let gyroSensor = new Gyroscope( { frequency: 60 } );\r\n                    this.currentSensors.push( gyroSensor );\r\n                    gyroSensor.addEventListener( 'reading', e => {\r\n                        this.getData( gyroSensor, index, sensorTypes[ index ] );\r\n                    } );\r\n                    gyroSensor.addEventListener( 'error', event => {\r\n                        console.log( event.error.name, event.error.message );\r\n                    } );\r\n                    break;\r\n                case 4:\r\n                    let magSensor = new Magnetometer( { frequency: 60 } );\r\n                    this.currentSensors.push( magSensor );\r\n                    magSensor.addEventListener( 'reading', e => {\r\n                        this.getData( magSensor, index, sensorTypes[ index ] );\r\n                    } );\r\n                    magSensor.addEventListener( 'error', event => {\r\n                        console.log( event.error.name, event.error.message );\r\n                    } );\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return ( this.facade.createDataSet( sensorTypes, dataSetName ) );\r\n    }\r\n\r\n    /**\r\n    * Erfasst für den momentanene Datensatz Daten und sendet diese an die Explorer Datenbank.\r\n    * Wartet zuerst für die angegebene Wartezeit und nimmt dann für die angegeben Lesezeit daten auf.\r\n    */\r\n    readData ( page: Page ) {\r\n        this.page = page;\r\n        let state: IState = page.getState();\r\n        state.recordingSettings!.usedSensorTypes = this.sensorTypes;\r\n        state.currentState = States.waitForDB;\r\n        page.setState( state );\r\n        //Warte für waitTime und update dabei die Seite\r\n        let intervalId1 = setInterval( () => {\r\n            this.waitTime = this.waitTime - 1;\r\n            state.recordingSettings!.waitTime = this.waitTime;\r\n            //state.currentState = States.SetWaitTime;\r\n            page.setState( state );\r\n            if ( this.waitTime === 0 ) {\r\n                clearInterval( intervalId1 );\r\n                this.startTime = new Date().getTime();\r\n                for ( let index = 0; index < this.currentSensors.length; index++ ) {\r\n                    this.currentSensors[ index ].start();\r\n                }\r\n                //Nimm Daten auf verteile sie an die Seite und das Modell. Erneuere dabei die aufnahmezeit auf der Seite\r\n                let intervalId2 = setInterval( () => {\r\n                    this.readTime = this.readTime - 1;\r\n                    while ( this.dataPoints.length > 0 ) {\r\n                        let newDataPoint = this.dataPoints.shift()!;\r\n                        state.dataPoints!.push( newDataPoint );\r\n                        this.checkList.push( MainController.getInstance().getFacade().sendDataPoint( newDataPoint.rowId, { value: newDataPoint.value, relativeTime: newDataPoint.relativeTime } ) );\r\n                        page.setState( state );\r\n                    }\r\n                    if ( this.readTime === 0 ) {\r\n                        clearInterval( intervalId2 );\r\n                        for ( let index = 0; index < this.currentSensors.length; index++ ) {\r\n                            this.currentSensors[ index ].stop();\r\n                        }\r\n                        this.checkForErrors( state, page );\r\n                    }\r\n                }, 1000 );\r\n            }\r\n        }, 1000 );\r\n    }\r\n\r\n    private async checkForErrors ( state: State, page: Page ) {\r\n        for ( const element of this.checkList ) {\r\n            let errorWhenSend = !( await element );\r\n            if ( errorWhenSend ) {\r\n                state.currentState = States.LoadError;\r\n            }\r\n        }\r\n        page.setState( state );\r\n    }\r\n\r\n    private saveDatapointinRow ( dataPoint: { rowId: number, sensorType: number, value: number[]; relativeTime: number; } ) {\r\n        while ( this.dataRows.length - 1 < dataPoint.rowId ) {\r\n            this.dataRows.push( { sensorType: -1, datapoint: [] } );\r\n        }\r\n        this.dataRows[ dataPoint.rowId ].sensorType = dataPoint.sensorType;\r\n        this.dataRows[ dataPoint.rowId ].datapoint.push( { value: dataPoint.value, relativeTime: dataPoint.relativeTime } );\r\n\r\n        if ( this.page !== undefined ) {\r\n            let state = this.page.getState();\r\n            state.dataRows = this.dataRows;\r\n            this.page.setState( state );\r\n        }\r\n\r\n        //PubSub.publish( 'startDiagram', this.dataRows );\r\n        //PubSub.publish( 'finishDiagram', this.dataRows );\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche vor der Aufnahme gewartet wird. \r\n     */\r\n    getWaitTime () {\r\n        return this.waitTime;\r\n    }\r\n\r\n    /**\r\n     * @returns Gibt als Zahl die Zeit in Sekunden zurück, für welche die Aufnahme läuft. \r\n     */\r\n    getReadTime () {\r\n        return this.readTime;\r\n    }\r\n\r\n    /**\r\n    * Holt die Sensordaten für einen Sensor\r\n    * @param sensor der Sensor von dem die Daten gelsen werden\r\n    * @param sensorType Die ID des Sensortypes\r\n    */\r\n    private getData ( sensor: Magnetometer | Gyroscope | Accelerometer, rowId: number, sensorType: number ) {\r\n        if ( sensor.x === undefined || sensor.y === undefined || sensor.z === undefined ) {\r\n            return;\r\n        }\r\n        const point = { rowId, sensorType, value: [ sensor.x!, sensor.y!, sensor.z! ], relativeTime: ( new Date().getTime() - this.startTime ) / 1000 };\r\n        this.dataPoints.push( point );\r\n        this.saveDatapointinRow( point );\r\n    }\r\n\r\n    /**\r\n    * Prüft welche Sensoren verfügbar sind.\r\n    * @returns ein Array welches alle SensorTypeIDs enthält die verfügbar sind\r\n    */\r\n    async getAvailableSensors (): Promise<{ sensorTypID: number; sensorType: string; }[]> {\r\n        let sensors: { sensorTypID: number; sensorType: string; }[] = [];\r\n\r\n\r\n        // sensors.push({ sensorTypID: 2, sensorType: \"Accelerometer\" }); //Nur test\r\n        // return sensors;//Nur test\r\n\r\n\r\n        let accelerometer = new Accelerometer( { frequency: 60 } );\r\n        let accelerometerExist = this.existSensor( accelerometer );\r\n        let gyroscope = new Gyroscope( { frequency: 60 } );\r\n        let gyroscopeExist = this.existSensor( gyroscope );\r\n        /*let magnetometer = new Magnetometer();            Nicht definiert?\r\n        let magnetometerExist = this.test(magnetometer);*/\r\n\r\n        if ( await accelerometerExist ) {\r\n            sensors.push( { sensorTypID: 2, sensorType: \"Accelerometer\" } );\r\n        }\r\n        if ( await gyroscopeExist ) {\r\n            sensors.push( { sensorTypID: 3, sensorType: \"Gyroscope\" } );\r\n        }\r\n\r\n        /*if (await magnetometerExist) {\r\n            sensors.push({ sensorTypID: 4, sensorType: \"Magnetometer\" });\r\n        }*/\r\n        return sensors;\r\n    }\r\n\r\n    private async existSensor ( sensor: Sensor ): Promise<boolean> {\r\n        var finish = false;\r\n        sensor.addEventListener( 'reading', e => {\r\n            finish = true;\r\n            sensor.stop();\r\n        } );\r\n        sensor.start();\r\n        await this.wait( 1000 );\r\n        sensor.stop();\r\n        return finish;\r\n    }\r\n    private async wait ( ms: number ) {\r\n        return new Promise( resolve => setTimeout( resolve, ms ) );\r\n    }\r\n}","import { IState } from \"../State\";\r\nimport { States } from \"../State\";\r\n\r\nexport class State implements IState {\r\n  currentState: States = States.NeedMessage;\r\n  messageIDs: number[] = [];\r\n  messages: { text: string, id: number; }[] = [];\r\n  languageCode: string = \"de\";\r\n  recordingSettings = {\r\n    newDataSetName: \"\", usedSensorTypes: [ 0, ], waitTime: -1, readTime: -1,\r\n    availableSensorTypes: [] as { sensorTypID: number, sensorType: string, chosen: boolean; }[]\r\n  };\r\n  leadTime: number = 3;\r\n  collectionTime: number = 5;\r\n  name: string = \"\";\r\n  wait?: Promise<any>;\r\n  aiUserData?: { name: string, result: string; } = { name: \"NULL\", result: \" \" };\r\n}\r\n\r\n","import { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from 'react-dom';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport './Result.css';\r\n\r\n\r\n/**\r\n * Die Darstellungsseite für die Startseite der Datenerfasser\r\n */\r\nexport class ResultPage implements Page {\r\n    private state: State;\r\n    private observers: PageController[] = [];\r\n\r\n    private static readonly PAGE_TITLE = \"Ergebnis\"\r\n    private static readonly CLASSIFY = \"Klassifiziere, bitte warten\"\r\n    private static readonly RELOAD = \"Erneut klassifizieren\"\r\n\r\n    /**\r\n     * Konstruktor der Darstellungseite\r\n     * @param admin Name der Person für den aufgenommen wird\r\n     */\r\n    constructor() {\r\n        this.state = new State();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n    private update() {\r\n        this.notify();\r\n        let VDOM = (\r\n            <div>\r\n                <h2 className='title'>{ResultPage.PAGE_TITLE}</h2>\r\n                <h1 className='result'>{ResultPage.CLASSIFY}</h1>\r\n                <NotificationContainer />\r\n            </div>)\r\n        if (this.state.aiUserData!.result !== \" \") {\r\n            VDOM = (\r\n                <div>\r\n                    <h2 className='title'>Ergebnis</h2>\r\n                    <h1 className=\"result\">{this.state.aiUserData!.result}</h1>\r\n                    <button className='button' onClick = {this.reloadPage}>{ResultPage.RELOAD}</button>\r\n                    <NotificationContainer />\r\n                </div>\r\n            );\r\n        }\r\n        if (document.getElementById('root') !== null) {\r\n            ReactDOM.render(VDOM, document.getElementById('root'));\r\n        }\r\n    }\r\n\r\n\r\n    reloadPage() {\r\n        window.location.reload()\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n    attach(observer: PageController) {\r\n        this.observers.push(observer);\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n    detach(observer: PageController) {\r\n        const index = this.observers.indexOf(observer, 0);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n    notify() {\r\n        for (let index = 0; index < this.observers.length; index++) {\r\n            const element = this.observers[index];\r\n            element.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n    setState(state: any) {\r\n        this.state = state;\r\n        this.update();\r\n    }\r\n}","import { Page } from \"../view/pages/PageInterface\";\r\nimport { StartPage } from \"../view/pages/StartPage\";\r\nimport { DataCollectionPage } from \"../view/pages/DataCollectionPage/index\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { SensorManager } from \"./SensorManager\";\r\nimport { MainController } from \"./MainController\";\r\nimport { ResultPage } from \"../view/pages/ResultPage/Result\";\r\n\r\n\r\n/**\r\n* Controller welcher für die Klassifizierung verantworlich ist.\r\n*/\r\nexport class AIController implements PageController {\r\n    /**\r\n     * Der Name des KI-Modell-Nutzers in der Datenbank. Wird auch verwendet, um ihn später zu identifizieren...\r\n     */\r\n    public static readonly AI_MODEL_USER_NAME: string = \"KI-Modell-Anwender\";\r\n    private modelID: number;\r\n    /**\r\n    * Für die Verwaltung der Sensoren verantwortlich\r\n    */\r\n    private sensorManager: SensorManager;\r\n    /**\r\n    * Seite welche gerade von dem Controller verwaltet wird\r\n    */\r\n    private page: Page;\r\n    /**\r\n    * Status der Seite\r\n    */\r\n    private state: IState;\r\n    /**\r\n    * Die Attribute welche aus der URL genommen werden. Sollten aiID und Sensor Typen beinhalten\r\n    */\r\n    private urlParams: URLSearchParams;\r\n\r\n    private dataSetID = 0;\r\n    /**\r\n    * Der Constructor des Controllers verarbeitet die URL bereitet den Sensormanager vor und setzt die startpage auf.\r\n    */\r\n    constructor(modelID: number) {\r\n        const queryString = window.location.search;\r\n        this.urlParams = new URLSearchParams(queryString);\r\n        this.sensorManager = new SensorManager();\r\n        this.page = new StartPage(\"Willkomen!\");\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        //TODO Beim Registrieren des AIModelUsers sollte der Name weg oder eine Möglichkeit bestehen den Namen zu beziehen\r\n        MainController.getInstance().getFacade().registerDataminer(AIController.AI_MODEL_USER_NAME, -1);\r\n        this.modelID = modelID;\r\n        this.setUpSensorShown();\r\n        this.page.setState(this.state);\r\n        this.update();\r\n    }\r\n\r\n    private setUpSensorShown() {\r\n        let sensorTypes: number[] = this.urlParams.get(\"sensorTypes\")!.split(\",\").map(x => +x);\r\n        let text: string = \"Sie benötigen folgenede Sensoren: \";\r\n        for (const element of sensorTypes) {\r\n            switch (element) {\r\n                case 2:\r\n                    text += \"Beschleunigungssensor \";\r\n                    break;\r\n                case 3:\r\n                    text += \"Gyroskop \";\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        this.state.recordingSettings!.availableSensorTypes.push({ sensorTypID: -1, sensorType: text, chosen: true });\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        this.state = this.page.getState();\r\n        switch (this.state.currentState) {\r\n            case States.ChangeToDataCollection:\r\n                this.start();\r\n                break;\r\n            case States.ChangeToFinish:\r\n                this.changeToFinish();\r\n                break;\r\n            case States.ClassifyResult:\r\n                this.classifyResult();\r\n                break;\r\n            case States.SetLanguage:\r\n                this.page.setState(MainController.getInstance().setLanguage(this.state.languageCode));\r\n                break;\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage(this.state.messages)!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState(this.state);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holt sich alle wichtigen Daten für die Datenaufnahme aus der momentanen Seite. Darauf wird mit dem Sensormanager\r\n     * die Datenaufnahme initialisiert. Zum Schluss wird der Seitenwechsel zur Erfassungseite durchgeführt. \r\n     */\r\n    private async start() {\r\n        let sensorTypes: number[] = this.urlParams.get(\"sensorTypes\")!.split(\",\").map(x => +x);\r\n        let dataSetName: string = \"Undefined\";\r\n        let waitTime = this.state.recordingSettings!.waitTime;\r\n        let readTime = this.state.recordingSettings!.readTime;\r\n        this.dataSetID = await this.sensorManager.setUpDataRead(sensorTypes, dataSetName, waitTime, readTime, false);\r\n        this.page.detach(this);\r\n        this.page = new DataCollectionPage();\r\n        this.page.attach(this);\r\n        this.state.leadTime = this.sensorManager.getWaitTime();\r\n        this.state = this.page.getState();\r\n        this.sensorManager.readData(this.page);\r\n    }\r\n\r\n    /**\r\n     * Wechselt nach der Aufnahme des Datensatzes zur FinishPage.\r\n     */\r\n    //TODO Seite sollte für den AIModelUser noch angepasst werden. Hier wird ja nur Klassifiziert.\r\n    private changeToFinish() {\r\n        this.page.detach(this);\r\n        this.page = new ResultPage();\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.state.dataRows! = MainController.getInstance().getFacade().getCurrentDataRows().dataRows!;\r\n        this.state.currentState = States.ClassifyResult;\r\n        this.page.setState(this.state);\r\n\r\n    }\r\n\r\n    /**\r\n     * Klassifiziert den Datensatz.\r\n     */\r\n    private classifyResult() {\r\n        MainController.getInstance().getFacade().classify(+this.urlParams.get(\"modelID\")!, this.dataSetID, this.callback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Die Methode wird durch das Model aufgerufen falls ein Ergebnis der Klassifiziereung vorhanden ist.\r\n     */\r\n    public callback(prediction: any): any {\r\n        if (prediction === undefined) {\r\n            this.state.aiUserData!.result = \"Fehler bei der Klassifizierung\";\r\n\r\n        } else {\r\n            this.state.aiUserData!.result = prediction;\r\n        }\r\n        this.state.currentState = States.waitForDB;\r\n        this.page.setState(this.state);\r\n        const x: any = undefined;\r\n        return x;\r\n    }\r\n}","/**\r\n * Die Klasse DeviceData speichert Informationen über das Gerät\r\n */\r\nexport abstract class DeviceData {\r\n  private id: number;\r\n  private MACADDRESS: string;\r\n  private name: string;\r\n  private firmware: string;\r\n  private generation: string;\r\n  protected abstract deviceType: string;\r\n\r\n  /**\r\n   * Erstellt ein neues Gerät\r\n   * @param deviceID die globale GeräteID\r\n   * @param MACADRESS \r\n   * @param deviceName \r\n   * @param firmware \r\n   * @param generation \r\n   */\r\n  protected constructor(deviceID: number, MACADRESS: string, deviceName: string, firmware: string, generation: string) {\r\n    if (deviceID < 0) {\r\n      this.id = -1;\r\n    } else {\r\n      this.id = deviceID;\r\n    }\r\n    this.MACADDRESS = MACADRESS;\r\n    this.name = deviceName;\r\n    this.firmware = firmware;\r\n    this.generation = generation;\r\n  }\r\n\r\n  /**\r\n   * Setzt nur die DeviceID falls beim erstellen des Gerätes die ID -1 übergeben wurde\r\n   * @param deviceID \r\n   */\r\n  setDeviceID(deviceID: number): boolean {\r\n    if (this.id === -1 && deviceID >= 0) {\r\n      this.id = deviceID;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  getMACADDRESS(): string {\r\n    return this.MACADDRESS;\r\n  }\r\n\r\n  getFirmware(): string {\r\n    return this.firmware;\r\n  }\r\n\r\n  getGeneration(): string {\r\n    return this.generation;\r\n  }\r\n\r\n  /**\r\n   * Prüft welches Gerät aktuell benutzt wird und gibt dazu die Passende Klasse zurück\r\n   */\r\n  static loadDevice(deviceID: number, device?: { MACADRESS: string, deviceName: string, firmware: string, generation: string, deviceType: string; }): DeviceData {\r\n    ////////////////////////////////////////////////////\r\n    //Noch herrausfinden Smartphone oder anderes Gerät//\r\n    ////////////////////////////////////////////////////\r\n    if (device != null) {\r\n      if (device.deviceType === \"Smartphone\") {\r\n        return new Smartphone(deviceID, device.MACADRESS, device.deviceName, device.firmware, device.generation);\r\n      } else if (device.deviceType === \"Desktop\") {\r\n        return new Desktop(deviceID, device.MACADRESS, device.deviceName, device.firmware, device.generation);\r\n      } else {\r\n        return new Smartphone(deviceID, device.MACADRESS, device.deviceName, device.firmware, device.generation);\r\n      }\r\n    } else {\r\n      //NUR DUMMY MUSS NOCH GEFÜLLT WERDEN\r\n      return new Smartphone(deviceID, \"\", \"\", \"\", \"\");\r\n    }\r\n  }\r\n  //protected abstract searchSensor(): void;\r\n}\r\n\r\nexport class Smartphone extends DeviceData {\r\n  protected deviceType: string = \"Smartphone\";\r\n  //protected searchSensor(): void { }\r\n}\r\n\r\nexport class Desktop extends DeviceData {\r\n  protected deviceType: string = \"Desktop\";\r\n  //protected searchSensor(): void { }\r\n}\r\n\r\nexport interface IDevice {\r\n  deviceID?: number,\r\n  deviceName: string,\r\n  deviceType: string,\r\n  firmware: string,\r\n  generation: string,\r\n  MACADRESS: string,\r\n  sensorInformation: { sensorTypeID: number, sensorName: string, sensorUniqueID: number; }[];\r\n}","/**\r\n * Diese Klasse beinhaltet nur die ID des AI Models, die auf das Model in der Datenbank verweist.\r\n */\r\nexport class AIModel {\r\n    private id: number; //Die AI Model ID.\r\n\r\n    /**\r\n     * Die übergebene ID muss mit der AIModel ID in der Datenbank übereinstimmen.\r\n     * @param id AIModel ID\r\n     */\r\n    constructor(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * Gibt die AIModel ID zurück.\r\n     */\r\n    getID(): number {\r\n        return this.id;\r\n    }\r\n}","/**\r\n * Diese Klasse repräsentiert einen Messwert verknüpft mit einem Zeitpunkt. Der DataPoint ist das atomare Element jeglicher DataSet-Objekte.\r\n */\r\nexport class DataPoint {\r\n  private value: number[]; //Dies ist der Sensormesswert, meist x,y,z.\r\n  private relativeTime: number; //Dies ist die relative Zeit zum Start der Aufnahme in Sekunden.\r\n\r\n  /**\r\n   * Erstellt einen Datenpunkt.\r\n   * @param value Sensorwert vom Datenpunkt.\r\n   * @param relativeTime Die relative Zeit zum Start der Aufnahme in Sekunden.\r\n   */\r\n  constructor(value: number[], relativeTime: number) {\r\n    this.value = value;\r\n    this.relativeTime = relativeTime;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Sensormesswert zurück.\r\n   */\r\n  public getValue(): number[] {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Gibt die relative Zeit zum Start der Aufnahme in Sekunden zurück.\r\n   */\r\n  public getRelativeTime(): number {\r\n    return this.relativeTime;\r\n  }\r\n}\r\nexport interface IDataPoint {\r\n  value: number[],\r\n  relativeTime: number;\r\n}","import { DataPoint, IDataPoint } from \"./DataPoint\";\r\nimport { SensorData } from \"./SensorData\";\r\n\r\n/**\r\n * Die Klasse DataRow beschreibt eine Reihe aufgenommener Daten eines Sensors.\r\n */\r\nexport class DataRow {\r\n  private id: number; //Dies ist die DataRow ID, diese ist eindeutig für Datensätze.\r\n  private datapoint: DataPoint[] = []; //Dies ist Datenreihe, eine Reihe von Datenpunkten.\r\n  private sensor: SensorData; //Dies ist der Sensor von dem die Daten gelesen wurden.\r\n\r\n  /**\r\n   * Eine neue Datenreihe erstellen.\r\n   * @param sensor Sensor, von dem die Daten gelesen werden.\r\n   * @param dataRowID Eine eindeutige Datenreihen ID.\r\n   */\r\n  constructor(sensor: SensorData, dataRowID: number);\r\n\r\n  /**\r\n   * Eine bereits existierende Datenreihe kann wie folgt in das Model geladen werden.\r\n   * @param sensor der Sensor von dem die Daten gelesen wurden\r\n   * @param dataRowID die ID, welche die Datenreihe bei der ersten Erstellung zugeteilt bekommen hat\r\n   * @param dataRow die aufgenommenen Daten\r\n   * @param dataRow.value der Sensor Messwert\r\n   * @param dataRow.relativeTime die relative Zeit zum Aufnahmestart\r\n   */\r\n  constructor(sensor: SensorData, dataRowID: number, dataRow: IDataPoint[]);\r\n  constructor(sensor: SensorData, dataRowID: number, dataRow?: IDataPoint[]) {\r\n    this.sensor = sensor;\r\n    this.id = dataRowID;\r\n    if (dataRow != null) {\r\n      for (let i = 0; i < dataRow.length; i++) {\r\n        this.datapoint.push(new DataPoint(dataRow[i].value, dataRow[i].relativeTime));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die DataRow ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Fügt den Datenpunkt der Datenreihe hinzu\r\n   * @param dataRow der Datenpunkt\r\n   * @returns false, falls datapoint.value leer ist oder datapoint.relativeTime < 0\r\n   */\r\n  public addDatapoint(dataRow: IDataPoint): boolean {\r\n    for (let i = 0; i < this.datapoint.length; i++) {\r\n      if (this.datapoint[i].getValue().length !== dataRow.value.length || this.datapoint[i].getRelativeTime() === dataRow.relativeTime) {\r\n        return false;\r\n      }\r\n    }\r\n    if (dataRow.value.length === 0 || dataRow.relativeTime < 0) {\r\n      return false;\r\n    } else {\r\n      this.datapoint.push(new DataPoint(dataRow.value, dataRow.relativeTime));\r\n      return true;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihe zurück.\r\n   * @returns value ist der Messwert und relativeTime die relative Zeit in Millisekunden zum Aufnahmestart.\r\n   */\r\n  public getDataRow(): IDataRowST {\r\n    var dataRowST: IDataRowST;\r\n    var dataRow: IDataPoint[] = [];\r\n    for (let i = 0; i < this.datapoint.length; i++) {\r\n      dataRow.push({ value: this.datapoint[i].getValue(), relativeTime: this.datapoint[i].getRelativeTime() });\r\n    }\r\n    var sensorType: number = this.sensor.SensorTypeID;\r\n    dataRowST = { sensorType, datapoint: dataRow };\r\n    return dataRowST;\r\n  }\r\n}\r\nexport interface IDataRowST {\r\n  sensorType: number,\r\n  datapoint: IDataPoint[];\r\n}\r\nexport interface IDataRowRID {\r\n  dataRowID: number,\r\n  dataRow: IDataPoint[];\r\n}\r\nexport interface IDataRowSTRID {\r\n  sensorType: number,\r\n  dataRowID: number,\r\n  dataRow: IDataPoint[];\r\n}","/**\r\n * Diese Klasse repräsentiert ein Zeitfenster.\r\n * Mit start als Anfang und end als Ende des Zeitfensters.\r\n */\r\nexport class TimeSpan {\r\n  private start: number; //Startpunkt des Zeitfensters in Sekunden.\r\n  private end: number; //Enpunkt des Zeitfensters in Sekunden.\r\n\r\n  /**\r\n   * Erstellt ein Zeitfenster.\r\n   * @param start Startpunkt in Sekunden (start >= 0)\r\n   * @param end Endpunkt in Sekunden (end >= start)\r\n   */\r\n  public constructor(span: ISpan) {\r\n    if (span.start >= 0) {\r\n      this.start = span.start;\r\n    } else {\r\n      this.start = 0;\r\n    }\r\n    if (span.end >= this.start) {\r\n      this.end = span.end;\r\n    } else {\r\n      this.end = this.start;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt das übergebene Zeitfenster als Zeitfenster, wenn dies den Anforderungen entspricht. (0 <= start <= end)\r\n   * @returns false, falls das Zeitfenster nicht gesetzt wurde\r\n   */\r\n  public setTimeSpan(span: ISpan): boolean {\r\n    if (span.end >= span.start && span.start >= 0) {\r\n      this.start = span.start;\r\n      this.end = span.end;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Startpunkt in Sekunden zurück.\r\n   */\r\n  public getStart(): number {\r\n    return this.start;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Enpunkt in Sekunden zurück.\r\n   */\r\n  public getEnd(): number {\r\n    return this.end;\r\n  }\r\n}\r\nexport interface ISpan {\r\n  start: number,\r\n  end: number;\r\n}","import { ISpan, TimeSpan } from \"./TimeSpan\";\r\n\r\n/**\r\n * Diese Klasse ist fürs labeln zuständig, sie besitzt ein Zeitfenster und dazu einen Namen.\r\n */\r\nexport class Label {\r\n  private name: string; //Der Name des Labels.\r\n  private labelID: number; //Die ID des Labels.\r\n  private timeSpan: TimeSpan; //Das Zeitfenster des Labels mit Start- und Endzeit.\r\n\r\n  /**\r\n   * Erstellt ein Label.\r\n   * @param name Ist der Name des Labels.\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   */\r\n  constructor(name: string, labelID: number, span: ISpan) {\r\n    this.name = name;\r\n    this.labelID = labelID;\r\n    this.timeSpan = new TimeSpan(span);\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param name Ist bei angabe der neue Name des Labels.\r\n   */\r\n  setLabel(span: ISpan, name?: string): boolean {\r\n    const setted: boolean = this.timeSpan.setTimeSpan(span);\r\n    if (setted) {\r\n      if (name != null) {\r\n        this.name = name;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt das Label als Objekt zurück.\r\n   * In diesem Objekt werden die Start- und Endzeit als \"start\" und \"end\", der Label Name als \"name\" sowie die Label ID als \"id\" übergeben.\r\n   */\r\n  getLabel(): ILabel {\r\n    var label: ILabel = {\r\n      name: this.name,\r\n      labelID: this.labelID,\r\n      span: {\r\n        start: this.timeSpan.getStart(),\r\n        end: this.timeSpan.getEnd()\r\n      }\r\n    };\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Gibt die LabelID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.labelID;\r\n  }\r\n}\r\n\r\nexport interface ILabel {\r\n  name: string,\r\n  labelID: number,\r\n  span: ISpan,\r\n  start?: number,\r\n  end?: number;\r\n}","import { IDataPoint } from \"./DataPoint\";\r\nimport { DataRow, IDataRowRID, IDataRowST, IDataRowSTRID } from \"./DataRow\";\r\nimport { ILabel, Label } from \"./Label\";\r\nimport { SensorData } from \"./SensorData\";\r\nimport { ISpan } from \"./TimeSpan\";\r\n\r\n/**\r\n * Die Klasse fasst Datenreihen, welche Sensorwerte und deren relative Zeit besitzen, zu einem Datensatz zusammen.\r\n */\r\nexport class DataSet {\r\n  private generateDate: number; //Dies ist die Erstellungszeit dieses Datensatzes in Millisekunden.\r\n  private id: number; //Dies ist die Datensatz ID.\r\n  private name: string; //Dies ist der Name des Datensatzes.\r\n  private dataRow: DataRow[] = []; //Dies sind die Datenreihen, welche zu dem Datensatz gehören.\r\n  private label: Label[] = []; //Dies sind die existierenden Labels für den Datensatz.\r\n\r\n  /**\r\n   * Eine bereits existierende Datensatz kann wie folgt in das Model geladen werden.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden, \r\n   * die Anzahl muss mit der Anzahl der Datenreihen übereinstimmen. Und der i´te Sensor wird zur i´ten Datenreihe hinzugefügt.\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   * @param dataRows die schon existierenden Datenreihen\r\n   * @param label die schon existierenden Labels\r\n   */\r\n  constructor(dataSetID: number, dataSetName: string, generateDate: number, dataRows: IDataRowSTRID[], label?: ILabel[]) {\r\n    if (dataRows != null) {\r\n      for (let i = 0; i < dataRows.length; i++) {\r\n        this.dataRow.push(new DataRow({ SensorTypeID: dataRows[i].sensorType }, dataRows[i].dataRowID, dataRows[i].dataRow));\r\n      }\r\n    }\r\n    if (label != null) {\r\n      for (let i = 0; i < label.length; i++) {\r\n        if (label[i].span !== undefined) {\r\n          this.label.push(new Label(label[i].name, label[i].labelID, label[i].span));\r\n        } else if (label[i].start !== undefined && label[i].end !== undefined) {\r\n          this.label.push(new Label(label[i].name, label[i].labelID, { start: label[i].start!, end: label[i].end! }));\r\n        }\r\n      }\r\n    }\r\n    if (generateDate != null) {\r\n      this.generateDate = generateDate;\r\n    } else {\r\n      this.generateDate = new Date().getTime();\r\n    }\r\n    this.id = dataSetID;\r\n    this.name = dataSetName;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datensatz ID zurück.\r\n   */\r\n  public getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Datensatz Namen zurück.\r\n   */\r\n  public getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: IDataPoint): boolean {\r\n    for (let i = 0; i < this.dataRow.length; i++) {\r\n      if (this.dataRow[i].getID() === dataRowID) {\r\n        return this.dataRow[i].addDatapoint(datapoint);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Datenreihen zurück.\r\n   * @returns Ein zwei Dimensionales Array, die Erste Dimension wählt die Datenreihe und die zweite Dimension den Datenpunkt.\r\n   */\r\n  public getDataRows(): IDataRowST[] {\r\n    var dataRows: IDataRowST[] = [];\r\n    for (let i = 0; i < this.dataRow.length; i++) {\r\n      dataRows.push(this.dataRow[i].getDataRow());\r\n    }\r\n    return dataRows;\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Label\r\n   * @param labelID die eindeutige Label ID\r\n   * @param name der Labelname\r\n   * @param start die Startzeit des Zeitfensters in Millisekunden\r\n   * @param end die Endzeit des Zeitfensters in Millisekunden\r\n   * @returns falls das Label mit der ID schon existiert wird false zurück gegeben\r\n   */\r\n  public createLabel(labelID: number, span: ISpan, labelName: string): boolean {\r\n    if (labelID < 0 || span.start < 0 || span.end < span.start) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() === labelID) {\r\n        return false;\r\n      }\r\n    }\r\n    this.label.push(new Label(labelName, labelID, span));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param span ist die Start- und Endzeit in Millisekunden.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert wird false zurück gegeben\r\n   */\r\n  public setLabel(labelID: number, span: ISpan, labelName?: string): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() === labelID) {\r\n        return this.label[i].setLabel(span, labelName);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht das Label mit der übergebenen LabelID.\r\n   * @param labelID die LabelID\r\n   */\r\n  public deleteLabel(labelID: number): boolean {\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      if (this.label[i].getID() === labelID) {\r\n        this.label.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln zurück.\r\n   */\r\n  public getLabels(): ILabel[] {\r\n    var labelList: ILabel[] = [];\r\n    for (let i = 0; i < this.label.length; i++) {\r\n      labelList.push(this.label[i].getLabel());\r\n    }\r\n    return labelList;\r\n  }\r\n}\r\nexport interface IDataSet {\r\n  dataSetID: number,\r\n  dataSetName: string,\r\n  generateDate: number,\r\n  dataRows: IDataRowSTRID[],\r\n  label: ILabel[];\r\n}","import { User } from \"./User\";\r\n\r\n/**\r\n * Diese Klasse Speichert die Session informationen\r\n */\r\nexport class Session {\r\n  private id: number; //Die eindeutige ID der Session\r\n  private connectedUser: User[] = []; //Die User die mit der Projekt der Session interagieren\r\n\r\n  /**\r\n   * Erstellt eine Session\r\n   * @param id Diese ID muss global eindeutig sein\r\n   * @param admin Der Admin, dem diese Session gehört\r\n   */\r\n  constructor(id: number) {\r\n    if (id < 0) {\r\n      this.id = -1;\r\n    } else {\r\n      this.id = id;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fügt eine User als Verbundener User zu der Session hinzu\r\n   * @param user Der User, der hinzugefügt wird\r\n   */\r\n  connectUser(user: User): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() === user.getID()) {\r\n        return false;\r\n      }\r\n    }\r\n    this.connectedUser.push(user);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Meldet einen User von der aktuellen Session ab\r\n   * @param user Der User, der abgemeldet werdern soll\r\n   */\r\n  disconnectUser(userID: number): boolean {\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      if (this.connectedUser[i].getID() === userID) {\r\n        this.connectedUser.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen verbundenen Usern die ID und den Namen zurück\r\n   */\r\n  getConnectedUsers(): IUserInfo[] {\r\n    var users: IUserInfo[] = [];\r\n    for (let i = 0; i < this.connectedUser.length; i++) {\r\n      users.push({ userID: this.connectedUser[i].getID(), userName: this.connectedUser[i].getName() });\r\n    }\r\n    return users;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\nexport interface IUserInfo {\r\n  userID: number,\r\n  userName: string;\r\n}","import { AIModel } from \"./AIModel\";\r\nimport { IDataPoint } from \"./DataPoint\";\r\nimport { IDataRowRID, IDataRowST, IDataRowSTRID } from \"./DataRow\";\r\nimport { DataSet, IDataSet } from \"./DataSet\";\r\nimport { ILabel } from \"./Label\";\r\nimport { Session } from \"./Session\";\r\nimport { ISpan } from \"./TimeSpan\";\r\n\r\n/**\r\n * Diese Klasse speichert alle Informationen zu einem Projekt.\r\n * Ein Projekt beinhaltet aufgezeichnete Datensätze (DataSet) sowie Informationen zu den Datensätzen.\r\n */\r\nexport class Project {\r\n  private id: number; //Die eindeutige Projekt ID\r\n  private name: string; //Der Name des Projektes\r\n  private session: Session; //Die Session in dem das Projekt arbeitet\r\n  private aiModel: AIModel[] = []; //Das AIModel von dem Projekt\r\n  private dataSet: DataSet[] = []; //Die Datensätze, die zu dem Projekt gehören\r\n  private currentDataSet?: DataSet; //Aktueller Datensatz\r\n\r\n  /**\r\n     * Eine bereits existierendes Projekt kann wie folgt in das Model geladen werden.\r\n     * @param projectID Die Projekt ID\r\n     * @param sessionID Die Session ID\r\n     * @param projectName Der Projektnamen\r\n     * @param admin Der Besitzer dieses Projekts für die Session\r\n     * @param aiModelID Die schon existierenden AIModel IDs\r\n     * @param dataSet Die schon existierenden Datensätze\r\n     */\r\n  constructor(projectID: number, sessionID: number, projectName: string, projectData?: IProjectData) {\r\n    this.id = projectID;\r\n    this.name = projectName;\r\n    this.session = new Session(sessionID);\r\n    if (projectData !== undefined) {\r\n      if (projectData.aiModelID !== undefined) {\r\n        for (const id of projectData.aiModelID) {\r\n          this.aiModel.push(new AIModel(id));\r\n        }\r\n      }\r\n      for (const entry of projectData.dataSet) {\r\n        let dataSet: DataSet;\r\n        dataSet = new DataSet(\r\n          entry.dataSetID,\r\n          entry.dataSetName,\r\n          entry.generateDate,\r\n          entry.dataRows,\r\n          entry.label\r\n        );\r\n        this.dataSet.push(dataSet);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Methode die noch nicht benutzt wird aber eventuell das laufgeschehen verbessern\r\n    updateProject(projectID: number, sessionID: number, projectName: string, projectData?: {\r\n      aiModelID?: number[],\r\n      dataSet: {\r\n        dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n        dataRows: {\r\n          dataRowID: number,\r\n          dataRow: { value: number[], relativeTime: number; }[];\r\n        }[],\r\n        label: { name: string, labelID: number, start: number, end: number; }[];\r\n      }[];\r\n    }): boolean {\r\n      if (this.id == projectID && sessionID == this.session.getID()) {\r\n        this.name = projectName;\r\n        if (projectData !== undefined) {\r\n          if (projectData.aiModelID !== undefined) {\r\n            for (const id of projectData.aiModelID) {\r\n              for (let i: number = 0; i < this.aiModel.length; i++) {\r\n                if (id == this.aiModel[i].getID()) {\r\n                  break;\r\n                }\r\n                if (i == this.aiModel.length - 1) {\r\n                  this.aiModel.push(new AIModel(id));\r\n                }\r\n              }\r\n            }\r\n          }////////////////////////////////////////////////////////TODO\r\n          /*\r\n          for (const entry of projectData.dataSet) {\r\n            let dataSet = new DataSet(\r\n              entry.dataRowSensors,\r\n              entry.dataSetID,\r\n              entry.dataSetName,\r\n              entry.generateDate,\r\n              entry.dataRows,\r\n              entry.label\r\n            );\r\n            this.dataSet.push(dataSet);\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  */\r\n\r\n  /**\r\n   * Gibt den Projektnamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der DatensatzID\r\n   * @param dataSetID die Datensatz ID\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.dataSet.splice(i, 1);\r\n        if (this.currentDataSet != null && this.currentDataSet.getID() === dataSetID) {\r\n          delete this.currentDataSet;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Projekt ID zurück.\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Erstellt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n   * @param dataRowSensors die Sensoren, von denen die Daten ausgelesen werden\r\n   * @param dataSetID die eindeutige Datensatz ID\r\n   * @param dataSetName der Datensatznamen\r\n   * @param generateDate die Erstellungszeit von dem Datensatz\r\n   */\r\n  createDataSet(dataSetID: number, dataSetName: string, generateDate: number, dataRow: IDataRowSTRID[]): boolean {\r\n    if (dataRow.length <= 0 || dataSetID < 0 || dataSetName.length <= 0 || (generateDate != null && generateDate < 0)) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var dataSet: DataSet = new DataSet(dataSetID, dataSetName, generateDate, dataRow);\r\n    this.dataSet.push(dataSet);\r\n    this.currentDataSet = dataSet;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Fügt den übergebenen Datenpunkt dem aktuellen Datensatz hinzu\r\n   * @param dataRowID die DatenreihenID\r\n   * @param datapoint der Datenpunkt\r\n   * @returns true, wenn der Datenpunkt zur Datenreihe hinzugefügt werden konnte\r\n   */\r\n  addDatapoint(dataRowID: number, datapoint: IDataPoint): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): IDataSetInfo[] {\r\n    let dataSetMetas: { dataSetID: number, dataSetName: string; }[] = [];\r\n    for (const dataSet of this.dataSet) {\r\n      dataSetMetas.push({ \"dataSetID\": dataSet.getID(), \"dataSetName\": dataSet.getName() });\r\n    }\r\n    return dataSetMetas;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: IDataRowST[]; } {\r\n    for (let i = 0; i < this.dataSet.length; i++) {\r\n      if (this.dataSet[i].getID() === dataSetID) {\r\n        this.currentDataSet = this.dataSet[i];\r\n        return { dataRows: this.dataSet[i].getDataRows() };\r\n      }\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Datenreihen der aktuellen Datenreihe zurück\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: IDataRowST[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { dataRows: this.currentDataSet.getDataRows() };\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID zurück\r\n   */\r\n  getSessionID(): number {\r\n    return this.session.getID();\r\n  }\r\n\r\n  /**\r\n   * Setzt dem Label mit der übergebenen ID neue Werte.\r\n   * @param start Ist die neue Startzeit des Labels.\r\n   * @param end Ist die neue Endzeit des Labels.\r\n   * @param labelID Die Label ID, welche überarbeitet werden soll.\r\n   * @param labelName Ist bei Angabe der neue Name des Labels.\r\n   * @returns falls das Label nicht existiert oder es kein aktuellen Datensatz gibt wird false zurück gegeben\r\n   */\r\n  createLabel(labelID: number, span: ISpan, labelName: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.createLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Überschreibt ein bestehendes Label \r\n   * @param labelID die LabelID von dem zu überschreibenden Label\r\n   * @param span das neue Zeitfenster\r\n   * @param labelName falls das Label neu benannt werden soll\r\n   * @returns \r\n   */\r\n  setLabel(labelID: number, span: ISpan, labelName?: string): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht ein bestehendes Label mit der LabelID\r\n   * @param labelID die LabelID, von dem Label das gelöscht werden soll\r\n   * @returns \r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentDataSet != null) {\r\n      return this.currentDataSet.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels: ILabel[]; } {\r\n    if (this.currentDataSet != null) {\r\n      return { labels: this.currentDataSet.getLabels() };\r\n    }\r\n    return { labels: [] };\r\n  }\r\n}\r\nexport interface IDataSetInfo {\r\n  dataSetID: number,\r\n  dataSetName: string;\r\n}\r\nexport interface IProjectData {\r\n  aiModelID?: number[],\r\n  dataSet: IDataSet[];\r\n}","import { AIController } from \"../controller/AIController\";\r\nimport { IDataPoint } from \"./DataPoint\";\r\nimport { IDataRowST, IDataRowSTRID } from \"./DataRow\";\r\nimport { DeviceData, IDevice } from \"./DeviceData\";\r\nimport { ILabel } from \"./Label\";\r\nimport { IProjectData, Project } from \"./Project\";\r\nimport { SensorData } from \"./SensorData\";\r\nimport { ISpan } from \"./TimeSpan\";\r\n\r\n/**\r\n * Die Vorlage für alle existierenden Benutzer\r\n */\r\nexport abstract class User {\r\n  protected id: number; //Die eindeutige User ID\r\n  protected name: string; //Der Name des Users\r\n  protected device: DeviceData; //Das Benutzergerät des Benutzers\r\n  protected currentProject?: Project;\r\n  private dataSetID: number;\r\n\r\n  /**\r\n   * Erstellt einen Benutzer\r\n   * @param id eindeutige Benutzer ID\r\n   * @param name Name des Benutzer\r\n   */\r\n  constructor(id: number, device: DeviceData, name?: string) {\r\n    if (id < 0) {\r\n      this.id = -1;\r\n    } else {\r\n      this.id = id;\r\n    }\r\n    this.device = device;\r\n    if (name !== undefined) {\r\n      this.name = name;\r\n    } else {\r\n      this.name = this.device.getName();\r\n    }\r\n    this.dataSetID = -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die aktuelle Datensatz ID zurück, falls diese nicht existiert wird -1 zurück gegeben.\r\n   */\r\n  getCurrentDataSetID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataSetID();\r\n    } else {\r\n      return this.dataSetID;\r\n    }\r\n  }\r\n\r\n  setCurrentDataSetID(newID: number): void {\r\n    if (this.name === AIController.AI_MODEL_USER_NAME) {\r\n      this.dataSetID = newID;\r\n    } else {\r\n      this.dataSetID = -1;\r\n    }\r\n  }\r\n\r\n  getCurrentProjectID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  addDatapoint(dataRowID: number, datapoint: IDataPoint): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.addDatapoint(dataRowID, datapoint);\r\n    }\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: IDataRowST[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getDataRows(dataSetID);\r\n    } else {\r\n      return { dataRows: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: IDataRowST[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getCurrentDataRows();\r\n    } else {\r\n      return { dataRows: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getSessionID();\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Erstellt für das aktuelle Projekt einen neuen Datensatz und setzt diesen als aktuellen Datensatz.\r\n     * @param dataSetID die eindeutige Datensatz ID\r\n     * @param dataSetName der Datensatznamen\r\n     * @param generateDate die Erstellungszeit von dem Datensatz\r\n     * @returns false, falls kein aktuelles Prokekt existiert\r\n     */\r\n  createDataSet(dataSetID: number, dataSetName: string, generateDate: number, dataRow: IDataRowSTRID[]): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createDataSet(dataSetID, dataSetName, generateDate, dataRow);\r\n    } else {\r\n      this.setCurrentDataSetID(dataSetID);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Löscht vom aktuellen Projekt den Datensatz, mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns gibt die ProjektID zurück, zu dem der Datensatz gehörte, -1 falls der Datensatz nicht existiert hat\r\n   */\r\n  deleteDataSet(dataSetID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteDataSet(dataSetID);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Erstellt für das aktuelle Projekt und dem aktuellen Datensatz ein Label mit den übergebeben Parametern\r\n   * @param labelID Ist die eindeutige Label ID des Labels.\r\n   * @param start Ist die Startzeit des Labels.\r\n   * @param end Ist die Endzeit des Labels.\r\n   * @returns false, falls kein aktueller Datensatz existiert oder die LabelID für diesen Datensatz nicht eindeutig ist\r\n   */\r\n  createLabel(labelID: number, span: ISpan, labelName: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.createLabel(labelID, span, labelName);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt beim aktuellen Datensatz dem Label mit der LabelID die neu übergebenen Daten\r\n   * @param labelID \r\n   * @param start startzeit des Labels in Millisekunden\r\n   * @param end endzeit des Labels in Millisekunden\r\n   */\r\n  setLabel(labelID: number, span: ISpan, labelName?: string): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.setLabel(labelID, span, labelName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht von dem aktuellen Projekt und dem aktuellen Datensatz das Label mit der Label ID\r\n   * @param labelID die Label ID\r\n   * @returns false, falls kein aktueller Datensatz existiert oder kein Label mit der Label ID existiert\r\n   */\r\n  deleteLabel(labelID: number): boolean {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.deleteLabel(labelID);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gibt alle Daten von allen Labeln vom aktuellen Datensatz zurück.\r\n   * @returns leer, falls kein aktueller Datensatz existiert\r\n   */\r\n  getLabels(): { labels: ILabel[]; } {\r\n    if (this.currentProject != null) {\r\n      return this.currentProject.getLabels();\r\n    }\r\n    return { labels: [] };\r\n  }\r\n\r\n  /**\r\n  * Lädt ein bestehendes Projekt in das Model\r\n  * @param project die Projektdaten\r\n  * @returns false, falls die Projekt ID schon existiert\r\n  */\r\n  abstract loadProject(project: IProject): boolean;\r\n\r\n  /**\r\n   * Gibt alle Sensoren aus, die das Benutzergerät und das Programm unterstützt\r\n  \r\n  getDeviceSensors(sensorTypeID: number[]): SensorData[] {\r\n    return this.device.getSensors(sensorTypeID);\r\n  }\r\n\r\n  /**\r\n   * Gibt die SensorTypID der auswählbaren Sensoren zurück\r\n  getAvailableSensors(): number[] {\r\n    return this.device.getAvailableSensors();\r\n  } */\r\n\r\n  /**\r\n   * Gibt von allen Datensätzen vom aktuellen Projekt Informationen zurück\r\n   * @returns dataSetID ist die DatensatzID und dataSetName ist der Datensatzname\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.currentProject !== undefined) {\r\n      return this.currentProject.getDataSetMetas();\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setzt einen neuen Benutzernamen\r\n   * @param name der neue Benutzername\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Gibt den Benutzernamen zurück\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Setzt ein neues Benutzergerät\r\n   * @param device das Benutzergerät\r\n   */\r\n  setDevice(device: DeviceData) {\r\n    this.device = device;\r\n  }\r\n\r\n  /**\r\n   * Gibt falls ein Benutzergerät verfügbar ist dieses zurück\r\n   */\r\n  getDevice(): { device?: DeviceData; } {\r\n    return { device: this.device };\r\n  }\r\n\r\n  /**\r\n   * Gibt die Benutzer ID zurück\r\n   */\r\n  getID(): number {\r\n    return this.id;\r\n  }\r\n}\r\n\r\n/**\r\n * Die Klasse Admin dient für einen Benutzer mit einem Account\r\n */\r\nexport class Admin extends User {\r\n  private email: string; //Die eindeutige Admin Email\r\n  private project: Project[] = []; //Alle Projekte, die zu dem Admin gehören\r\n\r\n  /**\r\n   * Zum erstellen eines Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID des Admins\r\n   * @param adminName der Name des Admins\r\n   * @param email die Emailadresse des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string);\r\n\r\n  /**\r\n   * Für die Implementierung eines Bestehenden Admins\r\n   * @param adminID die Admin ID\r\n   * @param deviceID die Geräte ID\r\n   * @param adminName der Admin Name\r\n   * @param email die Emailadresse des Admins\r\n   * @param device das Gerät des Admins\r\n   */\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string, device: IDevice);\r\n  ////////////////////////////////////////TODO\r\n\r\n  constructor(adminID: number, deviceID: number, adminName: string, email: string, device?: IDevice) {\r\n    super(adminID, DeviceData.loadDevice(deviceID, device), adminName);\r\n    this.email = email;\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: IProject): boolean {\r\n    var id = this.existProject(project.projectID);\r\n    var newProject: Project = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    this.currentProject = newProject;\r\n    if (id === -1) {\r\n      this.project.push(newProject);\r\n    } else {\r\n      this.project[id] = newProject;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* Methode die noch nicht benutzt wird aber eventuell das laufgeschehen verbessern\r\n    /**\r\n     * Aktuallisiert das Projekt mit den übergebenen Daten\r\n     \r\n    updateProject(project: {\r\n      projectID: number, sessionID: number, projectName: string, projectData?: {\r\n        aiModelID?: number[],\r\n        dataSet: {\r\n          dataRowSensors: SensorData[], dataSetID: number, dataSetName: string, generateDate: number,\r\n          dataRows: {\r\n            dataRowID: number,\r\n            dataRow: { value: number[], relativeTime: number; }[];\r\n          }[],\r\n          label: { name: string, labelID: number, start: number, end: number; }[];\r\n        }[];\r\n      };\r\n    }): boolean {\r\n      var id = this.existProject(project.projectID);\r\n      if (id === -1) {\r\n        return false;\r\n      } else {\r\n        return this.project[id].updateProject(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n      }\r\n    }\r\n    */\r\n\r\n  /**\r\n   * Fügt ein neues Projekt mit den übergebenen Parametern hinzu und setzt dieses Projekt als aktuelles Projekt\r\n   * @param projectID die Projekt ID, diese muss für den Admin eindeutig sein\r\n   * @param sessionID die Session ID, diese muss global eindeutig sein\r\n   * @param projectName der Name des Projektes\r\n   * @returns Bei angabe einer Project ID, die schon existiert wird false zurück gegeben\r\n   */\r\n  createProject(projectID: number, sessionID: number, projectName: string): boolean {\r\n    if (this.existProject(projectID) === -1) {\r\n      var newproject: Project = new Project(projectID, sessionID, projectName);\r\n      this.project.push(newproject);\r\n      this.currentProject = newproject;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prüft ob ein Projekt mit der ID existiert und gibt die Stelle im Projekt array zurück an dem das Projekt liegt\r\n   * @param projectID \r\n   * @returns -1 falls das Projekt nicht existiert oder die Array Position des Projekts\r\n   */\r\n  private existProject(projectID: number): number {\r\n    for (let i = 0; i < this.project.length; i++) {\r\n      if (this.project[i].getID() === projectID) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt die Admin Emailadresse zurück\r\n   */\r\n  getEmail(): string {\r\n    return this.email;\r\n  }\r\n}\r\n\r\n/**\r\n * Dataminer ist die Klasse, um Datensammler mit ihren Geräte Sensoren zu spreichern\r\n */\r\nexport class Dataminer extends User {\r\n  /**\r\n   * Erstellt einen Datensammler\r\n   * @param id die Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: IProject): boolean {\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * AIModelUser ist die Klasse, um KI-Modell Benutzer zu speichern\r\n */\r\nexport class AIModelUser extends User {\r\n  /**\r\n   * Erstellt einen KI-Modell Benutzer, wenn Name \"\" gesetzt ist und eine Geräte ID gesetzt ist wird als Name der Geräte Name gewählt\r\n   * @param id die eindeutige Benutzer ID\r\n   * @param name der Benutzername\r\n   * @param deviceID die Geräte ID\r\n   */\r\n  constructor(id: number, deviceID: number, name?: string) {\r\n    super(id, DeviceData.loadDevice(deviceID), name);\r\n  }\r\n\r\n  /**\r\n   * Implementiert die abstrakte Methode von User\r\n   */\r\n  loadProject(project: IProject): boolean {\r\n    this.currentProject = new Project(project.projectID, project.sessionID, project.projectName, project.projectData);\r\n    return true;\r\n  }\r\n}\r\nexport interface IProject {\r\n  projectID: number,\r\n  sessionID: number,\r\n  projectName: string,\r\n  projectData?: IProjectData;\r\n}","/**\r\n * Diese Klasse verwaltet die Interaktion mit dem Python-Backend und die zugehörige Kommunikation.\r\n * Sie ist verantwortlich für den Bau von KI-Modellen und für die Ausführung derselben.\r\n */\r\nexport class AIBuilder {\r\n    private modelId: number;\r\n    private static readonly url: string = \"../\";\r\n    private static readonly buildModel: string = \"src/buildModel/\";\r\n    private static readonly classify: string = \"src/classify/\";\r\n\r\n    /**\r\n     * Erstellt den AIBuilder und übergibt ihm die ID des zu bearbeitenden Modells.\r\n     * @param modelId Die ID des zu erstellenden oder zu verwendenden Modells\r\n     */\r\n    constructor(modelId: number) {\r\n        this.modelId = modelId;\r\n    }\r\n\r\n    /**\r\n     * Ruft die Python-Schnittstelle auf dem Server auf, um ein KI-Modell zu erstellen und zu trainieren.\r\n     * @param modelData Sämtliche relevanten Daten, um das gewünschte KI-Modell erstellen zu können.\r\n     * Diese müssen das folgende Format haben, wenn zu JSON gepackt:\r\n     * ```\r\n     * {\r\n     *     \"dataSets\": [\r\n     *         42\r\n     *     ],\r\n     *     \"classifier\": \"Classifier\",\r\n     *     \"scaler\": \"Scaler\",\r\n     *     \"features\": [\r\n     *         \"featurename#13\"\r\n     *     ],\r\n     *     \"projectID\": 1,\r\n     *     \"trainingDataPercentage\": 0.8, // optional\r\n     *     \"slidingWindowSize\": 128,      // optional\r\n     *     \"slidingWindowStep\": 64        // optional\r\n     * }\r\n     * ```\r\n     * Die Reihenfolge ist unwichtig.\r\n     */\r\n    applyModel(dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[], projectID: number, trainingDataPercentage: number = 1, slidingWindowSize: number = 128, slidingWindowStep: number = 64): void {\r\n        const modelData = {\r\n            \"dataSets\":               dataSets,\r\n            \"imputator\":              imputator,\r\n            \"classifier\":             classifier,\r\n            \"scaler\":                 scaler,\r\n            \"features\":               features,\r\n            \"projectID\":              projectID,\r\n            \"trainingDataPercentage\": trainingDataPercentage,\r\n            \"slidingWindowSize\":      slidingWindowSize,\r\n            \"slidingWindowStep\":      slidingWindowStep\r\n        }\r\n        this.sendRequest(JSON.stringify(modelData), AIBuilder.url + AIBuilder.buildModel, console.log);\r\n    }\r\n\r\n    /**\r\n     * Diese Methode ruft die Python-Schnittstelle auf dem Server auf, um ein KI-Modell einen Datensatz klassifizieren zu lassen.\r\n     * @param dataSetId Die ID des Datensatzes, den das KI-Modell klassifizieren soll.\r\n     * @param callBack Eine Rückmelde-Funktion des \"aufrufenden\" Controllers, mit der das Ergebnis der Klassifizierung an den Controller zurückgegeben wird.\r\n     */\r\n    classify(dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\r\n        let requestData: string = JSON.stringify({ \"classifier\": this.modelId, \"dataSet\": dataSetId });\r\n        this.sendRequest(requestData, AIBuilder.url + AIBuilder.classify, callBack);\r\n    }\r\n\r\n    /**\r\n     * Diese private Methode fässt den Versandprozess der Subanfrage an den Anwendungsserver zusammen.\r\n     * @param requestData Die mit der Anfrage zu versendenden Daten. Hat gültiges JSON zu sein, außer plainText ist gesetzt.\r\n     * @param url Die Adresse, an die die Anfrage gestellt wird. Am besten was auf demselben Server, ansonsten bekommt der Browser nen Kasper.\r\n     * @param successAction Eine Funktion, die bei erfolgreicher Durchführung der Anfrage auszuführen ist.\r\n     * @param plainText Gibt an, dass die Daten als Plaintext zu versenden sind.\r\n     */\r\n    private sendRequest(requestData: string, url: string, successAction: <R = unknown>(param: string | object) => R, plainText: boolean = false) {\r\n        let xhr = new XMLHttpRequest(); // XHR ist kurz für XmlHttpRequest\r\n        xhr.open(\"POST\", url, true);\r\n        xhr.onreadystatechange = () => {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    var responseJSON: object | null;\r\n                    try {\r\n                        responseJSON = JSON.parse(xhr.responseText);\r\n                    }\r\n                    catch (e) {\r\n                        responseJSON = null;\r\n                    }\r\n                    if (responseJSON == null) {\r\n                        successAction(xhr.responseText);\r\n                    }\r\n                    else {\r\n                        successAction(responseJSON);\r\n                    }\r\n                }\r\n                else if (xhr.status === 406) {\r\n                    throw new Error(\"Error in request data - not accepted by Server\");\r\n                }\r\n                else {\r\n                    xhr.send(requestData);\r\n                }\r\n            }\r\n        };\r\n        if (!plainText) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        }\r\n        xhr.send(requestData);\r\n    }\r\n}\r\n","import { DeliveryFormat } from './DeliveryFormat';\r\n\r\n/**\r\n * Diese Klasse verwaltet die Auslieferungsformalitäten für trainierte KI-Modelle.\r\n */\r\nexport class AIDistributor {\r\n    private static readonly url: string = \"../src/deliverance/\";\r\n    private static readonly headers = { 'ContentType': 'application/json' };\r\n    private format: DeliveryFormat;\r\n    private id: number;\r\n\r\n    /**\r\n     * Dieser Konstruktor erzeugt das Objekt in Abhängigkeit vom gewählten Auslieferungsformat. \r\n     * Dieses sorgt an verschiedenen Stellen im Programmablauf für unterschiedliche Vorgehensweisen.\r\n     * @param format Das Auslieferungsformat.\r\n     */\r\n    constructor ( id: number, format: DeliveryFormat ) {\r\n        this.format = format;\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * Gibt in Abhängigkeit vom Auslieferungsformat entweder das fertige KI-Modell als \r\n     * ausführbare Datei zurück, oder sämtliche Daten, die nötig sind, um das KI-Modell \r\n     * später als Web-Anwendung auszuführen.\r\n     * \r\n     * Der Return-Typ ist einzig aus dem Grund \"any\", weil sich so das Problem löst, dass\r\n     * man von einem blanken Objekt keine spezifischen Eigenschaften erwarten kann.\r\n     */\r\n    getAIModel (): any {\r\n        let data = this.sendRequest( { \"id\": this.id, \"format\": this.format, \"job\": \"get\" } );\r\n        let success: boolean;\r\n        try {\r\n            success = Object.keys( data ).includes( \"url\" );\r\n        }\r\n        catch ( e ) {\r\n            success = false;\r\n        }\r\n        if ( !success ) {\r\n            throw new Error( \"Connection issue: \" + data.status + \": \" + data.statusText );\r\n        }\r\n        switch ( this.format ) {\r\n            case DeliveryFormat.EXE:\r\n                throw new Error( \"Not implemented.\" );\r\n            //location.href = data.url;\r\n            //return dataX;\r\n            case DeliveryFormat.WEB_APP:\r\n                return { \"url\": data.url };\r\n            default:\r\n                throw new Error( \"Illegal delivery format.\" );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Diese Methode reicht die übergebenen E-Mail-Adressen an den Server weiter, damit dieser \r\n     * einen Link zum KI-Modell, dessen laufende Nummer im Objekt hinterlegt ist, \r\n     * an sämtliche dieser Adressen versendet.\r\n     * \r\n     * @param emailList Die E-Mail-Adressen, an die der Server den Nutzungslink zum Modell versenden soll.\r\n     * @returns True, wenn die Anfrage an den Server erfolgreich war, False andernfalls.\r\n     */\r\n    sendAIModel ( emailList: string[] ): boolean {\r\n        let recipients: { \"email\": string; }[] = [];\r\n        emailList.forEach( ( address ) => recipients[ recipients.length ] = { \"email\": address } );\r\n        console.log({ \"recipients\": JSON.stringify( recipients ), \"id\": this.id, \"job\": \"send\" })\r\n        let data = this.sendRequest( { \"recipients\": JSON.stringify( recipients ), \"id\": this.id, \"job\": \"send\" } );\r\n        let success: boolean;\r\n        try {\r\n            success = Object.keys( data ).includes( \"result\" );\r\n        }\r\n        catch ( e ) {\r\n            success = false;\r\n        }\r\n        if ( success ) {\r\n            return data.result;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Diese Methode schickt die Anfrage an den Server raus.\r\n     * \r\n     * @param data Die Daten, die mit der Anfrage zu versenden sind.\r\n     */\r\n    private sendRequest ( data: object ): any {\r\n        return new Promise( function ( resolve, reject ) {\r\n            let xhr = new XMLHttpRequest(); // XHR ist kurz für XmlHttpRequest\r\n            xhr.open( \"POST\", AIDistributor.url, true );\r\n            xhr.onreadystatechange = () => {\r\n                if ( xhr.readyState === 4 ) {\r\n                    if ( xhr.status === 200 ) {\r\n                        resolve( JSON.parse( xhr.responseText ) );\r\n                    }\r\n                    reject( {\r\n                        status: xhr.status,\r\n                        statusText: xhr.statusText\r\n                    } );\r\n                }\r\n            };\r\n            xhr.onerror = function () {\r\n                reject( {\r\n                    status: this.status,\r\n                    statusText: xhr.statusText\r\n                } );\r\n            };\r\n            for ( const [ header, content ] of Object.entries( AIDistributor.headers ) ) {\r\n                xhr.setRequestHeader( header, content );\r\n            }\r\n            console.log( JSON.stringify( data ))\r\n            xhr.send( JSON.stringify( data ) );\r\n        } ).then( ( resolve ) => resolve, ( reject ) => reject );\r\n    }\r\n\r\n    /**\r\n     * Diese Methode wird verwendet, um aus einem aus der Datenbank geladenen \r\n     * KI-Modell (Scaler und Classifier) eine gebrauchsfertige Anwendung zu erstellen.\r\n     * \r\n     * Diese Methode ist sinnlos, da eine Datei auf dem Server liegen muss, um heruntergeladen werden zu können.\r\n     */\r\n    private buildExecutable (): boolean {\r\n        throw new Error( \"Not Implemented\" );\r\n    }\r\n}\r\n","import { DeliveryFormat } from \"./DeliveryFormat\";\r\nimport { DatabaseConnector } from \"./DatabaseConnector\";\r\nimport { Language, LanguageMessages } from \"./Language\";\r\nimport { Admin, Dataminer, AIModelUser, User } from \"./User\";\r\nimport { AIBuilder } from \"./AIBuilder\";\r\nimport { AIDistributor } from \"./AIDistributor\";\r\nimport { SensorData } from \"./SensorData\";\r\nimport { AIController } from \"../controller/AIController\";\r\nimport { IDataRowST, IDataRowSTRID } from \"./DataRow\";\r\nimport { ILabel } from \"./Label\";\r\nimport { ISpan } from \"./TimeSpan\";\r\nimport { IDevice } from \"./DeviceData\";\r\nimport { IDataPoint } from \"./DataPoint\";\r\n\r\ninterface FacadeInterface {\r\n  createDataSet(sensorTypeID: number[], dataSetName: string, datarowNames?: string[]): Promise<number>;\r\n  sendDataPoint(dataRowID: number, datapoint: IDataPoint): Promise<boolean>;\r\n  sendDataPointsAgain(): Promise<boolean>;\r\n  loadProject(projectID?: number): Promise<boolean>;\r\n  getProjectMetas(): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]>;\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[];\r\n  getSessionID(): number;\r\n  getDataRows(dataSetID: number): { dataRows: IDataRowST[]; };\r\n  getCurrentDataRows(): { dataRows: IDataRowST[]; };\r\n  getMessages(): LanguageMessages | null;\r\n  setLanguage(languageCode: string): Promise<boolean>;\r\n  getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]>;\r\n  getAdminEmail(): string;\r\n  deleteDataSet(dataSetID: number): Promise<boolean>;\r\n  registerAdmin(adminName: string, adminEmail: string, password: string): Promise<boolean>;\r\n  registerDataminer(dataminerName: string, sessionID: number): Promise<boolean>;\r\n  registerAIModelUser(aiModelUserName: string, modelID: number): Promise<boolean>;\r\n  loginAdmin(adminEmail: string, password: string): Promise<boolean>;\r\n  createProject(projectName: string): Promise<boolean>;\r\n  createLabel(span: ISpan, labelName: string): Promise<number>;\r\n  setLabel(labelID: number, span: ISpan, labelName?: string): Promise<boolean>;\r\n  deleteLabel(labelID: number): Promise<boolean>;\r\n  getLabels(): { labels: ILabel[]; };\r\n  classify(aiId: number, dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void;\r\n  getAIModel(id: number, format: DeliveryFormat): object;\r\n  sendAIModel(model: number, ...recipients: string[]): boolean;\r\n  applyModel(dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[],\r\n    trainingDataPercentage: number, slidingWindowSize: number, slidingWindowStep: number): void;\r\n} export type { FacadeInterface };\r\n\r\n/**\r\n * Die Facade stellt alle interaktionen mit dem Model zur Verfügung\r\n */\r\nexport class Facade {\r\n  private language?: Language; //Alle Nachrichten, in der geladenen Sprache\r\n  private dbCon: DatabaseConnector; //Die Verbindung zur Datenbank\r\n  private user?: User; //Der Benutzer, entweder Admin, Datenerfasser oder AIModelUser\r\n\r\n\r\n  /**\r\n   * Erstellt die Facade\r\n   * @param languageCode der Sprachcode von der Sprache, die geladen werden soll\r\n   */\r\n  constructor(languageCode: string) {\r\n    this.dbCon = new DatabaseConnector();\r\n    this.dbCon.loadLanguage({ languageCode }).then((language: LanguageMessages) => { this.language = new Language(language); });\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein Datensatz\r\n   * @param sensorTypeID muss der Sensor Typ ID von einem Sensor des Gerätes übereinstimmen\r\n   * @param dataSetName Name des Datensatzes\r\n   * @returns true, wenn der Datensatz erstellt wurde. \r\n   * Dies ist der Fall, wenn ein Benutzer existiert welcher in einer Session ist und alle Sensortypen existieren.\r\n   */\r\n  async createDataSet(sensorTypeID: number[], dataSetName: string, datarowNames?: string[]): Promise<number> {\r\n    if (this.user === undefined) {\r\n      return -2;\r\n    }\r\n    let sessionID: number = this.getSessionID();\r\n    if (sessionID === undefined) {\r\n      sessionID = 0;\r\n    }\r\n    if (sessionID > 0 || this.user.getName() === AIController.AI_MODEL_USER_NAME) {\r\n      let projectID: number = this.user.getCurrentProjectID();\r\n      if (projectID === undefined) {\r\n        projectID = 0;\r\n      }\r\n      let userID: number = this.user.getID();\r\n      let dataRow: { sensorID: number, datarowName?: string; }[] = [];\r\n      for (let i = 0; i < sensorTypeID.length; i++) {\r\n        let sensorID = sensorTypeID[i];\r\n        if (datarowNames != null && datarowNames.length >= i) {\r\n          dataRow.push({ sensorID, datarowName: datarowNames[i] });\r\n        }\r\n        else {\r\n          dataRow.push({ sensorID });\r\n        }\r\n      }\r\n      let dataSetID: number = await this.dbCon.createDataSet({ sessionID, projectID, userID, dataSetName, dataRow });\r\n      if (dataSetID <= 0) {\r\n        return -3;\r\n      }\r\n      var dataRows: IDataRowSTRID[] = [];\r\n      for (let i = 0; i < sensorTypeID.length; i++) {\r\n        dataRows.push({ sensorType: sensorTypeID[i], dataRow: [], dataRowID: i });\r\n      }\r\n      if (this.user.createDataSet(dataSetID, dataSetName, new Date().getMilliseconds(), dataRows) || this.user.getName() === AIController.AI_MODEL_USER_NAME) {\r\n        return dataSetID;\r\n      }\r\n      return -4;\r\n    }\r\n    return -5;\r\n  }\r\n\r\n  /**\r\n   * Sendet den Datenpunkt an die Datenbank und speichert den Punkt lokal\r\n   * @param dataRowID die ID der aktuellen Datenreihe des eingelesenen Datenpunkts\r\n   * @param value der SensorWert\r\n   * @param relativeTime die relative Zeit zum Aufnahmestart in Millisekunden\r\n   * @return true, wenn der Datenpunkt erfolgreich an die Datenbank gesendet wurde\r\n   */\r\n  async sendDataPoint(dataRowID: number, datapoint: IDataPoint): Promise<boolean> {\r\n    if (this.user !== undefined) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      this.user.addDatapoint(dataRowID, datapoint);\r\n      return this.dbCon.sendDataPoint({ sessionID, userID, dataSetID, dataRowID, datapoint });\r\n    }\r\n    return false;\r\n  }\r\n\r\n/**\r\n * Gibt die Email des Admins zurück\r\n * @returns Email des Admins oder \"undefined\" wenn kein Admin angmeldet ist\r\n */\r\n  getAdminMail(): string {\r\n    if (this.user != null && this.user instanceof Admin) {\r\n      return (this.user as Admin).getEmail()\r\n    }\r\n    return \"error\"\r\n  }\r\n\r\n  /**\r\n     * Sendet den aktuell bereits aufgenommenen Datensatz an die Datenbank\r\n     * Dafür da, falls die Verbindung verloren ging und der Datensatz neu hochgeladen werden muss\r\n     * @return true, wenn der Datensatz erfolgreich an die Datenbank gesendet wurde\r\n     */\r\n  async sendDataPointsAgain(): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let dataSetID: number = this.user.getCurrentDataSetID();\r\n      let rows = this.user.getCurrentDataRows();\r\n      for (let i = 0; i < rows.dataRows.length; i++) {\r\n        var result = await this.dbCon.sendDataPointsAgain({ sessionID, userID, dataSetID, dataRowID: i, datapoints: rows.dataRows[i].datapoint });\r\n        if (!result) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Lädt aus der Datenbank das Projekt mit der übergebenen ID, hierfür muss der Admin angemeldet sein\r\n   * @param projectID die Projekt ID oder keine falls das aktuelle Projekt neu geladen werden soll\r\n   * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n   *          die Projekt ID existiert und der Admin dafür angemeldet ist\r\n   */\r\n  async loadProject(projectID?: number): Promise<boolean> {\r\n    if (this.user != null && this.user instanceof Admin) {\r\n      if (projectID == null) {\r\n        projectID = this.user?.getCurrentProjectID();\r\n      }\r\n      let adminEmail: string = this.user.getEmail();\r\n      let userID: number = this.user.getID();\r\n      return this.user.loadProject(await this.dbCon.loadProject({ userID, adminEmail, projectID }));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* Methode die noch nicht benutzt wird aber eventuell das laufgeschehen verbessern\r\n  /**\r\n     * Aktuallisiert aus der Datenbank das aktuelle Projekt, hierfür muss der Admin angemeldet sein und ein Projekt geladen sein\r\n     * @returns true, wenn das Projekt erfolgreich geladen wurde dies tritt nur ein, wenn eine Verbindung zur Datenbank besteht,\r\n     *          ein geladenes Projekt existiert und der Admin dafür angemeldet ist\r\n     \r\n  async updateCurrentProject(): Promise<boolean> {\r\n    if (this.user != null && this.user instanceof Admin) {\r\n      let projectID = this.user.getCurrentProjectID();\r\n      let adminEmail: string = this.user.getEmail();\r\n      let userID: number = this.user.getID();\r\n      return this.user.updateProject(await this.dbCon.updateProject({ userID, adminEmail, projectID }));\r\n    }\r\n    return false;\r\n  }*/\r\n\r\n\r\n  /**\r\n   * Lädt vom aktuell angemeldeten Admin von seinen Projekten den Namen, die Projekt ID und die AIModelIDs\r\n   * @returns Von allen Projekten des Admins Projekt ID und Projektname und die AIModelIDs\r\n   */\r\n  async getProjectMetas(): Promise<{ projectID: number, projectName: string, AIModelID: number[]; }[]> {\r\n    if (this.user != null) {\r\n      let userID: number = this.user.getID();\r\n      return await this.dbCon.getProjectMetas({ userID, adminEmail: this.getAdminEmail() });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt von allen Datensätzen die Datensatz ID und der Datensatz Name zurück\r\n   */\r\n  getDataSetMetas(): { dataSetID: number, dataSetName: string; }[] {\r\n    if (this.user !== undefined) {\r\n      return this.user.getDataSetMetas();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Gibt die Session ID des aktuellen Projekts zurück, -1 falls kein aktuelles Projekt existiert\r\n   */\r\n  getSessionID(): number {\r\n    if (this.user != null) {\r\n      return this.user.getSessionID();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen der Datensatz ID zurück und setzt diesen Datensatz als aktuellen Datensatz\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getDataRows(dataSetID: number): { dataRows: IDataRowST[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getDataRows(dataSetID);\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt vom aktuellen Projekt die Datenreihen des aktuellen Datensatzes zurück\r\n   * @param dataSetID die Datensatz ID von der die Datenreihen gelesen werden sollen\r\n   * @returns die Sensordaten von der Datenreihe\r\n   */\r\n  getCurrentDataRows(): { dataRows: IDataRowST[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getCurrentDataRows();\r\n    }\r\n    return { dataRows: [] };\r\n  }\r\n\r\n  /**\r\n   * Gibt aus der geladenen Sprache die Nachrichten die über die IDs angegeben werden\r\n   * @param messageID alle IDs, von denen die Sprachnachricht geladen werden soll\r\n   * @returns alle Nachrichten, in der gleichen Reihenfolge wie angefordert\r\n   */\r\n  getMessages(): LanguageMessages | null {\r\n    if (this.language != null) {\r\n      return this.language.getMessage();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Gibt die auswählbaren Sensoren als ID mit ihrer Art in der Passenden Sprache zurück\r\n  \r\n  getAvailableSensors(): { sensorTypID: number, sensorType: string; }[] {\r\n    if (this.user != null && this.language != null) {\r\n      var sensors: { sensorTypID: number, sensorType: string; }[] = [];\r\n      let message: { messageID: number, message: string; }[] = this.language.getMessage(this.user.getAvailableSensors());\r\n      for (let i = 0; i < message.length; i++) {\r\n        sensors.push({ sensorTypID: message[i].messageID, sensorType: message[i].message });\r\n      }\r\n      return sensors;\r\n    }\r\n    return [];\r\n  }\r\n */\r\n\r\n  /**\r\n   * Lädt die Sprache aus der Datenbank mit dem übergebenen Sprachcode\r\n   * @param languageCode Sprachcode\r\n   * @returns true, falls die Sprache erfolgreich geladen wurde\r\n   */\r\n  async setLanguage(languageCode: string): Promise<boolean> {\r\n    if (this.language == null) {\r\n      const language: LanguageMessages = await this.dbCon.loadLanguage({ languageCode });\r\n      this.language = new Language(language);\r\n      return true;\r\n    } else if (languageCode !== this.language.getLanguageCode()) {\r\n      const language: LanguageMessages = await this.dbCon.loadLanguage({ languageCode });\r\n      return this.language.setLanguage(language);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gibt von allen in der Datenbank verfügbaren Sprachen den Sprachcode sowie den Sprachennamen zurück\r\n   */\r\n  getLanguageMetas(): Promise<{ languageCode: number, languageName: string; }[]> {\r\n    return this.dbCon.getLanguageMetas();\r\n  };\r\n\r\n  /**\r\n   * Gibt die Email vom Admin zurück, diese kann leer sein falls kein Admin angemeldet ist\r\n   */\r\n  getAdminEmail(): string {\r\n    if (this.user instanceof Admin) {\r\n      return this.user.getEmail();\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Löscht den Datensatz mit der übergebenen Datensatz ID\r\n   * @param dataSetID die Datensatz ID\r\n   * @returns true, wenn das löschen erfolgreich ist\r\n   */\r\n  async deleteDataSet(dataSetID: number): Promise<boolean> {\r\n    if (this.user != null && this.user.deleteDataSet(dataSetID)) {\r\n      let projectID: number = this.user.getCurrentProjectID();\r\n      if (projectID >= 0) {\r\n        let adminEmail: string = this.getAdminEmail();\r\n        let userID = this.user.getID();\r\n        return this.dbCon.deleteDataSet({ userID, adminEmail, projectID, dataSetID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //wann Device erstellen ??? + constructor in User anpassen mit neuem Device parameter \r\n  async registerAdmin(adminName: string, adminEmail: string, password: string): Promise<boolean> {\r\n    //TODO Device\r\n    let device: IDevice = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let IDs: {\r\n      adminID: number, device: { deviceID: number, sensorID: number[]; };\r\n    } = await this.dbCon.registerAdmin({ adminName, adminEmail, password, device });\r\n    if (IDs.adminID >= 0) {\r\n      this.user = new Admin(IDs.adminID, IDs.device.deviceID, adminName, adminEmail);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async registerDataminer(dataminerName: string, sessionID: number): Promise<boolean> {\r\n    //TODO Device\r\n    let device: IDevice = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let dataminer:\r\n      {\r\n        dataminerID: number, device: { deviceID: number, sensorID: number[]; }, project: { projectID: number, projectName: string, sessionID: number; };\r\n      } = await this.dbCon.registerDataminer({ dataminerName, sessionID, device });\r\n    if (dataminer.dataminerID >= 0 && dataminer.device.deviceID >= 0) {\r\n      this.user = new Dataminer(dataminer.dataminerID, dataminer.device.deviceID, dataminerName);\r\n      this.user.loadProject(dataminer.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param aiModelUserName \r\n   */\r\n  async registerAIModelUser(aiModelUserName: string, modelID: number): Promise<boolean> {\r\n    //TODO Device\r\n    let device: IDevice = { deviceID: -1, deviceName: \"\", deviceType: \"\", firmware: \"\", generation: \"\", MACADRESS: \"\", sensorInformation: [] };\r\n    let aiModelUser: {\r\n      aiModelUserID: number, device: { deviceID: number, sensorID: number[]; },\r\n      project: { projectID: number, projectName: string, sessionID: number; };\r\n    } = await this.dbCon.registerAIModelUser({ aiModelUserName, modelID, device });\r\n    if (aiModelUser.aiModelUserID >= 0 && aiModelUser.device.deviceID >= 0) {\r\n      this.user = new AIModelUser(aiModelUser.aiModelUserID, aiModelUser.device.deviceID, aiModelUserName);\r\n      this.user.loadProject(aiModelUser.project);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //TODO Device\r\n  async loginAdmin(adminEmail: string, password: string): Promise<boolean> {\r\n    if (this.user == null) {\r\n      let adminData: {\r\n        admin: { adminID: number, deviceID: number, adminName: string, email: string, device: IDevice; };\r\n      } = await this.dbCon.loginAdmin({ adminEmail, password });\r\n      if (adminData.admin != null && adminData.admin.adminID !== -1) {\r\n        let admin = adminData.admin;\r\n        this.user = new Admin(admin.adminID, admin.deviceID, admin.adminName, admin.email, admin.device);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* eventuell implementieren\r\n    logoutAdmin(): boolean {\r\n      if (this.user != null) {\r\n        let logout = this.dbCon.logoutAdmin(this.getAdminEmail());\r\n        if (logout) {\r\n          delete this.user;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    */\r\n\r\n  /**\r\n   * Erstellt für den angemeldeten Admin ein neues Projekt\r\n   */\r\n  async createProject(projectName: string): Promise<boolean> {\r\n    if (this.user instanceof Admin) {\r\n      let userID = this.user.getID();\r\n      let adminEmail = this.getAdminEmail();\r\n      let project: { projectID: number, sessionID: number; } = await this.dbCon.createProject({ userID, adminEmail, projectName });\r\n      return this.user.createProject(project.projectID, project.sessionID, projectName);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Erstellt ein neues Label für den aktuellen Datensatz\r\n   * @param span Start und Endzeit des Zeitfensters in Sekunden\r\n   */\r\n  async createLabel(span: ISpan, labelName: string): Promise<number> {\r\n    if (this.user != null) {\r\n      let sessionID: number = this.getSessionID();\r\n      let userID: number = this.user.getID();\r\n      let datasetID: number = this.user.getCurrentDataSetID();\r\n      let labelID: number = await this.dbCon.createLabel({ sessionID, userID, datasetID, label: { span, labelName } });\r\n      if (labelID >= 0) {\r\n        let created: boolean = this.user.createLabel(labelID, span, labelName);\r\n        if (created) {\r\n          return labelID;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Überschreibt ein bestehendes Label mit den übergebenen Parametern\r\n   * @param labelID die LabelID, die schon exisiteren muss und überschrieben wird\r\n   * @param span Start und Endzeit des Zeitfensters in Sekunden\r\n   */\r\n  async setLabel(labelID: number, span: ISpan, labelName?: string): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let setted: boolean = this.user.setLabel(labelID, span, labelName);\r\n      if (setted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let datasetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.setLabel({ sessionID, userID, datasetID, label: { labelID, span, labelName } });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Löscht das bestehende Label mit der LabelID\r\n   * @param labelID die LabelID, die schon exisitert\r\n   */\r\n  async deleteLabel(labelID: number): Promise<boolean> {\r\n    if (this.user != null) {\r\n      let deleted: boolean = this.user.deleteLabel(labelID);\r\n      if (deleted) {\r\n        let sessionID: number = this.getSessionID();\r\n        let userID: number = this.user.getID();\r\n        let dataSetID: number = this.user.getCurrentDataSetID();\r\n        return this.dbCon.deleteLabel({ sessionID, userID, dataSetID, labelID });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gibt die geladenen Labels zurück von dem aktuellen Datensatz\r\n   * @returns \r\n   */\r\n  getLabels(): { labels: ILabel[]; } {\r\n    if (this.user != null) {\r\n      return this.user.getLabels();\r\n    }\r\n    return { labels: [] };\r\n  }\r\n\r\n  classify(aiId: number, dataSetId: number, callBack: <R = unknown>(prediction: string | object) => R): void {\r\n    let aiBuilder = new AIBuilder(aiId);\r\n    aiBuilder.classify(dataSetId, callBack);\r\n  };\r\n\r\n  getAIModel(id: number, format: DeliveryFormat): object {\r\n    let aiDist = new AIDistributor(id, format);\r\n    return aiDist.getAIModel();\r\n  }\r\n\r\n  /**\r\n   * Erzeugt eine Anfrage an den Server, an jede übergebene E-Mail-Adresse eine E-Mail zu versenden,\r\n   * die einen Link zur Startseite des mit übergebenen KI-Modells enthält.\r\n   * \r\n   * @param model      - Die ID des zu verteilenden KI-Modells.\r\n   * @param recipients - Die Liste der E-Mail-Adressen, an die das KI-Modell verteilt werden soll.\r\n   * @returns True, wenn die Anfrage an den Server erfolgreich durchgeführt werden konnte, False sonst.\r\n   */\r\n  sendAIModel(model: number, recipients: string[]): boolean {\r\n    const distributor = new AIDistributor(model, DeliveryFormat.WEB_APP);\r\n    return distributor.sendAIModel(recipients);\r\n  }\r\n\r\n  /**\r\n   * Diese Methode erzeugt eine Anfrage an den Server, die ihn damit beauftragt, ein KI-Modell mit den \r\n   * angegebenen Parametern zu erzeugen und zu trainieren. \r\n   * \r\n   * @param dataSets               - Die zum Training zu verwendenden Datensätze.\r\n   * @param imputator              - Der zur Vervollständigung der Daten zu verwendende Imputer.\r\n   * @param classifier             - Der Klassifizierer, der das Herzstück des zu erstellenden KI-Modells darstellt.\r\n   * @param scaler                 - Der Scaler, der die Daten für den Klassifizierer aufbereitet.\r\n   * @param features               - Die Merkmale, die aus den gegebenen Datensätzen herausgearbeitet werden sollen.\r\n   * @param trainingDataPercentage - Optional. Der Anteil der Daten, der zum Training des KI-Modells verwendet werden soll. \r\n   *                                 Standardmäßig sind das alle übergebenen Daten, da wir noch kein serverseitiges Testen der KI-Modell-Qualität durchführen.\r\n   * @param slidingWindowSize      - Optional. Die Größe der Datenblöcke, die jeweils verwertet werden. Standardwert ist 128 Datenpunkte.\r\n   * @param slidingWindowStep      - Optional. Die Schrittweite von einem Datenblock zum nächsten. Standardwert ist 64 Datenpunkte. \r\n   */\r\n  applyModel(dataSets: number[], imputator: string, classifier: string, scaler: string, features: string[],\r\n    trainingDataPercentage: number = 1, slidingWindowSize: number = 128, slidingWindowStep: number = 64): void {\r\n    const aiBuilder = new AIBuilder(-1);\r\n    const projectID = this.user!.getCurrentProjectID();\r\n    aiBuilder.applyModel(dataSets, imputator, classifier, scaler, features, projectID, trainingDataPercentage, slidingWindowSize, slidingWindowStep);\r\n  }\r\n}","import { Component } from 'react';\r\nimport title from './index.module.css';\r\n\r\nexport default class Title extends Component {\r\n    private static readonly T_TITLE_DE: string = \"Datenerfassung\";\r\n\r\n    /**\r\n     * Enthält den Titel \"Datenerfassungsanwendung\"\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className={title.title}>{Title.T_TITLE_DE}</h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from 'react';\r\n\r\n/**\r\n * Das fertige Diagramm auf der Finishseite\r\n */\r\nexport default class Diagram extends Component {\r\n    private static readonly T_ACCELEROMETER_DE: string = \"Beschleunigungssensor\";\r\n    private static readonly T_GYROSCOPE_DE: string = \"Gyroskop\";\r\n    private static readonly T_MAGNETOMETER_DE: string = \"Magnetometer\";\r\n\r\n    /**\r\n     * der Datensatz für das Diagramm, durch props übermittelt\r\n     */\r\n    props = {\r\n        dataRows: [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }],\r\n    };\r\n\r\n    /**\r\n     * der Datensatz in chart-js form, um die Linie zu zeigen\r\n     */\r\n    diagrammData = {\r\n        lineLabels: [] as any[],\r\n        sensorRow: [] as any[],\r\n        datavalue: [] as any[],\r\n        time: [] as any[],\r\n        showDiagram: false,\r\n        diagram: {},\r\n        diagramLineLabels: {},\r\n        diagramData: {},\r\n        diagramOptions: {},\r\n        color: ['rgba(46,190,87,1)', 'rgba(68,24,232,1)', 'rgba(238,173,14,1)', 'rgba(178,34,34,1)', 'rgba(238, 130, 238,1)', 'rgba(0, 0, 0,1)',\r\n            'rgba(106, 90, 205,1)', 'rgba(238, 118, 0,1)', 'rgba(105, 105, 105,1)'],\r\n        csscolor: ['2EBE57', 'CC00FF', 'EEAD0E', 'B22222', 'EE82EE', '000000',\r\n            '6A5ACD', 'EE7600', '696969'],\r\n    };\r\n\r\n    /**\r\n     * aktualisiert das Diagramm mit dem gegebenen Datensatz. Inzwischen wird der Datensatz bearbeitet, damit er in chart-js form ist.\r\n     */\r\n    updateDiagramm() {\r\n        //put each value Array in State\r\n        this.diagrammData.lineLabels = [];\r\n        this.diagrammData.sensorRow = [];\r\n        this.diagrammData.datavalue = [];\r\n        this.diagrammData.time = [];\r\n        this.diagrammData.showDiagram = true;\r\n\r\n        var datavalues = [];\r\n        if (this.props.dataRows !== undefined) {\r\n            for (var z = 0; z < this.props.dataRows.length; z++) {\r\n                this.diagrammData.sensorRow.push(this.props.dataRows[z].sensorType);\r\n                for (var dataCoordinate = 0; dataCoordinate < 3; dataCoordinate++) {\r\n                    for (var j = 0; j < this.props.dataRows[z].datapoint.length; j++) {\r\n                        datavalues.push(this.props.dataRows[z].datapoint[j].value[dataCoordinate]);\r\n                    }\r\n                    this.diagrammData.datavalue.push(datavalues);\r\n                    datavalues = [];\r\n                }\r\n            }\r\n            // eslint-disable-next-line\r\n            for (var j = 0; j < this.props.dataRows[0].datapoint.length; j++) {\r\n                this.diagrammData.time.push(this.props.dataRows[0].datapoint[j].relativeTime);\r\n            }\r\n\r\n            var newDatasets = [];\r\n            var lineLabels = [];\r\n            for (var i = 0; i < this.diagrammData.sensorRow.length * 3; i++) {\r\n                var coordinate = \".X\";\r\n                var sensor = this.diagrammData.sensorRow[(i / 3) | 0];\r\n                var sensorName = '';\r\n                /**\r\n                 * unterscheidet, welche Sensor es ist\r\n                 */\r\n                switch (sensor) {\r\n                    case 2:\r\n                        sensorName = Diagram.T_ACCELEROMETER_DE;\r\n                        break;\r\n                    case 3:\r\n                        sensorName = Diagram.T_GYROSCOPE_DE;\r\n                        break;\r\n                    case 4:\r\n                        sensorName = Diagram.T_MAGNETOMETER_DE;\r\n                        break;\r\n                }\r\n                /**\r\n                 * unterscheidet, von welchem Koordinate dieser Datenpunkt ist\r\n                 */\r\n                if (i % 3 === 1) {\r\n                    coordinate = \".Y\";\r\n                }\r\n                if (i % 3 === 2) {\r\n                    coordinate = \".Z\";\r\n                }\r\n\r\n                lineLabels.push(<span color={this.diagrammData.csscolor[i]}>■{sensorName + coordinate}<br /></span>);\r\n\r\n                newDatasets.push(\r\n                    {\r\n                        label: sensorName + coordinate,\r\n                        strokeColor: this.diagrammData.color[i],\r\n                        borderWidth: 1,\r\n                        data: this.diagrammData.datavalue[i],\r\n                    }\r\n                );\r\n            }\r\n            const data = {\r\n                labels: this.diagrammData.time,\r\n                datasets: newDatasets\r\n            };\r\n            const options = {\r\n                datasetFill: false,\r\n                pointDotRadius: 2,\r\n                pointHitDetectionRadius: 1,\r\n                offsetGridLines: false,\r\n                pointDot: false\r\n            };\r\n            this.diagrammData.diagramData = data;\r\n            this.diagrammData.lineLabels = lineLabels;\r\n            this.diagrammData.diagramOptions = options;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rendert diese Diagram-Komponente\r\n     * @returns Diagramm-Teil\r\n     */\r\n    render() {\r\n        var LineChart = require(\"react-chartjs\").Line;\r\n        this.updateDiagramm();\r\n        return (\r\n            <div>\r\n                {this.diagrammData.lineLabels}\r\n                <LineChart data={this.diagrammData.diagramData} options={this.diagrammData.diagramOptions} width=\"400\" height=\"200\" redraw />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, ChangeEvent } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nexport default class Labelling extends Component {\r\n    private static readonly E_MISSING_DE: string = \"Das Labelzeitfenster muss bestimmt werden!\";\r\n    private static readonly E_NAME_MISSING_DE: string = \"Das Labelzeitfenster braucht einen Namen!\";\r\n    private static readonly E_TIME_INVALID_DE: string = \"Das Labelzeitfenster muss mit einer Start und Endzeit bestimmt werden,\\n die Angabe ist in Sekunden.\";\r\n    private static readonly T_BUTTON_DELETE_DE: string = \"Löschen\";\r\n    private static readonly T_BUTTON_ADD_DE: string = \"Label hinzufügen\";\r\n    private static readonly T_TIME_FROM_DE: string = \"Von\";\r\n    private static readonly T_TIME_TO_DE: string = \"bis\";\r\n    private static readonly T_LABEL_START_DE: string = \"Start\";\r\n    private static readonly T_LABEL_END_DE: string = \"Ende\";\r\n    private static readonly T_LABEL_NAME_DE: string = \"Label-Name\";\r\n\r\n    state = {\r\n        labels: [] as { labelID: number, start: number, end: number, name: string; }[],\r\n        newStart: \"\", newEnd: '', newName: \"\"\r\n    };\r\n\r\n    props = {\r\n        //die Funktion für neues Label hinzuzufügen, durch props übermittelt\r\n        newLabel: function (label: {\r\n            labelID: number;\r\n            start: number;\r\n            end: number;\r\n            name: string;\r\n        }) { },\r\n        //die Funktion für Label zu löschen, durch props übermittelt\r\n        pagedeleteLabel: function (label: {\r\n            labelID: number;\r\n            start: number;\r\n            end: number;\r\n            name: string;\r\n        }) { }\r\n    };\r\n    IDcounter: number = 0; //berechnet ID von Label\r\n\r\n    /**\r\n     * aktualisiert den State zu den eingegebenen Label-Namen\r\n     * @param e Eingabeaktion\r\n     */\r\n    handleChangeLabel = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ newName: e.target.value });\r\n    };\r\n\r\n    /**\r\n     * aktualisiert den State zu dem eingegebenen Zeitfenstersanfang\r\n     * @param e Eingabeaktion\r\n     */\r\n    handleChangeStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ newStart: e.target.value });\r\n    };\r\n\r\n    /**\r\n     * aktualisiert den State zu dem eingegebenen Zeitfenstersende\r\n     * @param e Eingabeaktion\r\n     */\r\n    handleChangeEnd = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ newEnd: e.target.value });\r\n    };\r\n\r\n    /**\r\n     * anrufe die Addierenmethode und leere die Eingabefelder\r\n     */\r\n    handleClick = () => {\r\n        const { newStart, newEnd, newName } = this.state;\r\n        const labelObj = { start: newStart, end: newEnd, name: newName };\r\n        this.addLabel(labelObj);\r\n        this.setState({ newStart: \"\", newEnd: '', newName: \"\" });\r\n    };\r\n\r\n    /**\r\n     * füge das eingegebene Label hinzu\r\n     */\r\n    addLabel = (labelObj: { start: string, end: string, name: string; }) => {\r\n        if (labelObj.start === \"\" || labelObj.end === \"\") {\r\n            NotificationManager.error(Labelling.E_MISSING_DE);\r\n            return;\r\n        }\r\n        if (labelObj.name === \"\") {\r\n            NotificationManager.error(Labelling.E_NAME_MISSING_DE);\r\n            return;\r\n        }\r\n        labelObj.start = labelObj.start.replace(\",\", \".\");\r\n        labelObj.end = labelObj.end.replace(\",\", \".\");\r\n        let start = this.formatFloatInString(labelObj.start);\r\n        let end = this.formatFloatInString(labelObj.end);\r\n        if (start === NaN && end === NaN) {\r\n            NotificationManager.success(Labelling.E_TIME_INVALID_DE);\r\n            return;\r\n        }\r\n        const label: { labelID: number, start: number, end: number, name: string; } = {\r\n            labelID: this.IDcounter,\r\n            start: start,\r\n            end: end,\r\n            name: labelObj.name\r\n        };\r\n        this.props.newLabel(label);\r\n        const { labels } = this.state;\r\n        const newLabels = [label, ...labels];\r\n        this.setState({ labels: newLabels });\r\n    };\r\n\r\n    /**\r\n     * lösche das entsprechende Label\r\n     * @param e die Klickaktion\r\n     * @param id ID von dem Label, das gelöscht wird\r\n     */\r\n    deleteLabel = (e: React.MouseEvent<HTMLButtonElement>, id: number) => {\r\n\r\n        const { labels } = this.state;\r\n\r\n        let newLabels = labels.filter((label) => {\r\n            if (label.labelID === id) {\r\n                this.props.pagedeleteLabel(label);\r\n            }\r\n            return label.labelID !== id;\r\n        });\r\n        this.setState({ labels: newLabels });\r\n    };\r\n\r\n    /**\r\n     * verwandelt String zur Nummer\r\n     * @param stringNumber das String, das verwandelt wird\r\n     * @returns die entsprechende Nummer\r\n     */\r\n    private formatFloatInString(stringNumber: string): number {\r\n        return (parseInt((parseFloat(stringNumber) * 1000).toString()) / 1000);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"label-wrap\">\r\n                {\r\n                    this.state.labels.map((label) => {\r\n                        return (\r\n                            <li >\r\n                                {Labelling.T_TIME_FROM_DE} {label.start} s {Labelling.T_TIME_TO_DE} {label.end} s:  {label.name}\r\n                                <button className='delete' onClick={(e) => this.deleteLabel(e, label.labelID)}>{Labelling.T_BUTTON_DELETE_DE}</button>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                <div>\r\n                    {Labelling.T_LABEL_START_DE}:\r\n                        <input type=\"text\" value={this.state.newStart} onChange={this.handleChangeStart} /><br />\r\n\r\n                    {Labelling.T_LABEL_END_DE}:\r\n                        <input type=\"text\" value={this.state.newEnd} onChange={this.handleChangeEnd} /><br />\r\n\r\n                    {Labelling.T_LABEL_NAME_DE}:\r\n                        <input type=\"text\" value={this.state.newName} onChange={this.handleChangeLabel} />\r\n                    <br />\r\n\r\n                    <button className='add' type=\"button\" onClick={() => this.handleClick()}>{Labelling.T_BUTTON_ADD_DE}</button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import { States } from \"../State\";\r\n\r\nexport class State {\r\n  currentState: States = States.NeedMessage;\r\n  currentLabel?: { labelID: number, start: number, end: number, name: string; }; //unbearbeitete Eingabe\r\n  languageCode: string = \"de\";\r\n  messageIDs: number[] = [];\r\n  messages: string[] = [];\r\n  usedSensorNames: string[] = [];\r\n  dataRows?: { sensorType: number, datapoint: { value: number[], relativeTime: number; }[]; }[] = [{ sensorType: 1, datapoint: [{ value: [5], relativeTime: 5 }] }];\r\n  labels: { id: number, start: number, end: number, name: string; }[] = [];\r\n}","import Title from \"../../components/FinishComponents/Title\";\r\nimport Body from \"../../components/FinishComponents/Diagram\";\r\nimport Labelling from \"../../components/FinishComponents/Input/Labelling\";\r\nimport 'react-notifications/lib/notifications.css';\r\nimport { Page } from \"../PageInterface\";\r\nimport { PageController } from \"../../../controller/PageController\";\r\nimport { State } from \"./State\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { States } from \"../State\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\n\r\n/**\r\n * Die Darstellungsseite für die Finishseite der Datenerfasser\r\n */\r\nexport class FinishPage implements Page {\r\n  private state: State;\r\n  private observers: PageController[] = [];\r\n\r\n  private static readonly T_BUTTON_RELOAD_DE = \"Erneut erfassen\"\r\n\r\n  /**\r\n     * Konstruktor der Darstellungseite\r\n     */\r\n  constructor() {\r\n    this.state = new State();\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n    * Update Methode der Darstellungsseite. Diese Methode wird nach jeder Änderung, die kein Seitenwechsel ist, aufgerufen. \r\n    * Die Methode enthält den Aufbau der Seite und wird von ihr gerendert.\r\n    * Es werden durch notify() alle controller über ein Update informiert und alle Seiten Elemente werden aktualisiert und erneut gerendert. \r\n    */\r\n  private update() {\r\n    this.notify();\r\n    const VDOM = (\r\n      <div>\r\n        <Title />\r\n        <Body dataRows={this.state.dataRows!} />\r\n        <div className=\"label-container\">\r\n          <Labelling newLabel={this.newLabel.bind(this)} pagedeleteLabel={this.pagedeleteLabel.bind(this)} />\r\n        </div>\r\n        <button onClick = {this.reloadPage}>{FinishPage.T_BUTTON_RELOAD_DE}</button>\r\n        <NotificationContainer />\r\n      </div>\r\n    );\r\n    if (document.getElementById('root') !== null) {\r\n      ReactDOM.render(VDOM, document.getElementById('root'));\r\n    }\r\n  }\r\n\r\n  private reloadPage() {\r\n    window.location.reload()\r\n  }\r\n\r\n  /**\r\n   * Addiere ein neues Label\r\n   * @param label das label, das addiert wird\r\n   */\r\n  newLabel(label: { labelID: number, start: number, end: number, name: string; }) {\r\n    this.state.currentLabel = label;\r\n    this.state.currentState = States.NewLabel;\r\n    this.notify();\r\n  }\r\n\r\n  /**\r\n   * Lösche ein Label\r\n   * @param label das label, das gelöscht wird\r\n   */\r\n  pagedeleteLabel(label: { start: number, end: number, name: string, labelID: number; }) {\r\n    var deleteLabel = { labelID: label.labelID, start: label.start, end: label.end, name: label.name };\r\n    this.state.currentLabel = deleteLabel;\r\n    this.state.currentState = States.DeleteLabel;\r\n    this.notify();\r\n  }\r\n\r\n\r\n  /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter anmelden.\r\n    * @param oberver neuer Beobachter\r\n    */\r\n  attach(observer: PageController) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  /**\r\n    * Durch diese Methode kann sich ein Controller als Beobachter abmelden.\r\n    * @param oberver Beobachter der zu entfernen ist\r\n    */\r\n  detach(observer: PageController) {\r\n    const index = this.observers.indexOf(observer, 0);\r\n    if (index > -1) {\r\n      this.observers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Durch diese Methode werden alle Beobachter über eine Änderung auf der Seite informiert.\r\n    */\r\n  notify() {\r\n    for (let index = 0; index < this.observers.length; index++) {\r\n      const element = this.observers[index];\r\n      element.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Setzt einen neuen Zustand für die Seite und aktualisiert sie\r\n     * @param state neuer Zustand für die Seite\r\n     */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n    * Gibt den Status der Seite zurück\r\n    */\r\n  setState(state: any) {\r\n    this.state = state;\r\n    this.update();\r\n  }\r\n}","import { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { MainController } from \"./MainController\";\r\nimport { FinishPage } from \"../view/pages/FinishPage\";\r\n\r\n/**\r\n* Controller der die Fertigungsseite verwaltet\r\n*/\r\nexport class FinishController implements PageController {\r\n    /**\r\n    * Seite welche gerade von dem Controller verwaltet wird\r\n    */\r\n    private page: Page;\r\n    /**\r\n    * Status der Seite\r\n    */\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status. \r\n     */\r\n    constructor () {\r\n        this.page = new FinishPage();\r\n        this.page.attach( this );\r\n        this.state = this.page.getState();\r\n        this.state.dataRows! = MainController.getInstance().getFacade().getCurrentDataRows()!.dataRows!;\r\n        this.page.setState( this.state );\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update () {\r\n        this.state = this.page.getState();\r\n        switch ( this.state.currentState ) {\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage( this.state.messages )!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState( this.state );\r\n                break;\r\n            case States.ChangeLabel:\r\n                this.changeDataLabel();\r\n                break;\r\n            case States.NewLabel:\r\n                this.newDataLabel();\r\n                break;\r\n            case States.DeleteLabel:\r\n                this.deleteDataLabel();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ändert die Einstellungen eines DatenLabels gemäß den Änderungen aus der momentanen Seite.\r\n     */\r\n    private changeDataLabel () {\r\n        let label = this.state.currentLabel!;\r\n        let sucess = MainController.getInstance().getFacade().setLabel( label.labelID, { start: label.start, end: label.end }, label.name );\r\n        sucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                this.state.currentState = States.setLabel;\r\n                this.page.setState( this.state );\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n                this.page.setState( this.state );\r\n            }\r\n        } );\r\n    }\r\n\r\n    /**\r\n     * Erstellt ein neues Datenlabel. Dafür werden die neuen Daten des Labels aus der momentanene Seite an das\r\n     * Modell geleitet. Die ID des neuen Labels wird darauf an die momentane Seite übergeben.\r\n     */\r\n    private newDataLabel () {\r\n        let start: number = this.state.currentLabel!.start;\r\n        let end: number = this.state.currentLabel!.end;\r\n        let name: string = this.state.currentLabel!.name;\r\n        let promise: Promise<number> = MainController.getInstance().getFacade().createLabel( { start, end }, name );\r\n        this.state.wait! = promise;\r\n        promise.then( ( id: number ) => {\r\n            this.state.currentLabel!.labelID = id;\r\n            //PubSub.publish( 'newLabelWithID', this.state.currentLabel );\r\n            this.state.currentState = States.setLabel;\r\n            this.page.setState( this.state );\r\n        } );\r\n    }\r\n\r\n    /**\r\n     * Löscht das Label welches gemäß der Methode getDeleteLabelID von der momentanen Seite angegeben wurde.\r\n     */\r\n    private deleteDataLabel () {\r\n        let sucess = MainController.getInstance().getFacade().deleteLabel( this.state.currentLabel!.labelID );\r\n        sucess.then( ( value: boolean ) => {\r\n            if ( value ) {\r\n                this.state.currentState = States.setLabel;\r\n                this.page.setState( this.state );\r\n            } else {\r\n                this.state.currentState = States.LoadError;\r\n                this.page.setState( this.state );\r\n            }\r\n        } );\r\n    }\r\n}","import { DataCollectionPage } from \"../view/pages/DataCollectionPage/index\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { PageController } from \"./PageController\";\r\nimport { SensorManager } from \"./SensorManager\";\r\nimport { MainController } from \"./MainController\";\r\nimport { FinishController } from \"./FinishController\";\r\n\r\n/**\r\n* Controller der die Datenerfassungsseite verwaltet\r\n*/\r\nexport class DataCollectionController implements PageController {\r\n    /**\r\n    * Für die Verwaltung der Sensoren verantwortlich\r\n    */\r\n    private sensorManager: SensorManager;\r\n    /**\r\n    * Seite welche gerade von dem Controller verwaltet wird\r\n    */\r\n    private page: Page = new DataCollectionPage();\r\n    /**\r\n    * Status der Seite\r\n    */\r\n    private state: IState;\r\n\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status.\r\n     * Dieser Seitenverwalter benötigt einen SensorManager, welcher schon initilisiert wurde. \r\n     */\r\n    constructor(sensorManager: SensorManager) {\r\n        this.sensorManager = sensorManager;\r\n        this.page.attach(this);\r\n        this.state = this.page.getState();\r\n        this.state.leadTime = this.sensorManager.getWaitTime();\r\n\r\n        this.sensorManager.readData(this.page);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update() {\r\n        let state = this.page.getState();\r\n        switch (state.currentState) {\r\n            case States.StartDataRead:\r\n                this.sensorManager.readData(this.page);\r\n                break;\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage(this.state.messages)!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState(this.state);\r\n                break;\r\n            case States.NeedInstantDiagram:\r\n                break;\r\n            case States.ChangeToFinish:\r\n                MainController.getInstance().changeTo(new FinishController());\r\n                break;\r\n            case States.LoadError:\r\n                if (window.confirm(\"Es wurden nicht alle Daten Erfolgreich gesendet. Stellen sie sicher das eine Internetverbindung besteht. Sollen die Daten erneut gesendet werden?\")) {\r\n                    MainController.getInstance().getFacade().sendDataPointsAgain().then((result) => {\r\n                        if (!result) {\r\n                            this.state.currentState = States.LoadError;\r\n                            this.page.setState(state);\r\n                        }\r\n                    });\r\n                }\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState(state);\r\n                break;\r\n            //case States.SetWaitTime:\r\n            //    PubSub.publish('nextCount', this.state.recordingSettings!.waitTime);\r\n            //    break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}","import { MainController } from \"./MainController\";\r\nimport { Page } from \"../view/pages/PageInterface\";\r\nimport { PageController } from \"./PageController\";\r\nimport { SensorManager } from \"./SensorManager\";\r\nimport { DataCollectionController } from \"./DataCollectionController\";\r\nimport { IState, States } from \"../view/pages/State\";\r\nimport { StartPage } from \"../view/pages/StartPage/index\";\r\n\r\nexport class StartController implements PageController {\r\n\r\n    private urlParams: URLSearchParams;\r\n\r\n    private page: Page;\r\n    private sensorManager = new SensorManager();\r\n    private state: IState;\r\n    /**\r\n     * Konstruktor des Seitenverwalters. Registriert sich als Beobachter auf seiner Seite und setzt den start Status. \r\n     */\r\n    constructor () {\r\n        const queryString = window.location.search;\r\n        this.urlParams = new URLSearchParams( queryString );\r\n        let admin = this.urlParams.get( \"Admin\" )!;\r\n        this.page = new StartPage( \"Wilkommen! Sie erfassen für \" + admin );\r\n        this.page.attach( this );\r\n        this.state = this.page.getState();\r\n        MainController.getInstance().getFacade().registerDataminer( \"Miner\", +this.urlParams.get( \"SessionID\" )! );\r\n        this.state.wait! = this.sensorManager.getAvailableSensors().then(\r\n            ( availableSensor ) => {\r\n                for ( let index = 0; index < availableSensor.length; index++ ) {\r\n                    const sensorTypID: number = availableSensor[ index ].sensorTypID;\r\n                    const sensorType: string = availableSensor[ index ].sensorType;\r\n                    const chosen: boolean = false;\r\n                    this.state.recordingSettings!.availableSensorTypes.push( { sensorTypID, sensorType, chosen } );\r\n\r\n                }\r\n                this.page.setState( this.state );\r\n            } );\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Die Update Methode des Seitenverwalters.\r\n     */\r\n    update () {\r\n        this.state = this.page.getState();\r\n        switch ( this.state.currentState ) {\r\n            case States.ChangeToDataCollection:\r\n                this.start();\r\n                break;\r\n            case States.SetLanguage:\r\n                MainController.getInstance().setLanguage( this.state.languageCode );\r\n                break;\r\n            case States.NeedMessage:\r\n                this.state.messages = MainController.getInstance().getMessage( this.state.messages )!;\r\n                this.state.currentState = States.waitForDB;\r\n                this.page.setState( this.state );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holt sich alle wichtigen Daten für die Datenaufnahme aus der momentanen Seite. Darauf wird mit dem Sensormanager\r\n     * die Datenaufnahme initialisiert. Zum Schluss wird der Seitenwechsel zur Erfassungseite durchgeführt. \r\n     */\r\n    private start () {\r\n        let sensorTypes: number[] = this.state.recordingSettings!.usedSensorTypes;\r\n        let dataSetName: string = this.state.recordingSettings!.newDataSetName;\r\n        let waitTime: number = this.state.recordingSettings!.waitTime;\r\n        let readTime: number = this.state.recordingSettings!.readTime;\r\n        this.sensorManager.setUpDataRead( sensorTypes, dataSetName, waitTime, readTime, true ); //Was ist wenn Datensatz nicht erstellt? also false zurück gegeben wird\r\n        let dataCollectionController = new DataCollectionController( this.sensorManager );\r\n        MainController.getInstance().changeTo( dataCollectionController );\r\n    }\r\n\r\n\r\n}","import { PageController } from \"./PageController\";\r\nimport { RefferingController } from \"./ReferringController\";\r\nimport { MainControllerInterface } from \"./MainControllerInterface\";\r\nimport { Facade } from \"../model/Facade\";\r\nimport { StartController } from \"./StartController\";\r\n\r\nimport dataDE from '../model/language/de.json';\r\nimport { AIController } from \"./AIController\";\r\nimport { DeliveryController } from \"./DeliveryController\";\r\n\r\n/**\r\n* Hauptverwalter der Anwendung. Enthält momentane Seite, die Fassade und verwaltet die Sprache.\r\n*/\r\nexport class MainController implements MainControllerInterface {\r\n  /**\r\n  * Fassade des Models\r\n  */\r\n  private facade: Facade;\r\n\r\n  /**\r\n  * Nach dem Singelton Muster enthält sich der Maincontroller genau einmal selber.\r\n  */\r\n  private static mainController: MainController;\r\n\r\n  /**\r\n  * Der momentane Seitencontroller\r\n  */\r\n  private currentPageController: PageController | undefined;\r\n\r\n  /**\r\n   * Konstruktor des MainControllers. Holt sich die Fassade.\r\n   */\r\n  constructor () {\r\n    document.title = \"Explorer App\"\r\n    this.facade = new Facade( \"de-de\" );\r\n  }\r\n\r\n  private languageCode: string = \"de-de\";\r\n\r\n  /**\r\n   * Gibt sich selber zurück und sorgt dafür das nur ein MainController besteht.\r\n   * @returns MainController\r\n   */\r\n  static getInstance () {\r\n    if ( this.mainController === undefined ) {\r\n      this.mainController = new MainController();\r\n      return this.mainController;\r\n    }\r\n    return this.mainController;\r\n  }\r\n\r\n\r\n  /**\r\n   * Prüft ob der Benutzer angemeldet ist.\r\n   * @returns Gibt true zurück falls der Benutzer angemeldet ist, sonst wird false zurück gegeben.\r\n   */\r\n  checkLoginStatus () {\r\n    return false;//this.facade.checkLogin();\r\n  }\r\n\r\n  /**\r\n   * Setzt den momentanen Seitenverwalter neu\r\n   * @param destinationPageController Der neue Seitenverwalter\r\n   */\r\n  changeTo ( destinationPageController: PageController ) {\r\n    this.currentPageController = destinationPageController;\r\n  }\r\n\r\n  /**\r\n   * Andwendungstart, entscheidet durch die URL ob es sich um Desktop oder Smartphone handelt\r\n   */\r\n  startApp () {\r\n    const queryString = window.location.search;\r\n    let urlParams = new URLSearchParams( queryString );\r\n    if ( urlParams.get( \"isMiner\" ) === \"true\" ) {\r\n      this.currentPageController = new StartController();\r\n    }\r\n    else if ( urlParams.get( \"deliverModel\" ) === \"true\" ) {\r\n      let modelID: number = +urlParams.get( \"modelID\" )!;\r\n      this.currentPageController = new DeliveryController( modelID );\r\n    }\r\n    else if ( urlParams.get( \"useModel\" ) === \"true\" ) {\r\n      let modelID: number = +urlParams.get( \"modelID\" )!;\r\n      this.currentPageController = new AIController( modelID );\r\n    }\r\n    else {\r\n      this.currentPageController = new RefferingController();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Gibt die Fassade zurück\r\n   */\r\n  getFacade () {\r\n    return this.facade;\r\n  }\r\n\r\n  /**\r\n   * @param ids Alle ids, zu denen man die Texte möchte.\r\n   * @returns Gibt alle texte zu den übergebenen ids zurück.\r\n   */\r\n  getMessage ( messages: { text: string, id: number; }[] ) {\r\n    return [ { text: \"null\", id: -1 } ];\r\n    /** \r\n    let messageIDs: number[] = [];\r\n    for ( let index = 0; index < messages.length; index++ ) {\r\n      messageIDs.push( messages[ index ].id );\r\n    }\r\n    let texts: string[] = [];\r\n    for ( let index = 0; index < messages.length; index++ ) {\r\n      messages[ index ].text = texts[ index ];\r\n      return messages;\r\n    } */\r\n  }\r\n\r\n  getText () {\r\n    switch ( this.languageCode ) {\r\n      case \"de-de\":\r\n        return dataDE;\r\n\r\n      default:\r\n        return dataDE;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param languageCode Das Sprachkürzel als string.\r\n   * @returns Gibt true zurück falls der wechsel erfolgt ist, sonst false.\r\n   */\r\n  setLanguage ( languageCode: string ) {\r\n    this.languageCode = languageCode;\r\n  }\r\n\r\n  getLanguageCode () {\r\n    return this.languageCode;\r\n  }\r\n}\r\n","\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { MainController } from './controller/MainController';\r\n\r\nMainController.getInstance().startApp();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}